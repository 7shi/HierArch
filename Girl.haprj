<?xml version="1.0"?>
<HAProject version="0.1.1086.42976">
  <HAClass Type="FolderGreen" Text="Girl:Girl" IsExpanded="true" IsSelected="false" AllowDrag="true">
    <Header>
      <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="true" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0">ここにソースコードの注釈を書きます。
</Comment>
        <Source SelectionStart="0" SelectionLength="0">using System;
</Source>
      </HAFunc>
    </Header>
    <Body>
      <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
    </Body>
    <Footer>
      <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
    </Footer>
    <HAClass Type="Folder" Text="Coding:Coding" IsExpanded="false" IsSelected="false" AllowDrag="true">
      <Header>
        <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="true" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0">ここにソースコードの注釈を書きます。
</Comment>
          <Source SelectionStart="0" SelectionLength="0">using System;
</Source>
        </HAFunc>
      </Header>
      <Body>
        <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Comment" Text="LocalHeader" IsExpanded="false" IsSelected="true" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="74" SelectionLength="0">フォルダの関数欄に作成した "LocalHeader" 名の注釈は特別です。
ソース欄がフォルダ内すべてのクラスにコメントとして挿入されます。
</Comment>
            <Source SelectionStart="73" SelectionLength="0">このファイルは ..\..\Girl.haprj から自動生成されています。
編集は必ずそちらを通すようにして、直接書き換えないでください。
</Source>
          </HAFunc>
        </HAFunc>
      </Body>
      <Footer>
        <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
        </HAFunc>
      </Footer>
      <HAClass Type="Public" Text="ParserBase" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <HAObject Type="Protected" Text="reader:TextReader" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Protected" Text="source:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Protected" Text="lineNumber:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Protected" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Protected" Text="spacing:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Protected" Text="keyWords:string[]" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Folder" Text="Color" IsExpanded="true" IsSelected="false" AllowDrag="true">
          <HAObject Type="Public" Text="Color_Default:Color" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Public" Text="Color_KeyWord:Color" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Public" Text="Color_Comment:Color" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Public" Text="Color_String:Color" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Public" Text="Color_Directive:Color" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        </HAObject>
        <Header>
          <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="true" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="54" SelectionLength="0">using System;
using System.Drawing;
using System.IO;
using System.Text;
</Source>
          </HAFunc>
        </Header>
        <Body>
          <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="40" SelectionLength="0">&lt;summary&gt;
プルモデルによる C 型言語向けパーサのベースクラスです。
&lt;/summary&gt;
</Comment>
            <Source SelectionStart="0" SelectionLength="0" />
            <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
              <Source SelectionStart="244" SelectionLength="0">this.reader   = null;
this.keyWords = null;

this.Color_Default   = Color.Black;
this.Color_KeyWord   = Color.Blue;
this.Color_Comment   = Color.DarkGreen;
this.Color_String    = Color.Magenta;
this.Color_Directive = Color.DarkMagenta;
</Source>
            </HAFunc>
            <HAFunc Type="Protected" Text="Init:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="0" SelectionLength="0">this.source     = new StringBuilder();
this.lineNumber = 1;
this.text       = "";
this.spacing    = "";
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="Read:virtual bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="15" SelectionLength="0">return false;
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="Close" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="21" SelectionLength="0">this.reader = null;
</Source>
            </HAFunc>
            <HAFunc Type="Folder" Text="Properties" IsExpanded="true" IsSelected="false" AllowDrag="true">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="0" SelectionLength="0" />
              <HAFunc Type="Public" Text="get_Reader:TextReader" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="21" SelectionLength="0">return this.reader;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="set_Reader:TextReader" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="36" SelectionLength="0">this.reader = value;
this.Init();
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_Source:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="32" SelectionLength="0">return this.source.ToString();
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_LineNumber:int" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="25" SelectionLength="0">return this.lineNumber;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_Text:string" IsExpanded="true" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="19" SelectionLength="0">return this.text;
</Source>
                <HAFunc Type="Public" Text="get_IsKeyWord:virtual bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="139" SelectionLength="0">if (this.keyWords == null) return false;

foreach (string kw in this.KeyWords)
{
	if (this.text == kw) return true;
}
return false;
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="get_IsComment:virtual bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="15" SelectionLength="0">return false;
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="get_IsString:virtual bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="15" SelectionLength="0">return false;
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="get_IsDirective:virtual bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="15" SelectionLength="0">return false;
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="get_TextColor:virtual Color" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="269" SelectionLength="0">if (this.IsKeyWord)
{
	return this.Color_KeyWord;
}
else if (this.IsComment)
{
	return this.Color_Comment;
}
else if (this.IsString)
{
	return this.Color_String;
}
else if (this.IsDirective)
{
	return this.Color_Directive;
}
return this.Color_Default;
</Source>
                </HAFunc>
              </HAFunc>
              <HAFunc Type="Public" Text="get_Spacing:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="22" SelectionLength="0">return this.spacing;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_KeyWords:string[]" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="23" SelectionLength="0">return this.keyWords;
</Source>
              </HAFunc>
            </HAFunc>
          </HAFunc>
        </Body>
        <Footer>
          <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="0" SelectionLength="0" />
          </HAFunc>
        </Footer>
      </HAClass>
      <HAClass Type="Public" Text="CParserBase:ParserBase" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <HAObject Type="Protected" Text="separator:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="preText:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="preChar:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="curChar:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="nextChar:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="curLineNum:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="prePos:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="curPos:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="pos:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        <Header>
          <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="33" SelectionLength="0">using System;
using System.IO;
</Source>
          </HAFunc>
        </Header>
        <Body>
          <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="40" SelectionLength="0">&lt;summary&gt;
プルモデルによる C 型言語向けパーサのベースクラスです。
&lt;/summary&gt;
</Comment>
            <Source SelectionStart="112" SelectionLength="0">private enum State
{
	Normal,
	Comment1,
	Comment2,
	Directive,
	String,
	StringAt,
	Char,
	Number
}
</Source>
            <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
              <Source SelectionStart="0" SelectionLength="0" />
            </HAFunc>
            <HAFunc Type="Protected" Text="Init:override" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="234" SelectionLength="0">base.Init();

this.separator = ";,.(){}[]*";

this.preText    = "";
this.preChar    = -1;
this.curChar    = -1;
this.nextChar   = -1;
this.curLineNum =  1;
this.prePos     =  0;
this.curPos     =  0;
this.pos        =  0;
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="Read:override bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments />
              <HAObject Type="Private" Text="ch:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="st:State" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="1542" SelectionLength="0">this.preText = this.text;
this.text = this.spacing = "";
ch = -1;
st = State.Normal;

for (;;)
{
	if (this.text.Length &lt; 1)
	{
		this.lineNumber = this.curLineNum;
		this.prePos = this.pos;
		this.pos = this.curPos;
	}
	ch = ReadChar();
	if (ch == -1) break;

	if (st == State.String || st == State.StringAt
		|| st == State.Char || st == State.Comment1)
	{
	}
	else if (st == State.Comment2)
	{
		if (ch == '\r' || ch == '\n')
		{
			this.nextChar = ch;
			break;
		}
	}
	else if (" \t\r\n".IndexOf((char)ch) &gt;= 0) 
	{
		if (this.text.Length &gt; 0)
		{
			this.nextChar = ch;
			break;
		}
		this.spacing += (char)ch;
		continue;
	}
	else if (ch == '"')
	{
		if (this.text.Length &lt; 1)
		{
			st = State.String;
		}
		else if (this.text == "@")
		{
			st = State.StringAt;
		}
		else if (st != State.String)
		{
			this.nextChar = ch;
			break;
		}
	}
	else if (ch == '\'')
	{
		if (this.text.Length &lt; 1)
		{
			st = State.Char;
		}
		else if (st != State.Char)
		{
			this.nextChar = ch;
			break;
		}
	}
	else if (ch == '.')
	{
		if (this.text.Length &gt; 0 &amp;&amp; st != State.Number)
		{
			this.nextChar = ch;
			break;
		}
	}
	else if (this.text == "/" &amp;&amp; ch == '*')
	{
	}
	else if (this.text.Length &gt; 0
		&amp;&amp; this.separator.IndexOf((char)ch) &gt;= 0)
	{
		this.nextChar = ch;
		break;
	}

	this.text += (char)ch;
	if (this.text.Length == 1) 
	{
		this.lineNumber = this.curLineNum;
		if (this.text == "#") 
		{
			st = State.Directive;
		}
		else if (this.separator.IndexOf(this.text) &gt;= 0)
		{
			this.preChar = ch;
			break;
		}
	}
	else if (this.text == "/*") 
	{
		st = State.Comment1;
	}
	else if (this.text == "//")
	{
		st = State.Comment2;
	}
	else if (this.text == "#") 
	{
		st = State.Directive;
	}
	else if (this.text.Length == 1 &amp;&amp; '0' &lt;= ch &amp;&amp; ch &lt;= '9')
	{
		st = State.Number;
	}

	if (st == State.Comment1)
	{
		if (this.preChar == '*' &amp;&amp; ch == '/') break;
	} 
	else if (st == State.String)
	{
		if (this.text.Length &gt; 1 &amp;&amp; this.preChar != '\\'
			&amp;&amp; ch == '"')
		{
			break;
		}
	}
	else if (st == State.StringAt)
	{
		if (this.text.Length &gt; 2 &amp;&amp; ch == '"') break;
	}
	else if (st == State.Char)
	{
		if (this.text.Length &gt; 1 &amp;&amp; this.preChar != '\\'
			&amp;&amp; ch == '\'')
		{
			break;
		}
	}
}

return this.text.Length &gt; 0;
</Source>
            </HAFunc>
            <HAFunc Type="Private" Text="ReadChar:int" IsExpanded="false" IsSelected="true" AllowDrag="true">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="397" SelectionLength="0">if (this.nextChar != -1) 
{
	this.curChar = this.nextChar;
	this.nextChar = -1;
} 
else 
{
	this.preChar = this.curChar;
	this.curChar = this.reader.Read();
	if (this.curChar != -1)
	{
		this.curPos++;
		this.source.Append((char)this.curChar);
	}
	if (this.curChar == '\r'
		|| (this.preChar != '\r' &amp;&amp; this.curChar == '\n'))
	{
		this.curLineNum++;
	}
}
return this.curChar;
</Source>
            </HAFunc>
            <HAFunc Type="Folder" Text="Properties" IsExpanded="true" IsSelected="false" AllowDrag="true">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="0" SelectionLength="0" />
              <HAFunc Type="Public" Text="get_IsComment:override bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="66" SelectionLength="0">return this.text.StartsWith("/*") || this.text.StartsWith("//");
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_IsString:override bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="65" SelectionLength="0">return this.text.StartsWith("\"") || this.text.StartsWith("'");
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_IsDirective:override bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="35" SelectionLength="0">return this.text.StartsWith("#");
</Source>
              </HAFunc>
            </HAFunc>
          </HAFunc>
        </Body>
        <Footer>
          <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="0" SelectionLength="0" />
          </HAFunc>
        </Footer>
      </HAClass>
      <HAClass Type="Public" Text="CSharpParser:CParserBase" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <Header>
          <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="15" SelectionLength="0">using System;
</Source>
          </HAFunc>
        </Header>
        <Body>
          <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="30" SelectionLength="0">&lt;summary&gt;
プルモデルによる C# のパーサです。
&lt;/summary&gt;
</Comment>
            <Source SelectionStart="0" SelectionLength="0" />
            <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="true" AllowDrag="true">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
              <Source SelectionStart="829" SelectionLength="0">this.keyWords = new string[]
	{
		"abstract", "as", "base", "bool",
		"break", "byte", "case", "catch",
		"char", "checked", "class", "const",
		"continue", "decimal", "default", "delegate",
		"do", "double", "else", "enum",
		"event", "explicit", "extern", "false",
		"finally", "fixed", "float", "for",
		"foreach", "goto", "if", "implicit",
		"in", "int", "interface", "internal",
		"is", "lock", "long", "namespace",
		"new", "null", "object", "operator",
		"out", "override", "params", "private",
		"protected", "public", "readonly", "ref",
		"return", "sbyte", "sealed", "short",
		"sizeof", "stackalloc", "static", "string",
		"struct", "switch", "this", "throw",
		"true", "try", "typeof", "uint",
		"ulong", "unchecked", "unsafe", "ushort",
		"using", "virtual", "volatile", "void",
		"while"
	};
</Source>
            </HAFunc>
          </HAFunc>
        </Body>
        <Footer>
          <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="0" SelectionLength="0" />
          </HAFunc>
        </Footer>
      </HAClass>
    </HAClass>
    <HAClass Type="Folder" Text="Rtf:Rtf" IsExpanded="false" IsSelected="false" AllowDrag="true">
      <Header>
        <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="true" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0">ここにソースコードの注釈を書きます。
</Comment>
          <Source SelectionStart="15" SelectionLength="0">using System;
</Source>
        </HAFunc>
      </Header>
      <Body>
        <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Comment" Text="LocalHeader" IsExpanded="false" IsSelected="true" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="74" SelectionLength="0">フォルダの関数欄に作成した "LocalHeader" 名の注釈は特別です。
ソース欄がフォルダ内すべてのクラスにコメントとして挿入されます。
</Comment>
            <Source SelectionStart="18" SelectionLength="0">このファイルは ..\..\Girl.haprj から自動生成されています。
編集は必ずそちらを通すようにして、直接書き換えないでください。
</Source>
          </HAFunc>
        </HAFunc>
      </Body>
      <Footer>
        <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
        </HAFunc>
      </Footer>
      <HAClass Type="Public" Text="RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <HAObject Type="Protected" Text="name:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Protected" Text="rtfObjects:ArrayList" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        <Header>
          <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="138" SelectionLength="0">using System;
using System.Collections;
using System.Globalization;
using System.IO;
using System.Text;
using System.Windows.Forms;
</Source>
          </HAFunc>
        </Header>
        <Body>
          <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="39" SelectionLength="0">&lt;summary&gt;
RTF の要素を保持します。
&lt;/summary&gt;
</Comment>
            <Source SelectionStart="0" SelectionLength="0" />
            <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
              <Source SelectionStart="53" SelectionLength="0">this.name = "";
this.rtfObjects = new ArrayList();
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="nm:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
              <Source SelectionStart="53" SelectionLength="0">this.name = nm;
this.rtfObjects = new ArrayList();
</Source>
            </HAFunc>
            <HAFunc Type="Folder" Text="Properties" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="0" SelectionLength="0" />
              <HAFunc Type="Public" Text="get_Name:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="19" SelectionLength="0">return this.name;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_RtfObjects:ArrayList" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="25" SelectionLength="0">return this.rtfObjects;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_IsText:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <HAObject Type="Private" Text="len:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="235" SelectionLength="0">len = this.name.Length;
if (len &lt; 1 || this.name[0] != '\\' || len &lt; 2) return true;
if (len &gt; 2 &amp;&amp; (this.name[1] == 'c' || this.name[1] == 'u')
	&amp;&amp; char.IsDigit(this.name[2])) return true;

return __CLASS._IsChar(this.name[1]);
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_IsEmpty:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="54" SelectionLength="0">return this.name == "" &amp;&amp; this.rtfObjects.Count &lt; 1;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_IsFontNumber:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="95" SelectionLength="0">return this.name.Length &gt; 2
	&amp;&amp; this.name.StartsWith("\\f")
	&amp;&amp; char.IsDigit(this.name[2]);
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_Text:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="0" SelectionLength="0">return this.GetText(Encoding.Default);
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_Value:int" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="176" SelectionLength="0">sb = new StringBuilder();
foreach (char ch in this.name)
{
	if (char.IsDigit(ch)) sb.Append(ch);
}
if (sb.Length &lt; 1) return 0;

return Convert.ToInt32(sb.ToString());
</Source>
              </HAFunc>
            </HAFunc>
            <HAFunc Type="Public" Text="GetText:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="encoding:Encoding" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <HAObject Type="Private" Text="text:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="ms:MemoryStream" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              <HAObject Type="Private" Text="sr:StringReader" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="d:Decoder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="ch:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="ch2:char" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="461" SelectionLength="0">text = new StringBuilder();
ms = new MemoryStream();
sr = new StringReader(this.name);
d = encoding.GetDecoder();
while ((ch = sr.Read()) != -1)
{
	ch2 = (char)ch;
	if (ch2 == '\\')
	{
		this.ReadEscape(text, ms, sr, d);
	}
	else if (' ' &lt;= ch2 &amp;&amp; ch2 &lt; 128)
	{
		ms.WriteByte((byte)ch2);
	}
	else
	{
		this.AppendText(text, ms, d);
		text.Append(ch2);
	}
}
this.AppendText(text, ms, d);
sr.Close();
ms.Close();
return text.ToString();
</Source>
              <HAFunc Type="Private" Text="ReadEscape" IsExpanded="true" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="text:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                  <HAObject Type="Private" Text="ms:MemoryStream" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  <HAObject Type="Private" Text="sr:StringReader" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                  <HAObject Type="Private" Text="d:Decoder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                </Arguments>
                <HAObject Type="Private" Text="ch:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <HAObject Type="Private" Text="ch2:char" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="59" SelectionLength="0">ch = sr.Read();
if (ch == -1) return;

ch2 = (char)ch;
if (ch2 == '\'')
{
	this.ReadByte(ms, sr);
}
else if (ch2 == 'u')
{
	this.AppendText(text, ms, d);
	this.ReadUnicode(text, sr);
}
else
{
	this.AppendText(text, ms, d);
	text.Append(ch2);
}
</Source>
                <HAFunc Type="Private" Text="ReadByte" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="ms:MemoryStream" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    <HAObject Type="Private" Text="sr:StringReader" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                  </Arguments>
                  <HAObject Type="Private" Text="ch:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                  <HAObject Type="Private" Text="hex:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="217" SelectionLength="0">ch = sr.Read();
if (ch == -1) return;

hex = ((char)ch).ToString();

ch = sr.Read();
if (ch == -1) return;

hex += (char)ch;

try
{
	ms.WriteByte(byte.Parse(hex, NumberStyles.HexNumber));
}
catch
{
}
</Source>
                </HAFunc>
                <HAFunc Type="Private" Text="ReadUnicode" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="text:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                    <HAObject Type="Private" Text="sr:StringReader" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  <HAObject Type="Private" Text="ch:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                  <HAObject Type="Private" Text="ch2:char" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="241" SelectionLength="0">sb = new StringBuilder();
while ((ch = sr.Read()) != -1)
{
	ch2 = (char)ch;
	if (!char.IsDigit(ch2)) break;
	sb.Append(ch2);
}
if (sb.Length &lt; 1) return;

try
{
	text.Append((char)Convert.ToInt32(sb.ToString()));
}
catch
{
}
</Source>
                </HAFunc>
              </HAFunc>
              <HAFunc Type="Private" Text="AppendText" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="text:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                  <HAObject Type="Private" Text="ms:MemoryStream" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                  <HAObject Type="Private" Text="d:Decoder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <HAObject Type="Private" Text="bytes:Byte[]" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <HAObject Type="Private" Text="chars:char[]" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="201" SelectionLength="0">if (ms.Length &lt; 1 ) return;

bytes = ms.ToArray();
ms.SetLength(0);

chars = new char[d.GetCharCount(bytes, 0, bytes.Length)];
d.GetChars(bytes, 0, bytes.Length, chars, 0);
text.Append(chars);
</Source>
              </HAFunc>
            </HAFunc>
            <HAFunc Type="Public" Text="Parse" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="sr:StringReader" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <HAObject Type="Private" Text="ch1:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="ch:char" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="escape:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="u:bool" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="81" SelectionLength="0">sb = new StringBuilder();
escape = u = false;
while ((ch1 = sr.Read()) &gt;= 0)
{
	ch = (char)ch1;
	if (u)
	{
		if (!char.IsDigit(ch))
		{
			this.AddRtfObject(sb);
		}
		sb.Append("\\u");
		sb.Append(ch);
		u = false;
	}
	else if (escape)
	{
		bool text = __CLASS._IsText(sb);
		if (text &amp;&amp; ch == 'u')
		{
			u = true;
		}
		else
		{
			if (text &amp;&amp; !__CLASS._IsChar(ch))
			{
				this.AddRtfObject(sb);
			}
			sb.Append('\\');
			sb.Append(ch);
		}
		escape = false;
	}
	else if (ch == '}')
	{
		break;
	}
	else if (ch == '{')
	{
		this.AddRtfObject(sb);
		ro = new RtfObject();
		ro.Parse(sr);
		this.AddRtfObject(ro);
	}
	else if (ch == '\\')
	{
		if (!__CLASS._IsText(sb)) this.AddRtfObject(sb);
		escape = true;
	}
	else if (ch == ' ' &amp;&amp; !__CLASS._IsText(sb))
	{
		this.AddRtfObject(sb);
	}
	else if (ch == '\r' || ch == '\n')
	{
		this.AddRtfObject(sb);
	}
	else
	{
		sb.Append(ch);
	}
}
this.AddRtfObject(sb);
</Source>
              <HAFunc Type="Protected" Text="_IsText:static bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <HAObject Type="Private" Text="len:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="193" SelectionLength="0">len = sb.Length;
if (len &lt; 1 || sb[0] != '\\' || len &lt; 2) return true;
if (len &gt; 2 &amp;&amp; (sb[1] == 'c' || sb[1] == 'u')
	&amp;&amp; char.IsDigit(sb[2])) return true;

return __CLASS._IsChar(sb[1]);
</Source>
              </HAFunc>
              <HAFunc Type="Protected" Text="_IsChar:static bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="ch:char" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="60" SelectionLength="0">return ch == '\\' || ch == '{' || ch == '}' || ch == '\'';
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="AddRtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="name:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="36" SelectionLength="0">this.AddRtfObject(new RtfObject(name));
</Source>
              </HAFunc>
              <HAFunc Type="Protected" Text="AddRtfObject:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <HAObject Type="Private" Text="len:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <HAObject Type="Private" Text="ret:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="227" SelectionLength="0">len = sb.Length;
if (len &lt; 1) return null;

if (this.name == "")
{
	this.name = sb.ToString();
	ret = this;
}
else
{
	ret = new RtfObject(sb.ToString());
	this.AddRtfObject(ret);
}
sb.Remove(0, len);
return ret;
</Source>
              </HAFunc>
              <HAFunc Type="Protected" Text="AddRtfObject:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="26" SelectionLength="0">this.rtfObjects.Add(ro);
</Source>
              </HAFunc>
            </HAFunc>
            <HAFunc Type="Public" Text="ParseNode" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="node:TreeNode" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="136" SelectionLength="0">this.name = node.Text;

foreach (TreeNode n in node.Nodes)
{
	ro = new RtfObject();
	ro.ParseNode(n);
	this.AddRtfObject(ro);
}
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="GenerateRtf" IsExpanded="false" IsSelected="true" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="351" SelectionLength="0">if (this.IsEmpty) return;

if (this.rtfObjects.Count &lt; 1)
{
	sb.Append(this.name);
	if (this.name == "\\par") sb.Append("\r\n");
	return;
}

sb.Append('{');
sb.Append(this.name);

this.GenerateRtfChild(sb);

sb.Append('}');
if (this.name == "\\colortbl" || this.name == "\\fonttbl" || this.name == "\\rtf1")
{
	sb.Append("\r\n");
}
</Source>
              <HAFunc Type="Protected" Text="GenerateRtfChild:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <HAObject Type="Private" Text="prev:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="130" SelectionLength="0">prev = null;
foreach (object obj in this.rtfObjects)
{
	ro = obj as RtfObject;
	if (sb.Length &gt; 0 &amp;&amp; sb[sb.Length - 1] != '\n'
		&amp;&amp; !ro.Name.StartsWith("\\")
		&amp;&amp; (prev == null || !prev.IsText))
	{
		sb.Append(' ');
	}
	ro.GenerateRtf(sb);
	prev = ro;
}
</Source>
              </HAFunc>
            </HAFunc>
            <HAFunc Type="Public" Text="DisplayTreeView" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="treeView:TreeView" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <HAObject Type="Private" Text="parent:TreeNode" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <HAObject Type="Private" Text="n:TreeNode" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="59" SelectionLength="0">if (this.IsEmpty) return;

n = new TreeNode(this.name);
if (parent == null)
{
	treeView.Nodes.Add(n);
}
else
{
	parent.Nodes.Add(n);
}

this.DisplayTreeViewChild(treeView, n);
</Source>
              <HAFunc Type="Protected" Text="DisplayTreeViewChild:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="treeView:TreeView" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                  <HAObject Type="Private" Text="node:TreeNode" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="101" SelectionLength="0">foreach (object obj in this.rtfObjects)
{
	(obj as RtfObject).DisplayTreeView(treeView, node);
}
</Source>
              </HAFunc>
            </HAFunc>
            <HAFunc Type="Public" Text="Exists:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="target:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="17" SelectionLength="0">if (this.name == target) return true;

foreach (object obj in this.rtfObjects)
{
	if ((obj as RtfObject).Exists(target)) return true;
}

return false;
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="Remove" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="target:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <HAObject Type="Private" Text="ros:ArrayList" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="194" SelectionLength="0">ros = new ArrayList();
foreach (object obj in this.rtfObjects)
{
	ro = obj as RtfObject;
	if (ro.name == target) continue;
	
	ros.Add(ro);
	ro.Remove(target);
}
this.rtfObjects = ros;
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="ConvertText:static string" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="274" SelectionLength="0">sb = new StringBuilder();
foreach (char ch in text)
{
	if (ch == '\\' || ch == '{' || ch == '}')
	{
		sb.Append('\\');
	}
	if (' ' &lt;= ch &amp;&amp; ch &lt; 128)
	{
		sb.Append(ch);
	}
	else
	{
		sb.Append(string.Format("\\u{0}?", (int)ch));
	}
}
return sb.ToString();
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="ConvertLocalText:static string" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="e:Encoder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="chars:char[]" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="bytes:byte[]" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="ch:char" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="469" SelectionLength="0">sb = new StringBuilder();
e = Encoding.Default.GetEncoder();
chars = text.ToCharArray();
bytes = new byte[e.GetByteCount(chars, 0, text.Length, false)];
e.GetBytes(chars, 0, text.Length, bytes, 0, false);
foreach (byte b in bytes)
{
	ch = (char)b;
	if (ch == '\\' || ch == '{' || ch == '}')
	{
		sb.Append('\\');
	}
	if (' ' &lt;= ch &amp;&amp; ch &lt; 128)
	{
		sb.Append(ch);
	}
	else
	{
		sb.Append(string.Format("\\'{0:x2}", b));
	}
}
return sb.ToString();
</Source>
            </HAFunc>
          </HAFunc>
        </Body>
        <Footer>
          <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="0" SelectionLength="0" />
          </HAFunc>
        </Footer>
      </HAClass>
      <HAClass Type="Public" Text="RtfDocument:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <HAObject Type="Private" Text="fontTable:RtfFontTable" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="colorTable:RtfColorTable" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="document:ArrayList" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        <Header>
          <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="295" SelectionLength="0">using System;
using System.Collections;
using System.Drawing;
using System.IO;
using System.Text;
using System.Windows.Forms;
using Girl.Text;

namespace Girl.Rtf
{
	public struct RtfContext
	{
		public int Font, FontSize, Color;
		public bool Bold, Italic, Underline;
	
		public void Read(RtfObject ro)
		{
			switch (ro.Name)
			{
				case "\\b":
					this.Bold = true;
					return;
				case "\\b0":
					this.Bold = false;
					return;
				case "\\i":
					this.Italic = true;
					return;
				case "\\i0":
					this.Italic = false;
					return;
				case "\\ul":
					this.Underline = true;
					return;
				case "\\ulnone":
					this.Underline = false;
					return;
			}
			
			if (ro.Name.StartsWith("\\fs"))
			{
				this.FontSize = ro.Value;
			}
			else if (ro.Name.StartsWith("\\f"))
			{
				this.Font = ro.Value;
			}
			else if (ro.Name.StartsWith("\\cf"))
			{
				this.Color = ro.Value;
			}
		}
	}
}
</Source>
          </HAFunc>
        </Header>
        <Body>
          <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="39" SelectionLength="0">&lt;summary&gt;
RTF の要素を保持します。
&lt;/summary&gt;
</Comment>
            <Source SelectionStart="0" SelectionLength="0" />
            <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments />
              <Comment SelectionStart="35" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
              <Source SelectionStart="118" SelectionLength="0">this.fontTable   = new RtfFontTable();
this.colorTable  = new RtfColorTable();
this.document    = new ArrayList();
</Source>
            </HAFunc>
            <HAFunc Type="Folder" Text="Properties" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="0" SelectionLength="0" />
              <HAFunc Type="Public" Text="get_FontTable:RtfFontTable" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="24" SelectionLength="0">return this.fontTable;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_ColorTable:RtfColorTable" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="25" SelectionLength="0">return this.colorTable;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_Document:ArrayList" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="23" SelectionLength="0">return this.document;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_LastContext:RtfContext" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <HAObject Type="Private" Text="ret:RtfContext" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="113" SelectionLength="0">ret = new RtfContext();
foreach (object obj in this.document)
{
	ret.Read(obj as RtfObject);
}
return ret;
</Source>
              </HAFunc>
            </HAFunc>
            <HAFunc Type="Public" Text="Parse:static RtfDocument" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="rtf:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <HAObject Type="Private" Text="ret:RtfDocument" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              <HAObject Type="Private" Text="sr:StringReader" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="ch1:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="ch:char" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="177" SelectionLength="0">ret = new RtfDocument();
sr = new StringReader(rtf);
while ((ch1 = sr.Read()) &gt;= 0)
{
	ch = (char)ch1;
	if (ch == '{')
	{
		ret.Parse(sr);
		break;
	}
}
return ret;
</Source>
              <HAFunc Type="Protected" Text="AddRtfObject:override" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="314" SelectionLength="0">if (ro.Name == "\\fonttbl")
{
	this.fontTable.SetObject(ro);
}
else if (ro.Name == "\\colortbl")
{
	this.colorTable.SetObject(ro);
}
else if (this.document.Count &gt; 0
	|| ro.Name.StartsWith("\\viewkind")
	|| ro.Name.StartsWith("\\uc"))
{
	this.document.Add(ro);
}
else
{
	base.AddRtfObject(ro);
}
</Source>
              </HAFunc>
            </HAFunc>
            <HAFunc Type="Public" Text="Parse:static RtfDocument" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="node:TreeNode" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <HAObject Type="Private" Text="ret:RtfDocument" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="61" SelectionLength="0">ret = new RtfDocument();
ret.ParseNode(node);
return ret;
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="ToRtf:string" IsExpanded="false" IsSelected="true" AllowDrag="true">
              <Arguments />
              <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="73" SelectionLength="0">sb = new StringBuilder();
this.GenerateRtf(sb);
return sb.ToString();
</Source>
              <HAFunc Type="Protected" Text="GenerateRtfChild:override" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <HAObject Type="Private" Text="prev:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="279" SelectionLength="0">base.GenerateRtfChild(sb);

this.fontTable .GenerateRtf(sb);
this.colorTable.GenerateRtf(sb);

if (this.document.Count &lt; 1)
{
	sb.Append(' ');
}
prev = null;
foreach (object obj in this.document)
{
	ro = obj as RtfObject;
	if (sb.Length &gt; 0 &amp;&amp; sb[sb.Length - 1] != '\n'
		&amp;&amp; !ro.Name.StartsWith("\\")
		&amp;&amp; (prev == null || !prev.IsText))
	{
		sb.Append(' ');
	}
	ro.GenerateRtf(sb);
	prev = ro;
}
</Source>
              </HAFunc>
            </HAFunc>
            <HAFunc Type="Public" Text="ToString:override string" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments />
              <HAObject Type="Private" Text="ret:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="rc:RtfContext" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="rf:RtfFont" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="360" SelectionLength="0">ret = new StringBuilder();
rc = new RtfContext();
foreach (object obj in this.document)
{
	ro = obj as RtfObject;
	rc.Read(ro);
	if (ro.IsText)
	{
		rf = this.fontTable.Fonts[rc.Font];
		ret.Append(ro.GetText(
			CharSetEncoding.GetEncoding(rf.CharSet)));
	}
	else if (ro.Name == "\\par")
	{
		ret.Append("\r\n");
	}
}
return ret.ToString();
</Source>
            </HAFunc>
            <HAFunc Type="Protected" Text="DisplayTreeViewChild:override" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="treeView:TreeView" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <HAObject Type="Private" Text="node:TreeNode" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="97" SelectionLength="0">base.DisplayTreeViewChild(treeView, node);

this. fontTable.DisplayTreeView(treeView, node);
this.colorTable.DisplayTreeView(treeView, node);

foreach (object obj in this.document)
{
	(obj as RtfObject).DisplayTreeView(treeView, node);
}
</Source>
            </HAFunc>
            <HAFunc Type="Folder" Text="Font" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="0" SelectionLength="0" />
              <HAFunc Type="Public" Text="set_Font:Font" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="58" SelectionLength="0">this.FontName = value.Name;
this.FontSize = value.Size;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_FontName:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <HAObject Type="Private" Text="fn:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <HAObject Type="Private" Text="v:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="217" SelectionLength="0">fn = "";
foreach (object obj in this.document)
{
	ro = obj as RtfObject;
	if (ro.IsFontNumber)
	{
		v = this.fontTable.Fonts[ro.Value].Name;
		if (fn != "" &amp;&amp; fn != v) return "";
		fn = v;
	}
}
return fn;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="set_FontName:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <HAObject Type="Private" Text="ros:ArrayList" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <HAObject Type="Private" Text="rf:RtfFont" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="272" SelectionLength="0">ros = new ArrayList();
foreach (object obj in this.document)
{
	ro = obj as RtfObject;
	if (ro.IsFontNumber)
	{
		rf = new RtfFont(value);
		ro = new RtfObject(string.Format(
			"\\f{0}", this.fontTable.GetIndex(rf)));
	}
	ros.Add(ro);
}
this.document = ros;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_FontSize:float" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <HAObject Type="Private" Text="ret:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <HAObject Type="Private" Text="v:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="215" SelectionLength="0">ret = 0;
foreach (object obj in this.document)
{
	ro = obj as RtfObject;
	if (ro.Name.StartsWith("\\fs"))
	{
		v = ro.Value;
		if (ret &gt; 0 &amp;&amp; ret != v) return 0;
		ret = v;
	}
}
return ((float)ret) / 2;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="set_FontSize:float" IsExpanded="true" IsSelected="false" AllowDrag="true">
                <Arguments />
                <HAObject Type="Private" Text="len:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="257" SelectionLength="0">this.RemoveFontSize();

len = this.document.Count;
for (int i = 0; i &lt; len; i++)
{
	ro = this.document[i] as RtfObject;
	if (ro.IsText)
	{
		this.document.Insert(i, new RtfObject(
			string.Format("\\fs{0}", (int)(value * 2))));
		return;
	}
}
</Source>
                <HAFunc Type="Public" Text="RemoveFontSize" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <HAObject Type="Private" Text="ros:ArrayList" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                  <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="0" SelectionLength="178">ros = new ArrayList();
foreach (object obj in this.document)
{
	ro = obj as RtfObject;
	if (ro.Name.StartsWith("\\fs")) continue;
	
	ros.Add(ro);
}
this.document = ros;
</Source>
                </HAFunc>
              </HAFunc>
              <HAFunc Type="Public" Text="set_CurrentFont:Font" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="48" SelectionLength="0">this.CurrentFontName = value.Name;
this.CurrentFontSize = value.Size;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_CurrentFontName:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="58" SelectionLength="0">return this.fontTable.Fonts[this.LastContext.Font].Name;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="set_CurrentFontName:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="92" SelectionLength="0">this.AddDocument(string.Format(
	"\\f{0}", this.fontTable.GetIndex(new RtfFont(value))));
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_CurrentFontSize:float" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="48" SelectionLength="0">return ((float)this.LastContext.FontSize) / 2;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="set_CurrentFontSize:float" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="0" SelectionLength="63">this.AddDocument(string.Format("\\fs{0}", (int)(value * 2)));
</Source>
              </HAFunc>
            </HAFunc>
            <HAFunc Type="Folder" Text="Style" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="0" SelectionLength="0" />
              <HAFunc Type="Public" Text="ExistsInDocument:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="target:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="116" SelectionLength="0">foreach (object obj in this.document)
{
	if ((obj as RtfObject).Exists(target)) return true;
}

return false;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="RemoveFromDocument" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="target:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <HAObject Type="Private" Text="ros:ArrayList" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="190" SelectionLength="0">ros = new ArrayList();
foreach (object obj in this.document)
{
	ro = obj as RtfObject;
	if (ro.Name == target) continue;
	
	ros.Add(ro);
	ro.Remove(target);
}
this.document = ros;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_IsBold:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="38" SelectionLength="0">return this.ExistsInDocument("\\b");
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_IsItalic:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="38" SelectionLength="0">return this.ExistsInDocument("\\i");
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_IsUnderline:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="39" SelectionLength="0">return this.ExistsInDocument("\\ul");
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="set_IsBold:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="101" SelectionLength="0">this.RemoveFromDocument("\\b");
this.RemoveFromDocument("\\b0");
if (value) this.AddStyle("\\b");
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="set_IsItalic:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="96" SelectionLength="0">this.RemoveFromDocument("\\i");
this.RemoveFromDocument("\\i0");
if (value) this.AddStyle("\\i");
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="set_IsUnderline:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="107" SelectionLength="0">this.RemoveFromDocument("\\ul");
this.RemoveFromDocument("\\ulnone");
if (value) this.AddStyle("\\ul");
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="AddStyle" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="style:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <HAObject Type="Private" Text="len:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="218" SelectionLength="0">len = this.document.Count;
for (int i = 0; i &lt; len; i++)
{
	ro = this.document[i] as RtfObject;
	if (ro.Name.StartsWith("\\f") || ro.IsText)
	{
		this.document.Insert(i, new RtfObject(style));
		return;
	}
}
</Source>
              </HAFunc>
            </HAFunc>
            <HAFunc Type="Folder" Text="Text Manipulation" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="0" SelectionLength="0" />
              <HAFunc Type="Public" Text="SetDocument" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="343" SelectionLength="0">if (this.name == "") this.name = "\\rtf1";
if (this.rtfObjects.Count &lt; 1)
{
	this.AddRtfObject(new RtfObject("\\ansi"));
	this.AddRtfObject(new RtfObject("\\deff0"));
}
if (this.document.Count &lt; 1)
{
	// 無限ループになるので this.AddDocument() は使わない
	this.document.Add(new RtfObject("\\uc1"));
	this.document.Add(new RtfObject("\\pard"));
}
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="AddDocument" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="name:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="62" SelectionLength="0">this.SetDocument();
this.document.Add(new RtfObject(name));
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="AppendText" IsExpanded="true" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <HAObject Type="Private" Text="prev:char" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="461" SelectionLength="0">if (text.Length &lt; 1) return;

sb = new StringBuilder();
prev = '\0';
foreach (char ch in text)
{
	if (ch == '\r' || (prev != '\r' &amp;&amp; ch == '\n'))
	{
		if (sb.Length &gt; 0)
		{
			this.AddDocument(
				RtfObject.ConvertText(sb.ToString()));
			sb.Remove(0, sb.Length);
		}
		this.AppendLine();
	}
	else if (ch != '\n')
	{
		sb.Append(ch);		
	}
	prev = ch;
}
if (sb.Length &gt; 0)
{
	this.AddDocument(RtfObject.ConvertText(sb.ToString()));
}
</Source>
                <HAFunc Type="Public" Text="AppendText" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                    <HAObject Type="Private" Text="color:Color" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <HAObject Type="Private" Text="c:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="32" SelectionLength="0">if (text.Length &lt; 1) return;

c = this.colorTable.GetIndex(color);
if (c != 0) this.AddDocument(string.Format("\\cf{0}", c));
this.AppendText(text);
if (c != 0) this.AddDocument("\\cf0");
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="AppendText" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                    <HAObject Type="Private" Text="fontStyle:FontStyle" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="32" SelectionLength="0">if (text.Length &lt; 1) return;

if ((fontStyle &amp; FontStyle.Bold) == FontStyle.Bold)
{
	this.AddDocument("\\b");
}
if ((fontStyle &amp; FontStyle.Italic) == FontStyle.Italic)
{
	this.AddDocument("\\i");
}
if ((fontStyle &amp; FontStyle.Underline) == FontStyle.Underline)
{
	this.AddDocument("\\ul");
}

this.AppendText(text);

if ((fontStyle &amp; FontStyle.Underline) == FontStyle.Underline)
{
	this.AddDocument("\\ulnone");
}
if ((fontStyle &amp; FontStyle.Italic) == FontStyle.Italic)
{
	this.AddDocument("\\i0");
}
if ((fontStyle &amp; FontStyle.Bold) == FontStyle.Bold)
{
	this.AddDocument("\\b0");
}
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="AppendText" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                    <HAObject Type="Private" Text="color:Color" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    <HAObject Type="Private" Text="fontStyle:FontStyle" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                  </Arguments>
                  <HAObject Type="Private" Text="c:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="32" SelectionLength="0">if (text.Length &lt; 1) return;

c = this.colorTable.GetIndex(color);
if (c != 0) this.AddDocument(string.Format("\\cf{0}", c));
this.AppendText(text, fontStyle);
if (c != 0) this.AddDocument("\\cf0");
</Source>
                </HAFunc>
              </HAFunc>
              <HAFunc Type="Public" Text="AppendLine" IsExpanded="true" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="28" SelectionLength="0">this.AddDocument("\\par");
</Source>
                <HAFunc Type="Public" Text="AppendLine" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="44" SelectionLength="0">this.AppendText(text);
this.AppendLine();
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="AppendLine" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                    <HAObject Type="Private" Text="color:Color" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="51" SelectionLength="0">this.AppendText(text, color);
this.AppendLine();
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="AppendLine" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                    <HAObject Type="Private" Text="fontStyle:FontStyle" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="55" SelectionLength="0">this.AppendText(text, fontStyle);
this.AppendLine();
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="AppendLine" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                    <HAObject Type="Private" Text="color:Color" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    <HAObject Type="Private" Text="fontStyle:FontStyle" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="62" SelectionLength="0">this.AppendText(text, color, fontStyle);
this.AppendLine();
</Source>
                </HAFunc>
              </HAFunc>
            </HAFunc>
          </HAFunc>
        </Body>
        <Footer>
          <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="0" SelectionLength="0" />
          </HAFunc>
        </Footer>
      </HAClass>
      <HAClass Type="Public" Text="RtfFontTable:RtfObject" IsExpanded="true" IsSelected="false" AllowDrag="true">
        <HAObject Type="Public" Text="fonts:RtfFont[]" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        <Header>
          <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="15" SelectionLength="20">using System;
using System.Text;
</Source>
          </HAFunc>
        </Header>
        <Body>
          <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="47" SelectionLength="0">&lt;summary&gt;
RTF の \fonttbl を管理します。
&lt;/summary&gt;
</Comment>
            <Source SelectionStart="0" SelectionLength="0" />
            <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
              <Source SelectionStart="20" SelectionLength="0">this.fonts = null;
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="SetObject" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="76" SelectionLength="0">this.fonts = null;
this.name = ro.Name;
this.rtfObjects = ro.RtfObjects;
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="get_Fonts:RtfFont[]" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments />
              <HAObject Type="Private" Text="i:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="244" SelectionLength="0">if (this.fonts != null) return this.fonts;

this.fonts = new RtfFont[this.rtfObjects.Count];

i = 0;
foreach (RtfObject ro in this.rtfObjects)
{
	this.fonts[i] = new RtfFont();
	this.fonts[i].SetFont(ro);
	i++;
}
return this.fonts;
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="get_TableText:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments />
              <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="67" SelectionLength="0">sb = new StringBuilder();
this.Write(sb);
return sb.ToString();
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="Write" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="58" SelectionLength="0">foreach (RtfFont rf in this.Fonts)
{
	rf.Write(sb);
}
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="GetIndex:int" IsExpanded="false" IsSelected="true" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="rf:RtfFont" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <HAObject Type="Private" Text="ret:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="468" SelectionLength="0">ret = 0;
foreach (RtfFont rf2 in this.Fonts)
{
	if (rf2.Equals(rf)) return ret;
	ret++;
}

this.fonts = null;
if (this.name == "") this.name = "\\fonttbl";
ro = new RtfObject(string.Format("\\f{0}", ret));
ro.AddRtfObject(string.Format("\\f{0}"       , rf.Family ));
if (rf.CharSet &gt;= 0)
{
	ro.AddRtfObject(string.Format("\\fcharset{0}", rf.CharSet));
}
ro.AddRtfObject(string.Format("{0};"         , rf.Name   ));
this.AddRtfObject(ro);
return ret;
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="Contains:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="rf:RtfFont" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="33" SelectionLength="0">return this.GetIndex(rf) != -1;
</Source>
            </HAFunc>
          </HAFunc>
        </Body>
        <Footer>
          <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="0" SelectionLength="0" />
          </HAFunc>
        </Footer>
        <HAClass Type="Public" Text="RtfFont" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <HAObject Type="Public" Text="Name:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Public" Text="Family:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Public" Text="CharSet:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Header>
            <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="58" SelectionLength="0">using System;
using System.Drawing;
using System.Text;
</Source>
            </HAFunc>
          </Header>
          <Body>
            <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="40" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
              <Source SelectionStart="0" SelectionLength="0" />
              <HAFunc Type="Private" Text="Init" IsExpanded="false" IsSelected="true" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="79" SelectionLength="0">this.Name = this.Family = "";
this.CharSet = (int)Girl.Text.CharSet.Default;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
                <Source SelectionStart="14" SelectionLength="0">this.Init();
</Source>
                <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="font:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="21" SelectionLength="0">this.SetFont(font);
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="name:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="87" SelectionLength="0">this.Init();

this.Name   = RtfObject.ConvertLocalText(name);
this.Family = "nil";
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="name:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                    <HAObject Type="Private" Text="family:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="88" SelectionLength="0">this.Init();

this.Name   = RtfObject.ConvertLocalText(name);
this.Family = family;
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="name:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                    <HAObject Type="Private" Text="family:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                    <HAObject Type="Private" Text="charSet:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="99" SelectionLength="0">this.Name    = RtfObject.ConvertLocalText(name);
this.Family  = family;
this.CharSet = charSet;
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="f:Font" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="126" SelectionLength="0">this.Init();

this.Name    = RtfObject.ConvertLocalText(f.Name);
this.Family  = "nil";
this.CharSet = (int)f.GdiCharSet;
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="font:RtfFont" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="86" SelectionLength="0">this.Name    = font.Name;
this.Family  = font.Family;
this.CharSet = font.CharSet;
</Source>
                </HAFunc>
              </HAFunc>
              <HAFunc Type="Public" Text="SetFont" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="font:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="467" SelectionLength="0">this.Init();
if (font.RtfObjects.Count &lt; 1) return;

foreach (object obj in font.RtfObjects)
{
	ro = obj as RtfObject;
	if (ro.Name.StartsWith(@"\fcharset"))
	{
		try
		{
			this.CharSet = Convert.ToInt32(ro.Name.Substring(9));
		}
		catch
		{
		}
	}
	else if (ro.IsText &amp;&amp; ro.Name.EndsWith(";"))
	{
		string s = ro.Text;
		this.Name = s.Substring(0, s.Length - 1);
	}
	else if (ro.Name.StartsWith("\\f"))
	{
		this.Family = ro.Name.Substring(2);
	}
}
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="Write" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="38" SelectionLength="0">sb.Append(this.ToString() + "\r\n");
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="ToString:override string" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="80" SelectionLength="0">return string.Format("{0}, {1}, {2}",
	this.Name, this.Family, this.CharSet);
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="GetHashCode:override int" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="39" SelectionLength="0">return this.ToString().GetHashCode();
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="Equals:override bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="obj:object" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <HAObject Type="Private" Text="rf:RtfFont" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="147" SelectionLength="0">rf = obj as RtfFont;
if (rf == null) return false;

return this.Name == rf.Name
	&amp;&amp; this.Family == rf.Family
	&amp;&amp; this.CharSet == rf.CharSet;
</Source>
              </HAFunc>
            </HAFunc>
          </Body>
          <Footer>
            <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="0" SelectionLength="0" />
            </HAFunc>
          </Footer>
        </HAClass>
      </HAClass>
      <HAClass Type="Public" Text="RtfColorTable:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <HAObject Type="Public" Text="colors:Color[]" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        <Header>
          <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="58" SelectionLength="0">using System;
using System.Drawing;
using System.Text;
</Source>
          </HAFunc>
        </Header>
        <Body>
          <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="48" SelectionLength="0">&lt;summary&gt;
RTF の \colortbl を管理します。
&lt;/summary&gt;
</Comment>
            <Source SelectionStart="0" SelectionLength="0" />
            <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
              <Source SelectionStart="21" SelectionLength="0">this.colors = null;
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="SetObject" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="19" SelectionLength="0">this.colors = null;
this.name = ro.Name;
this.rtfObjects = ro.RtfObjects;
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="get_Colors:Color[]" IsExpanded="true" IsSelected="false" AllowDrag="true">
              <Arguments />
              <HAObject Type="Private" Text="v:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              <HAObject Type="Private" Text="r:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="g:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="b:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="i:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="446" SelectionLength="0">if (this.colors != null) return this.colors;

this.colors = new Color[this.ColorCount];
r = g = b = i = 0;
foreach (RtfObject ro in this.rtfObjects)
{
	v = ro.Name;
	if (v.StartsWith("\\red"))
	{
		r = ro.Value;
	}
	else if (v.StartsWith("\\green"))
	{
		g = ro.Value;
	}
	else if (v.StartsWith("\\blue"))
	{
		b = ro.Value;
	}
	if (v.EndsWith(";"))
	{
		this.colors[i] = Color.FromArgb(r, g, b);
		i++;
	}
}
if (i == 0) this.colors[0] = Color.FromArgb(0);
return this.colors;
</Source>
              <HAFunc Type="Public" Text="get_ColorCount:int" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <HAObject Type="Private" Text="ret:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="190" SelectionLength="0">if (this.colors != null) return this.colors.GetLength(0);

ret = 0;
foreach (RtfObject ro in this.rtfObjects)
{
	if (ro.Name.EndsWith(";")) ret++;
}
if (ret &lt; 1) ret++;
return ret;
</Source>
              </HAFunc>
            </HAFunc>
            <HAFunc Type="Public" Text="get_TableText:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments />
              <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="154" SelectionLength="0">sb = new StringBuilder();
foreach (Color c in this.Colors)
{
	sb.Append(string.Format("{0}, {1}, {2}\r\n", c.R, c.G, c.B));
}
return sb.ToString();
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="GetIndex:int" IsExpanded="false" IsSelected="true" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="color:Color" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <HAObject Type="Private" Text="ret:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="483" SelectionLength="0">ret = 0;
foreach (Color cc in this.Colors)
{
	if (cc.R == color.R
		&amp;&amp; cc.G == color.G
		&amp;&amp; cc.B == color.B)
	{
		return ret;
	}
	ret++;
}

this.colors = null;
if (this.name == "") this.name = "\\colortbl";
if (this.rtfObjects.Count &lt; 1)
{
	this.AddRtfObject(";");
	ret = 1;
}
this.AddRtfObject(string.Format("\\red{0}"  , color.R));
this.AddRtfObject(string.Format("\\green{0}", color.G));
this.AddRtfObject(string.Format("\\blue{0};", color.B));
return ret;
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="Contains:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="c:Color" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="32" SelectionLength="0">return this.GetIndex(c) != -1;
</Source>
            </HAFunc>
          </HAFunc>
        </Body>
        <Footer>
          <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="0" SelectionLength="0" />
          </HAFunc>
        </Footer>
      </HAClass>
    </HAClass>
    <HAClass Type="Folder" Text="Text:Text" IsExpanded="false" IsSelected="false" AllowDrag="true">
      <Header>
        <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="true" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0">ここにソースコードの注釈を書きます。
</Comment>
          <Source SelectionStart="0" SelectionLength="0">using System;
</Source>
        </HAFunc>
      </Header>
      <Body>
        <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Comment" Text="LocalHeader" IsExpanded="false" IsSelected="true" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="74" SelectionLength="0">フォルダの関数欄に作成した "LocalHeader" 名の注釈は特別です。
ソース欄がフォルダ内すべてのクラスにコメントとして挿入されます。
</Comment>
            <Source SelectionStart="18" SelectionLength="0">このファイルは ..\..\Girl.haprj から自動生成されています。
編集は必ずそちらを通すようにして、直接書き換えないでください。
</Source>
          </HAFunc>
        </HAFunc>
      </Body>
      <Footer>
        <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
        </HAFunc>
      </Footer>
      <HAClass Type="Public" Text="CharSetEncoding" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <Header>
          <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="true" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="81" SelectionLength="0">using System;
using System.Text;

namespace Girl.Text
{
	public enum CharSet
	{
		ANSI        =   0,
		Default     =   1,
		Symbol      =   2,
		Mac         =  77,
		ShiftJIS    = 128,
		Hangeul     = 129,
		Hangul      = 129,
		Johab       = 130,
		GB2312      = 134,
		ChineseBig5 = 136,
		Greek       = 161,
		Turkish     = 162,
		Vietnamese  = 163,
		Hebrew      = 177,
		Arabic      = 178,
		Baltic      = 186,
		Russian     = 204,
		Thai        = 222,
		EastEurope  = 238,
		OEM         = 255
	}
}
</Source>
          </HAFunc>
        </Header>
        <Body>
          <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="51" SelectionLength="0">&lt;summary&gt;
キャラクタセットを Encoding に変換します。
&lt;/summary&gt;
</Comment>
            <Source SelectionStart="0" SelectionLength="0" />
            <HAFunc Type="Public" Text="GetEncoding:static Encoding" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="charSet:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="0" SelectionLength="0">switch (charSet)
{
	case (int)CharSet.Default:
		return Encoding.Default;
	case (int)CharSet.Mac:
		return Encoding.GetEncoding("macintosh");
	case (int)CharSet.ShiftJIS:
		return Encoding.GetEncoding("shift_jis");
	case (int)CharSet.Hangul:
		return Encoding.GetEncoding("ks_c_5601-1987");
	case (int)CharSet.Johab:
		return Encoding.GetEncoding("Johab");
	case (int)CharSet.GB2312:
		return Encoding.GetEncoding("gb2312");
	case (int)CharSet.ChineseBig5:
		return Encoding.GetEncoding("big5");
	case (int)CharSet.Greek:
		return Encoding.GetEncoding("iso-8859-7");
	case (int)CharSet.Turkish:
		return Encoding.GetEncoding("windows-1254");
	case (int)CharSet.Vietnamese:
		return Encoding.GetEncoding("windows-1258");
	case (int)CharSet.Hebrew:
		return Encoding.GetEncoding("windows-1255");
	case (int)CharSet.Arabic:
		return Encoding.GetEncoding("windows-1256");
	case (int)CharSet.Baltic:
		return Encoding.GetEncoding("windows-1257");
	case (int)CharSet.Russian:
		return Encoding.GetEncoding("windows-1251");
	case (int)CharSet.Thai:
		return Encoding.GetEncoding("windows-874");
	case (int)CharSet.EastEurope:
		return Encoding.GetEncoding("windows-1250");
	case (int)CharSet.OEM:
		return Encoding.GetEncoding("IBM437");
}
return Encoding.ASCII;
</Source>
            </HAFunc>
          </HAFunc>
        </Body>
        <Footer>
          <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="0" SelectionLength="0" />
          </HAFunc>
        </Footer>
      </HAClass>
    </HAClass>
    <HAClass Type="Folder" Text="Windows:Windows" IsExpanded="true" IsSelected="false" AllowDrag="true">
      <Header>
        <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="true" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0">ここにソースコードの注釈を書きます。
</Comment>
          <Source SelectionStart="0" SelectionLength="0">using System;
</Source>
        </HAFunc>
      </Header>
      <Body>
        <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="0" SelectionLength="0" />
        </HAFunc>
      </Body>
      <Footer>
        <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
        </HAFunc>
      </Footer>
      <HAClass Type="Folder" Text="Forms:Forms" IsExpanded="true" IsSelected="false" AllowDrag="true">
        <Header>
          <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="true" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0">ここにソースコードの注釈を書きます。
</Comment>
            <Source SelectionStart="0" SelectionLength="0">using System;
</Source>
          </HAFunc>
        </Header>
        <Body>
          <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
            <Source SelectionStart="0" SelectionLength="0" />
            <HAFunc Type="Comment" Text="LocalHeader" IsExpanded="false" IsSelected="true" AllowDrag="true">
              <Arguments />
              <Comment SelectionStart="72" SelectionLength="0">フォルダの関数欄に作成した "LocalHeader" 名の注釈は特別です。
ソース欄がフォルダ内すべてのクラスにコメントとして挿入されます。
</Comment>
              <Source SelectionStart="74" SelectionLength="0">このファイルは ..\..\..\Girl.haprj から自動生成されています。
編集は必ずそちらを通すようにして、直接書き換えないでください。
</Source>
            </HAFunc>
          </HAFunc>
        </Body>
        <Footer>
          <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="0" SelectionLength="0" />
          </HAFunc>
        </Footer>
        <HAClass Type="Public" Text="ApplicationDataManager" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <HAObject Type="Private" Text="dataPath:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Header>
            <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="true" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="95" SelectionLength="0">using System;
using System.IO;
using System.Windows.Forms;
using System.Xml.Serialization;
</Source>
            </HAFunc>
          </Header>
          <Body>
            <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="29" SelectionLength="0">&lt;summary&gt;
アプリケーションの設定を管理します。
&lt;/summary&gt;
</Comment>
              <Source SelectionStart="0" SelectionLength="0" />
              <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
                <Source SelectionStart="23" SelectionLength="0">this.dataPath = null;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_DataPath:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="235" SelectionLength="0">if(this.dataPath != null) return this.dataPath;

string path = Application.LocalUserAppDataPath;
string ret = Directory.GetParent(path).FullName;
try
{
	Directory.Delete(path);
}
catch
{
}
this.dataPath = ret;
return ret;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="set_DataPath:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="24" SelectionLength="0">this.dataPath = value;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="Load:object" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="fileName:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                  <HAObject Type="Private" Text="dataType:Type" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="327" SelectionLength="0">object ret = null;
XmlSerializer xs = new XmlSerializer(dataType);
string path = this.DataPath;
if (!path.EndsWith("\\")) path += "\\";
FileStream fs;
try
{
	fs = new FileStream(path + fileName, FileMode.Open);
}
catch
{
	return ret;
}
try
{
	ret = xs.Deserialize(fs);
}
catch
{
}
fs.Close();
return ret;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="Save" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="fileName:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                  <HAObject Type="Private" Text="data:object" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="158" SelectionLength="0">XmlSerializer xs = new XmlSerializer(data.GetType());
StreamWriter sw = new StreamWriter(DataPath + "\\" + fileName);
xs.Serialize(sw, data);
sw.Close();
</Source>
              </HAFunc>
            </HAFunc>
          </Body>
          <Footer>
            <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="0" SelectionLength="0" />
            </HAFunc>
          </Footer>
        </HAClass>
        <HAClass Type="Public" Text="Document" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <HAObject Type="Public" Text="FullName:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Public" Text="Changed:bool" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Header>
            <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="33" SelectionLength="0">using System;
using System.IO;
</Source>
            </HAFunc>
          </Header>
          <Body>
            <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="24" SelectionLength="0">&lt;summary&gt;
文書を管理するクラスです。
&lt;/summary&gt;
</Comment>
              <Source SelectionStart="0" SelectionLength="0" />
              <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
                <Source SelectionStart="45" SelectionLength="0">this.FullName = "";
this.Changed  = false;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_Name:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="80" SelectionLength="0">if(this.FullName == "") return "無題";
return new FileInfo(this.FullName).Name;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="Open:virtual bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="37" SelectionLength="0">this.Changed = false;
return true;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="Save:virtual bool" IsExpanded="false" IsSelected="true" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="37" SelectionLength="0">this.Changed = false;
return true;
</Source>
              </HAFunc>
            </HAFunc>
          </Body>
          <Footer>
            <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="0" SelectionLength="0" />
            </HAFunc>
          </Footer>
        </HAClass>
        <HAClass Type="Public" Text="OpaqueSplitter:Splitter" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <HAObject Type="Public" Text="opaque:bool" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Header>
            <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="67" SelectionLength="0">using System;
using System.Drawing;
using System.Windows.Forms;
</Source>
            </HAFunc>
          </Header>
          <Body>
            <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="38" SelectionLength="0">&lt;summary&gt;
サイズ変更中にすぐ反映される Splitter です。
&lt;/summary&gt;
</Comment>
              <Source SelectionStart="0" SelectionLength="0" />
              <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
                <Source SelectionStart="21" SelectionLength="0">this.opaque = true;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_Opaque:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="21" SelectionLength="0">return this.opaque;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="set_Opaque:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="21" SelectionLength="0">this.opaque = true;
</Source>
              </HAFunc>
              <HAFunc Type="Protected" Text="OnSplitterMoving:override" IsExpanded="false" IsSelected="true" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="e:SplitterEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="507" SelectionLength="0">if (this.opaque)
{
	int a;
	int pos = this.SplitPosition;
	switch (Dock)
	{
		case DockStyle.Left:
			a = this.Left - pos;
			pos = e.SplitX - a;
			break;
		case DockStyle.Right:
			a = this.Left + pos;
			pos = a - e.SplitX;
			break;
		case DockStyle.Top:
			a = this.Top - pos;
			pos = e.SplitY - a;
			break;
		case DockStyle.Bottom:
			a = this.Top + pos;
			pos = a - e.SplitY;
			break;
	}
	if (this.SplitPosition != pos) this.SplitPosition = pos;
} 
base.OnSplitterMoving(e);
</Source>
              </HAFunc>
            </HAFunc>
          </Body>
          <Footer>
            <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="0" SelectionLength="0" />
            </HAFunc>
          </Footer>
        </HAClass>
        <HAClass Type="Public" Text="ContextManager" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <HAObject Type="Protected" Text="flags:bool[]" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Protected" Text="cmdList:ArrayList[]" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Protected" Text="handlers:EventHandler[]" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Protected" Text="toolBars:ArrayList" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Protected" Text="toolBarButtonHandlers:Hashtable" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Header>
            <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="71" SelectionLength="0">using System;
using System.Collections;
using System.Windows.Forms;
</Source>
            </HAFunc>
          </Header>
          <Body>
            <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="67" SelectionLength="0">&lt;summary&gt;
MenuItem, ToolBarButton, Button の状態を管理します。
&lt;/summary&gt;
</Comment>
              <Source SelectionStart="0" SelectionLength="0" />
              <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="true" AllowDrag="true">
                <Arguments />
                <HAObject Type="Private" Text="len:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <HAObject Type="Private" Text="i:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <Comment SelectionStart="35" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
                <Source SelectionStart="329" SelectionLength="0">len = this.MaxActions;

this.flags = new bool[len];
for (i = 0; i &lt; len; i++)
{
	this.flags[i] = false;
}

this.cmdList = new ArrayList[len];
for (i = 0; i &lt; len; i++)
{
	this.cmdList[i] = new ArrayList();
}

this.handlers = null;

this.toolBars = new ArrayList();
this.toolBarButtonHandlers = new Hashtable();
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_MaxActions:virtual int" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="11" SelectionLength="0">return 0;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="SetCommand" IsExpanded="true" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="action:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  <HAObject Type="Private" Text="target:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                </Arguments>
                <HAObject Type="Private" Text="targets:ArrayList" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="169" SelectionLength="0">targets = cmdList[action];
if (targets.Contains(target)) return;

targets.Add(target);
this.SetProperty(target, flags[action]);

this.SetHandler(action, target);
</Source>
                <HAFunc Type="Protected" Text="SetHandler:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="action:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                    <HAObject Type="Private" Text="target:object" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="499" SelectionLength="0">if (target is MenuItem)
{
	(target as MenuItem).Click += this.handlers[action];
}
else if (target is ToolBarButton)
{
	ToolBarButton tbb = target as ToolBarButton;
	ToolBar tb = tbb.Parent;
	if (!this.toolBars.Contains(tb))
	{
		this.toolBars.Add(tb);
		tb.ButtonClick += new ToolBarButtonClickEventHandler(this.toolBar_ButtonClick);
	}
	this.toolBarButtonHandlers[tbb] = this.handlers[action];
}
else if (target is Button)
{
	(target as Button).Click += this.handlers[action];
}
</Source>
                </HAFunc>
                <HAFunc Type="Protected" Text="toolBar_ButtonClick" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                    <HAObject Type="Private" Text="e:ToolBarButtonClickEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <HAObject Type="Private" Text="eh:EventHandler" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="160" SelectionLength="0">if (!this.toolBarButtonHandlers.Contains(e.Button)) return;

eh = this.toolBarButtonHandlers[e.Button] as EventHandler;
eh.Invoke(sender, EventArgs.Empty);
</Source>
                </HAFunc>
              </HAFunc>
              <HAFunc Type="Public" Text="SetCommand" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="action:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  <HAObject Type="Private" Text="targets:params object[]" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                </Arguments>
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="71" SelectionLength="0">foreach (object obj in targets)
{
	this.SetCommand(action, obj);
}
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="SetStatus" IsExpanded="true" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="action:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  <HAObject Type="Private" Text="status:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                </Arguments>
                <HAObject Type="Private" Text="targets:ArrayList" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="167" SelectionLength="0">if (flags[action] == status) return;

flags[action] = status;

targets = cmdList[action];
foreach (object obj in targets)
{
	this.SetProperty(obj, status);
}
</Source>
                <HAFunc Type="Protected" Text="SetProperty:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="target:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                    <HAObject Type="Private" Text="status:bool" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="367" SelectionLength="0">if (target is MenuItem)
{
	MenuItem mi = target as MenuItem;
	if (mi.Enabled != status) mi.Enabled = status;
}
else if (target is ToolBarButton)
{
	ToolBarButton tbb = target as ToolBarButton;
	if (tbb.Enabled != status) tbb.Enabled = status;
}
else if (target is Button)
{
	Button b = target as Button;
	if (b.Enabled != status) b.Enabled = status;
}
</Source>
                </HAFunc>
              </HAFunc>
              <HAFunc Type="Public" Text="SetStatus" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="status:bool" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <HAObject Type="Private" Text="len:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <HAObject Type="Private" Text="i:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="86" SelectionLength="0">len = this.MaxActions;
for (i = 0; i &lt; len; i++)
{
	this.SetStatus(i, status);
}
</Source>
              </HAFunc>
            </HAFunc>
          </Body>
          <Footer>
            <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="0" SelectionLength="0" />
            </HAFunc>
          </Footer>
        </HAClass>
        <HAClass Type="Public" Text="EditManager:ContextManager" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <HAObject Type="Private" Text="controls:ArrayList" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <HAObject Type="Private" Text="target:Control" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="forms:ArrayList" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <Header>
            <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="true" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="56" SelectionLength="0">このクラスは[STAThread]でのみ正常動作します。
[MTAThread]では使用しないでください。
</Comment>
              <Source SelectionStart="211" SelectionLength="0">using System;
using System.Collections;
using System.Windows.Forms;

namespace Girl.Windows.Forms
{
	public enum EditAction
	{
		Undo,
		Redo,
		Cut,
		Copy,
		Paste,
		Delete,
		SelectAll
	}
}
</Source>
            </HAFunc>
          </Header>
          <Body>
            <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="43" SelectionLength="0">&lt;summary&gt;
テキストボックスの状態を管理します。
&lt;/summary&gt;
</Comment>
              <Source SelectionStart="0" SelectionLength="0" />
              <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="35" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
                <Source SelectionStart="423" SelectionLength="0">this.controls = new ArrayList();
this.target   = null;

this.handlers = new EventHandler[]
	{
		new EventHandler(this.cmd_Undo     ),
		new EventHandler(this.cmd_Redo     ),
		new EventHandler(this.cmd_Cut      ),
		new EventHandler(this.cmd_Copy     ),
		new EventHandler(this.cmd_Paste    ),
		new EventHandler(this.cmd_Delete   ),
		new EventHandler(this.cmd_SelectAll)
	};

this.forms = new ArrayList();
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_MaxActions:override int" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="55" SelectionLength="0">return (int)Enum.GetNames(typeof(EditAction)).Length;
</Source>
              </HAFunc>
              <HAFunc Type="Folder" Text="Command" IsExpanded="true" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="0" SelectionLength="0" />
                <HAFunc Type="Public" Text="SetCommand" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="action:EditAction" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    <HAObject Type="Private" Text="target:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="39" SelectionLength="0">this.SetCommand((int)action, target);
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="SetCommand" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="action:EditAction" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    <HAObject Type="Private" Text="targets:params object[]" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="76" SelectionLength="0">foreach (object obj in targets)
{
	this.SetCommand((int)action, obj);
}
</Source>
                </HAFunc>
              </HAFunc>
              <HAFunc Type="Folder" Text="Control Management" IsExpanded="true" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="0" SelectionLength="0" />
                <HAFunc Type="Public" Text="get_Controls:ArrayList" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="23" SelectionLength="0">return this.controls;
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="get_Target:Control" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="21" SelectionLength="0">return this.target;
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="AddControl" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="control:Control" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <HAObject Type="Private" Text="f:Form" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="0" SelectionLength="0">if (control == null || this.controls.Contains(control)) return;

control.Disposed += new EventHandler(this.control_Disposed);
control.Enter    += new EventHandler(this.control_Enter);

EventHandler eh = new EventHandler(this.target_Event);
control.VisibleChanged += eh;
control.EnabledChanged += eh;

if (control is TextBox)
{
	TextBox tb = control as TextBox;
	tb.TextChanged += eh;
	MouseEventHandler meh = new MouseEventHandler(this.textBox_MouseMove);
	tb.MouseDown += meh;
	tb.MouseUp   += meh;
	tb.MouseMove += meh;
	KeyEventHandler keh = new KeyEventHandler(this.textBox_KeyUpDown);
	tb.KeyDown += keh;
	tb.KeyUp   += keh;
}
else if (control is RichTextBox)
{
	RichTextBox rtb = control as RichTextBox;
	rtb.SelectionChanged += eh;
}

f = control.TopLevelControl as Form;
if (f == null || this.forms.Contains(f)) return;

this.forms.Add(f);
f.Activated += new EventHandler(this.form_Activated);
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="RemoveControl" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="control:Control" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="81" SelectionLength="0">if (!this.controls.Contains(control)) return;

this.controls.Remove(control);
</Source>
                </HAFunc>
              </HAFunc>
              <HAFunc Type="Folder" Text="Edit" IsExpanded="true" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="0" SelectionLength="0" />
                <HAFunc Type="Public" Text="Undo:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="99" SelectionLength="0">if (this.target is TextBoxBase)
{
	(this.target as TextBoxBase).Undo();
}
this.CheckStatus();
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="Redo:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="78" SelectionLength="0">if (this.target is RichTextBox)
{
	(this.target as RichTextBox).Redo();
}
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="Cut:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="77" SelectionLength="0">if (this.target is TextBoxBase)
{
	(this.target as TextBoxBase).Cut();
}
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="Copy:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="78" SelectionLength="0">if (this.target is TextBoxBase)
{
	(this.target as TextBoxBase).Copy();
}
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="Paste:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="79" SelectionLength="0">if (this.target is TextBoxBase)
{
	(this.target as TextBoxBase).Paste();
}
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="Delete:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="89" SelectionLength="0">if (this.target is TextBoxBase)
{
	(this.target as TextBoxBase).SelectedText = "";
}
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="SelectAll:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="83" SelectionLength="0">if (this.target is TextBoxBase)
{
	(this.target as TextBoxBase).SelectAll();
}
</Source>
                </HAFunc>
                <HAFunc Type="Folder" Text="Handlers" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="0" SelectionLength="0" />
                  <HAFunc Type="Private" Text="cmd_Undo" IsExpanded="false" IsSelected="false" AllowDrag="true">
                    <Arguments>
                      <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                      <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    </Arguments>
                    <Comment SelectionStart="0" SelectionLength="0" />
                    <Source SelectionStart="9" SelectionLength="0">this.Undo();
</Source>
                  </HAFunc>
                  <HAFunc Type="Private" Text="cmd_Redo" IsExpanded="false" IsSelected="false" AllowDrag="true">
                    <Arguments>
                      <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                      <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    </Arguments>
                    <Comment SelectionStart="0" SelectionLength="0" />
                    <Source SelectionStart="9" SelectionLength="0">this.Redo();
</Source>
                  </HAFunc>
                  <HAFunc Type="Private" Text="cmd_Cut" IsExpanded="false" IsSelected="false" AllowDrag="true">
                    <Arguments>
                      <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                      <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    </Arguments>
                    <Comment SelectionStart="0" SelectionLength="0" />
                    <Source SelectionStart="8" SelectionLength="0">this.Cut();
</Source>
                  </HAFunc>
                  <HAFunc Type="Private" Text="cmd_Copy" IsExpanded="false" IsSelected="false" AllowDrag="true">
                    <Arguments>
                      <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                      <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    </Arguments>
                    <Comment SelectionStart="0" SelectionLength="0" />
                    <Source SelectionStart="9" SelectionLength="0">this.Copy();
</Source>
                  </HAFunc>
                  <HAFunc Type="Private" Text="cmd_Paste" IsExpanded="false" IsSelected="false" AllowDrag="true">
                    <Arguments>
                      <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                      <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    </Arguments>
                    <Comment SelectionStart="0" SelectionLength="0" />
                    <Source SelectionStart="10" SelectionLength="0">this.Paste();
</Source>
                  </HAFunc>
                  <HAFunc Type="Private" Text="cmd_Delete" IsExpanded="false" IsSelected="false" AllowDrag="true">
                    <Arguments>
                      <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                      <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    </Arguments>
                    <Comment SelectionStart="0" SelectionLength="0" />
                    <Source SelectionStart="11" SelectionLength="0">this.Delete();
</Source>
                  </HAFunc>
                  <HAFunc Type="Private" Text="cmd_SelectAll" IsExpanded="false" IsSelected="false" AllowDrag="true">
                    <Arguments>
                      <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                      <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    </Arguments>
                    <Comment SelectionStart="0" SelectionLength="0" />
                    <Source SelectionStart="19" SelectionLength="0">this.SelectAll();
</Source>
                  </HAFunc>
                </HAFunc>
              </HAFunc>
              <HAFunc Type="Folder" Text="Check Status" IsExpanded="true" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="0" SelectionLength="0" />
                <HAFunc Type="Public" Text="CheckStatus" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="153" SelectionLength="0">if (!this.target.Visible || !this.target.Enabled)
{
	this.SetStatus(false);
}
else if (this.target is TextBoxBase)
{
	this.CheckTextBoxBase();
}
</Source>
                </HAFunc>
                <HAFunc Type="Private" Text="CheckTextBoxBase" IsExpanded="true" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <HAObject Type="Private" Text="tbb:TextBoxBase" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  <HAObject Type="Private" Text="status:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="440" SelectionLength="0">tbb = this.target as TextBoxBase;

this.SetStatus((int)EditAction.Undo, tbb.CanUndo);

status = tbb.SelectionLength &gt; 0;
this.SetStatus((int)EditAction.Cut   , status);
this.SetStatus((int)EditAction.Copy  , status);
this.SetStatus((int)EditAction.Delete, status);

this.SetStatus((int)EditAction.SelectAll, true);

if (tbb is TextBox)
{
	this.CheckTextBox();
}
else if (tbb is RichTextBox)
{
	this.CheckRichTextBox();
}
</Source>
                  <HAFunc Type="Private" Text="CheckTextBox" IsExpanded="false" IsSelected="false" AllowDrag="true">
                    <Arguments />
                    <HAObject Type="Private" Text="tb:TextBox" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    <HAObject Type="Private" Text="status:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                    <Comment SelectionStart="0" SelectionLength="0" />
                    <Source SelectionStart="358" SelectionLength="0">tb = this.target as TextBox;

this.SetStatus((int)EditAction.Redo, false);

status = false;
IDataObject data = Clipboard.GetDataObject();
if (data != null)
{
	string[] dfs = data.GetFormats();
	foreach (string df in dfs)
	{
		if (df == "UnicodeText")
		{
			status = true;
			break;
		}
	}
}
this.SetStatus((int)EditAction.Paste, status);
</Source>
                  </HAFunc>
                  <HAFunc Type="Private" Text="CheckRichTextBox" IsExpanded="false" IsSelected="false" AllowDrag="true">
                    <Arguments />
                    <HAObject Type="Private" Text="rtb:RichTextBox" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    <HAObject Type="Private" Text="status:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                    <Comment SelectionStart="0" SelectionLength="0" />
                    <Source SelectionStart="91" SelectionLength="298">rtb = this.target as RichTextBox;

this.SetStatus((int)EditAction.Redo, rtb.CanRedo);

status = false;
IDataObject data = Clipboard.GetDataObject();
if (data != null)
{
	string[] dfs = data.GetFormats();
	foreach (string df in dfs)
	{
		if (rtb.CanPaste(DataFormats.GetFormat(df)))
		{
			status = true;
			break;
		}
	}
}
this.SetStatus((int)EditAction.Paste, status);
</Source>
                  </HAFunc>
                </HAFunc>
                <HAFunc Type="Folder" Text="Handlers" IsExpanded="true" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="0" SelectionLength="0" />
                  <HAFunc Type="Private" Text="control_Disposed" IsExpanded="false" IsSelected="false" AllowDrag="true">
                    <Arguments>
                      <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                      <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    </Arguments>
                    <Comment SelectionStart="0" SelectionLength="0" />
                    <Source SelectionStart="91" SelectionLength="0">if (this.target == sender) this.SetStatus(false);
this.RemoveControl(sender as Control);
</Source>
                  </HAFunc>
                  <HAFunc Type="Private" Text="control_Enter" IsExpanded="false" IsSelected="false" AllowDrag="true">
                    <Arguments>
                      <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                      <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    </Arguments>
                    <Comment SelectionStart="0" SelectionLength="0" />
                    <Source SelectionStart="55" SelectionLength="0">this.target = sender as Control;
this.CheckStatus();
</Source>
                  </HAFunc>
                  <HAFunc Type="Private" Text="form_Activated" IsExpanded="false" IsSelected="false" AllowDrag="true">
                    <Arguments>
                      <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                      <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    </Arguments>
                    <Comment SelectionStart="0" SelectionLength="0" />
                    <Source SelectionStart="57" SelectionLength="0">if (this.target == null) return;

this.CheckStatus();
</Source>
                  </HAFunc>
                  <HAFunc Type="Private" Text="target_Event" IsExpanded="false" IsSelected="false" AllowDrag="true">
                    <Arguments>
                      <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                      <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    </Arguments>
                    <Comment SelectionStart="0" SelectionLength="0" />
                    <Source SelectionStart="54" SelectionLength="0">if (sender != target) return;

this.CheckStatus();
</Source>
                  </HAFunc>
                  <HAFunc Type="Private" Text="textBox_MouseMove" IsExpanded="false" IsSelected="false" AllowDrag="true">
                    <Arguments>
                      <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                      <HAObject Type="Private" Text="e:MouseEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    </Arguments>
                    <Comment SelectionStart="0" SelectionLength="0" />
                    <Source SelectionStart="11" SelectionLength="0">this.target_Event(sender, EventArgs.Empty);
</Source>
                  </HAFunc>
                  <HAFunc Type="Private" Text="textBox_KeyUpDown" IsExpanded="false" IsSelected="false" AllowDrag="true">
                    <Arguments>
                      <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                      <HAObject Type="Private" Text="e:KeyEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    </Arguments>
                    <Comment SelectionStart="0" SelectionLength="0" />
                    <Source SelectionStart="45" SelectionLength="0">this.target_Event(sender, EventArgs.Empty);
</Source>
                  </HAFunc>
                </HAFunc>
              </HAFunc>
            </HAFunc>
          </Body>
          <Footer>
            <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="0" SelectionLength="0" />
            </HAFunc>
          </Footer>
        </HAClass>
        <HAClass Type="Public" Text="CodeEditorManager:ContextManager" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <HAObject Type="Public" Text="IndentString:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Public" Text="menuOptions:Hashtable" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Header>
            <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="228" SelectionLength="0">using System;
using System.Collections;
using System.IO;
using System.Windows.Forms;

namespace Girl.Windows.Forms
{
	public enum CodeEditorOption
	{
		SmartEnter,
		SmartTab,
		SmartHome,
		SmartParenthesis
	}
}
</Source>
            </HAFunc>
          </Header>
          <Body>
            <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="50" SelectionLength="0">&lt;summary&gt;
TextBox にコード入力支援機能を付加します。
&lt;/summary&gt;
</Comment>
              <Source SelectionStart="0" SelectionLength="0" />
              <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
                <Source SelectionStart="175" SelectionLength="0">this.IndentString = "\t";
this.menuOptions = new Hashtable();
this.handlers = new EventHandler[]
	{
		new EventHandler(this.menuItem_Click)
	};

this.SetStatus(true);
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_MaxActions:override int" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="43" SelectionLength="0">return (int)Enum.GetNames(typeof(CodeEditorOption)).Length;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="GetIndent:static string" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="360" SelectionLength="0">int len = text.Length;
if (len &lt; 1) return "";

int pos;
char ch = text[0];
if (ch == '&gt;' || ch == '|')
{
	for (pos = 1; pos &lt; len; pos++)
	{
		ch = text[pos];
		if (" \t&gt;|".IndexOf(ch) &lt; 0) break;
	}
}
else
{
	for (pos = 0; pos &lt; len; pos++)
	{
		ch = text[pos];
		if (ch != ' ' &amp;&amp; ch != '\t') break;
	}
}
return text.Substring(0, pos);
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="SetTarget" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="textBox:TextBoxBase" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="140" SelectionLength="0">textBox.KeyDown  += new KeyEventHandler     (this.textBox_KeyDown );
textBox.KeyPress += new KeyPressEventHandler(this.textBox_KeyPress);
</Source>
              </HAFunc>
              <HAFunc Type="Folder" Text="Command" IsExpanded="true" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="0" SelectionLength="0" />
                <HAFunc Type="Public" Text="SetCommand" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="option:CodeEditorOption" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    <HAObject Type="Private" Text="target:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="39" SelectionLength="0">this.SetCommand((int)option, target);
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="SetCommand" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="option:CodeEditorOption" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    <HAObject Type="Private" Text="targets:params object[]" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="76" SelectionLength="0">foreach (object obj in targets)
{
	this.SetCommand((int)option, obj);
}
</Source>
                </HAFunc>
                <HAFunc Type="Protected" Text="SetHandler:override" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="action:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                    <HAObject Type="Private" Text="target:object" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="118" SelectionLength="0">if (target is MenuItem)
{
	this.menuOptions[target] = action;
	(target as MenuItem).Click += this.handlers[0];
}
</Source>
                </HAFunc>
              </HAFunc>
              <HAFunc Type="Folder" Text="Properties" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="0" SelectionLength="0" />
                <HAFunc Type="Public" Text="get_SmartEnter:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="54" SelectionLength="0">return this.flags[(int)CodeEditorOption.SmartEnter];
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="set_SmartEnter:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="58" SelectionLength="0">this.SetStatus((int)CodeEditorOption.SmartEnter, value);
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="get_SmartTab:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="52" SelectionLength="0">return this.flags[(int)CodeEditorOption.SmartTab];
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="set_SmartTab:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="45" SelectionLength="0">this.SetStatus((int)CodeEditorOption.SmartTab, value);
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="get_SmartHome:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="53" SelectionLength="0">return this.flags[(int)CodeEditorOption.SmartHome];
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="set_SmartHome:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="57" SelectionLength="0">this.SetStatus((int)CodeEditorOption.SmartHome, value);
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="get_SmartParenthesis:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="60" SelectionLength="0">return this.flags[(int)CodeEditorOption.SmartParenthesis];
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="set_SmartParenthesis:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="64" SelectionLength="0">this.SetStatus((int)CodeEditorOption.SmartParenthesis, value);
</Source>
                </HAFunc>
                <HAFunc Type="Protected" Text="SetProperty:override" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="target:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                    <HAObject Type="Private" Text="status:bool" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="116" SelectionLength="0">if (target is MenuItem)
{
	MenuItem mi = target as MenuItem;
	if (mi.Checked != status) mi.Checked = status;
}
</Source>
                </HAFunc>
              </HAFunc>
              <HAFunc Type="Folder" Text="Process" IsExpanded="true" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="0" SelectionLength="0" />
                <HAFunc Type="Private" Text="ProcessEnter" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="textBox:TextBoxBase" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="1573" SelectionLength="0">int ln = TextBoxPlus.GetCurrentLine(textBox);
int cl = TextBoxPlus.GetCurrentColumn(textBox);
string crtext = TextBoxPlus.GetLineText(textBox, ln);
string crind  = __CLASS.GetIndent(crtext);
int pos = -1;
if (cl == crind.Length &amp;&amp; cl &lt; crtext.Length)
{
	pos = textBox.SelectionStart;
	if (crtext.EndsWith("}"))
	{
		this.InsertText(textBox, this.IndentString);
		pos++;
	}
	this.InsertText(textBox, "\r\n" + crind);
}
else if (cl &lt; crind.Length)
{
	pos = (textBox.SelectionStart += crind.Length - cl);
	if (crtext.EndsWith("}"))
	{
		this.InsertText(textBox, this.IndentString);
		pos++;
	}
	this.InsertText(textBox, "\r\n" + crind);
}
else if (cl &gt; 0 &amp;&amp; crtext.Substring(cl - 1, 1) == "{")
{
	string nxtext = TextBoxPlus.GetLineText(textBox, ln + 1);
	string nxind  = __CLASS.GetIndent(nxtext);
	this.InsertText(textBox, "\r\n" + crind + this.IndentString);
	bool needsClose = !(nxtext.EndsWith("}") &amp;&amp; crind == nxind) &amp;&amp; crind.Length &gt;= nxind.Length;
	if (cl &lt; crtext.Length)
	{
		pos = textBox.SelectionStart;
		if (crtext.Substring(cl, 1) == "}")
		{
			this.InsertText(textBox, "\r\n" + crind);
			textBox.SelectionStart++;
			if (textBox.SelectionStart == textBox.TextLength)
			{
				this.InsertText(textBox, "\r\n");
			}
			needsClose = false;
		}
		else if (needsClose)
		{
			textBox.SelectionStart += crtext.Length - cl;
		}
	}
	if (needsClose)
	{
		if (pos &lt; 0) pos = textBox.SelectionStart;
		this.InsertText(textBox, "\r\n" + crind + "}");
		if (textBox.SelectionStart == textBox.TextLength)
		{
			this.InsertText(textBox, "\r\n");
		}
	}
}
else if (crtext.EndsWith(":"))
{
	this.InsertText(textBox, "\r\n" + crind + this.IndentString);
}
else
{
	this.InsertText(textBox, "\r\n" + crind);
}
if (pos &gt;= 0) textBox.SelectionStart = pos;
</Source>
                </HAFunc>
                <HAFunc Type="Private" Text="ProcessHome:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="textBox:TextBoxBase" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="21" SelectionLength="0">int clm = TextBoxPlus.GetCurrentColumn(textBox);
int ind = __CLASS.GetIndent(TextBoxPlus.GetLineText(textBox, TextBoxPlus.GetCurrentLine(textBox))).Length;
if (clm == 0 &amp;&amp; ind &gt; 0)
{
	textBox.SelectionStart += ind;
	return true;
}
else if (ind &lt; clm)
{
	textBox.SelectionStart -= clm - ind;
	return true;
}
return false;
</Source>
                </HAFunc>
                <HAFunc Type="Private" Text="ProcessParenthesis:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="textBox:TextBoxBase" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                    <HAObject Type="Private" Text="ch:char" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="986" SelectionLength="0">int pos = textBox.SelectionStart;
char prv1 = pos &gt; 0 ? textBox.Text[pos - 1] : '\0';
char prv2 = pos &gt; 1 ? textBox.Text[pos - 2] : '\0';
char curr = pos &lt; textBox.TextLength ? textBox.Text[pos] : '\0';
switch (ch)
{
	case '(':
		this.InsertText(textBox, ")");
		textBox.SelectionStart--;
		break;
	case '[':
		this.InsertText(textBox, "]");
		textBox.SelectionStart--;
		break;
	case '{':
		this.InsertText(textBox, "}");
		textBox.SelectionStart--;
		break;
	case '&lt;':
		this.InsertText(textBox, "&gt;");
		textBox.SelectionStart--;
		break;
	case '*':
		if (prv1 == '/')
		{
			this.InsertText(textBox, "*/");
			textBox.SelectionStart -= 2;
		}
		break;
	case '"':
	case '\'':
		if (prv1 != '\\' || (prv1 == '\\' &amp;&amp; prv2 == '\\'))
		{
			if (ch == curr)
			{
				textBox.SelectionStart++;
				return true;
			}
			this.InsertText(textBox, ch.ToString());
			textBox.SelectionStart--;
		}
		break;
	case ')':
	case ']':
	case '}':
	case '&gt;':
		if (ch != curr) break;
		textBox.SelectionStart++;
		return true;
}
return false;
</Source>
                </HAFunc>
                <HAFunc Type="Private" Text="ProcessTab" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="textBox:TextBoxBase" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                    <HAObject Type="Private" Text="shift:bool" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="503" SelectionLength="0">int pos = textBox.SelectionStart;
int len = textBox.SelectionLength;
int sl = TextBoxPlus.GetLine(textBox, pos);
int el = TextBoxPlus.GetLine(textBox, pos + len);
if (textBox.SelectedText.EndsWith("\n")) el--;
int sp = TextBoxPlus.GetLinePosition(textBox, sl);
int ep = TextBoxPlus.GetLinePosition(textBox, el + 1);
textBox.SelectionStart  = sp;
textBox.SelectionLength = ep - sp;

StringReader sr = new StringReader(textBox.SelectedText);
StringWriter sw = new StringWriter();
string ind = this.IndentString, line;
while ((line = sr.ReadLine()) != null)
{
	if (!shift)
	{
		sw.WriteLine(ind + line);
	}
	else
	{
		char ch = (line.Length &gt; 0) ? line[0] : '\0';
		if (line.StartsWith(ind))
		{
			sw.WriteLine(line.Substring(ind.Length));
		}
		else if (ch == ' ' || ch == '\t' || ch == '&gt;' || ch == '|')
		{
			sw.WriteLine(line.Substring(1));
		}
		else
		{
			sw.WriteLine(line);
		}
	}
}
sw.Close();
sr.Close();
textBox.SelectedText = sw.ToString();
int nlen = textBox.SelectionStart - sp;
textBox.SelectionStart = sp;
textBox.SelectionLength = nlen;
</Source>
                </HAFunc>
                <HAFunc Type="Private" Text="InsertText" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="textBox:TextBoxBase" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="180" SelectionLength="0">//RichTextBox rtb = textBox as RichTextBox;
//if (rtb != null)
//{
//	rtb.SelectionColor = rtb.ForeColor;
//	rtb.SelectionFont  = rtb.Font;
//}
textBox.SelectedText = text;
</Source>
                </HAFunc>
              </HAFunc>
              <HAFunc Type="Folder" Text="Event Handler" IsExpanded="true" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="0" SelectionLength="0" />
                <HAFunc Type="Private" Text="textBox_KeyDown" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                    <HAObject Type="Private" Text="e:KeyEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="130" SelectionLength="0">TextBoxBase textBox = sender as TextBoxBase;
if (textBox == null) return;

if (e.KeyCode == Keys.Enter &amp;&amp; this.SmartEnter)
{
	if (e.Modifiers == Keys.None)
	{
		this.ProcessEnter(textBox);
	}
	else if (e.Modifiers == Keys.Shift)
	{
		int line = TextBoxPlus.GetCurrentLine(textBox);
		if (line &lt; textBox.Lines.Length)
		{
			int clm  = TextBoxPlus.GetCurrentColumn(textBox);
			int ind = __CLASS.GetIndent(TextBoxPlus.GetLineText(textBox, line + 1)).Length;
			textBox.SelectionStart += (TextBoxPlus.GetLineText(textBox, line).Length - clm)
				+ TextBoxPlus.GetEndLineWidth(textBox) + ind;
		}
	}
	e.Handled = true;
}
else if (e.KeyCode == Keys.Home &amp;&amp; this.SmartHome &amp;&amp; e.Modifiers == Keys.None)
{
	if (this.ProcessHome(textBox)) e.Handled = true;
}
else if (e.KeyCode == Keys.Tab &amp;&amp; this.SmartTab &amp;&amp; (e.Shift || textBox.SelectionLength &gt; 0))
{
	this.ProcessTab(textBox, e.Shift);
	e.Handled = true;
}
</Source>
                </HAFunc>
                <HAFunc Type="Private" Text="textBox_KeyPress" IsExpanded="false" IsSelected="true" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                    <HAObject Type="Private" Text="e:KeyPressEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="493" SelectionLength="0">TextBoxBase textBox = sender as TextBoxBase;
if (textBox == null) return;

if (e.KeyChar == (char)13 &amp;&amp; this.SmartEnter &amp;&amp; textBox is TextBox)
{
	e.Handled = true;
}
else if (e.KeyChar == '\t' &amp;&amp; textBox.SelectionLength &gt; 0 &amp;&amp; this.SmartTab)
{
	e.Handled = true;
}
else if (this.SmartParenthesis
	&amp;&amp; this.ProcessParenthesis(textBox, e.KeyChar))
{
	e.Handled = true;
}
else if (e.KeyChar &gt;= ' ' &amp;&amp; textBox is RichTextBox)
{
	this.InsertText(textBox, e.KeyChar.ToString());
	e.Handled = true;
}
</Source>
                </HAFunc>
                <HAFunc Type="Private" Text="menuItem_Click" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                    <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <HAObject Type="Private" Text="mi:MenuItem" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="148" SelectionLength="0">mi = sender as MenuItem;
if (mi == null || !this.menuOptions.Contains(mi)) return;

this.SetStatus((int)this.menuOptions[sender], !mi.Checked);
</Source>
                </HAFunc>
              </HAFunc>
            </HAFunc>
          </Body>
          <Footer>
            <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="0" SelectionLength="0" />
            </HAFunc>
          </Footer>
        </HAClass>
        <HAClass Type="Public" Text="TextBoxPlus" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Header>
            <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="44" SelectionLength="0">using System;
using System.Windows.Forms;
</Source>
            </HAFunc>
          </Header>
          <Body>
            <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="true" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="48" SelectionLength="0">&lt;summary&gt;
TextBoxBase を操作するクラスです。
&lt;/summary&gt;
</Comment>
              <Source SelectionStart="0" SelectionLength="0" />
              <HAFunc Type="Public" Text="GetEndLineWidth:static int" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="textBox:TextBoxBase" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="38" SelectionLength="0">return (textBox is TextBox) ? 2 : 1;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="GetLinePosition:static int" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="textBox:TextBoxBase" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  <HAObject Type="Private" Text="line:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                </Arguments>
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="84" SelectionLength="0">if (line &gt; textBox.Lines.Length) return textBox.TextLength;

int endLine = __CLASS.GetEndLineWidth(textBox);
int ret = 0;
for (int i = 0; i &lt; line; i++)
{
	ret += textBox.Lines[i].Length + endLine;
}
return ret;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="GetLine:static int" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="textBox:TextBoxBase" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                  <HAObject Type="Private" Text="pos:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="21" SelectionLength="0">int endLine = __CLASS.GetEndLineWidth(textBox);
int ret = 0, lpos = 0, llen = 0;
foreach (string line in textBox.Lines)
{
	llen = line.Length;
	if (pos &lt; lpos + llen + endLine)
	{
		break;
	}
	ret++;
	lpos += llen + endLine;
}
return ret;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="GetCurrentLine:static int" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="textBox:TextBoxBase" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="58" SelectionLength="0">return __CLASS.GetLine(textBox, textBox.SelectionStart);
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="GetCurrentColumn:static int" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="textBox:TextBoxBase" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="295" SelectionLength="0">int endLine = __CLASS.GetEndLineWidth(textBox);
int lpos = 0, llen = 0;
int pos = textBox.SelectionStart;
foreach (string line in textBox.Lines)
{
	llen = line.Length;
	if (pos &lt; lpos + llen + endLine)
	{
		break;
	}
	lpos += llen + endLine;
}
return textBox.SelectionStart - lpos;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="GetLineText:static string" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="textBox:TextBoxBase" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                  <HAObject Type="Private" Text="line:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="74" SelectionLength="0">if (line &lt; textBox.Lines.Length) return textBox.Lines[line];
return "";
</Source>
              </HAFunc>
            </HAFunc>
          </Body>
          <Footer>
            <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="0" SelectionLength="0" />
            </HAFunc>
          </Footer>
        </HAClass>
        <HAClass Type="Public" Text="ExRichTextBox:RichTextBox" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Header>
            <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="67" SelectionLength="0">using System;
using System.Drawing;
using System.Windows.Forms;
</Source>
            </HAFunc>
          </Header>
          <Body>
            <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="43" SelectionLength="0">&lt;summary&gt;
スタイル付き文字列の追加が簡単な RichTextBox です。
&lt;/summary&gt;
</Comment>
              <Source SelectionStart="0" SelectionLength="0" />
              <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="35" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
                <Source SelectionStart="0" SelectionLength="0" />
              </HAFunc>
              <HAFunc Type="Folder" Text="Text Manipulation" IsExpanded="true" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="0" SelectionLength="0" />
                <HAFunc Type="Public" Text="AppendText" IsExpanded="true" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                    <HAObject Type="Private" Text="color:Color" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="32" SelectionLength="0">if (text.Length &lt; 1) return;

Color c = this.SelectionColor;
this.SelectionColor = color;
this.AppendText(text);
this.SelectionColor = c;
</Source>
                  <HAFunc Type="Public" Text="AppendText" IsExpanded="false" IsSelected="false" AllowDrag="true">
                    <Arguments>
                      <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                      <HAObject Type="Private" Text="fontStyle:FontStyle" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    </Arguments>
                    <Comment SelectionStart="0" SelectionLength="0" />
                    <Source SelectionStart="32" SelectionLength="0">if (text.Length &lt; 1) return;

Font f1 = this.SelectionFont;
Font f2 = new Font(f1.FontFamily, f1.Size, fontStyle);
this.SelectionFont = f2;
this.AppendText(text);
this.SelectionFont = f1;
f2.Dispose();
</Source>
                  </HAFunc>
                  <HAFunc Type="Public" Text="AppendText" IsExpanded="false" IsSelected="false" AllowDrag="true">
                    <Arguments>
                      <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                      <HAObject Type="Private" Text="color:Color" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                      <HAObject Type="Private" Text="fontStyle:FontStyle" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    </Arguments>
                    <Comment SelectionStart="0" SelectionLength="0" />
                    <Source SelectionStart="32" SelectionLength="0">if (text.Length &lt; 1) return;

Color c = this.SelectionColor;
this.SelectionColor = color;
this.AppendText(text, fontStyle);
this.SelectionColor = c;
</Source>
                  </HAFunc>
                </HAFunc>
                <HAFunc Type="Public" Text="AppendLine" IsExpanded="true" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="0" SelectionLength="0">this.AppendText("\r\n");
</Source>
                  <HAFunc Type="Public" Text="AppendLine" IsExpanded="false" IsSelected="false" AllowDrag="true">
                    <Arguments>
                      <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    </Arguments>
                    <Comment SelectionStart="0" SelectionLength="0" />
                    <Source SelectionStart="44" SelectionLength="0">this.AppendText(text);
this.AppendLine();
</Source>
                  </HAFunc>
                  <HAFunc Type="Public" Text="AppendLine" IsExpanded="false" IsSelected="false" AllowDrag="true">
                    <Arguments>
                      <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                      <HAObject Type="Private" Text="color:Color" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    </Arguments>
                    <Comment SelectionStart="0" SelectionLength="0" />
                    <Source SelectionStart="51" SelectionLength="0">this.AppendText(text, color);
this.AppendLine();
</Source>
                  </HAFunc>
                  <HAFunc Type="Public" Text="AppendLine" IsExpanded="false" IsSelected="false" AllowDrag="true">
                    <Arguments>
                      <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                      <HAObject Type="Private" Text="fontStyle:FontStyle" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    </Arguments>
                    <Comment SelectionStart="0" SelectionLength="0" />
                    <Source SelectionStart="55" SelectionLength="0">this.AppendText(text, fontStyle);
this.AppendLine();
</Source>
                  </HAFunc>
                  <HAFunc Type="Public" Text="AppendLine" IsExpanded="false" IsSelected="false" AllowDrag="true">
                    <Arguments>
                      <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                      <HAObject Type="Private" Text="color:Color" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                      <HAObject Type="Private" Text="fontStyle:FontStyle" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    </Arguments>
                    <Comment SelectionStart="0" SelectionLength="0" />
                    <Source SelectionStart="62" SelectionLength="0">this.AppendText(text, color, fontStyle);
this.AppendLine();
</Source>
                  </HAFunc>
                </HAFunc>
                <HAFunc Type="Public" Text="InsertText" IsExpanded="true" IsSelected="true" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                    <HAObject Type="Private" Text="color:Color" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="147" SelectionLength="0">if (text.Length &lt; 1) return;

Color c = this.SelectionColor;
this.SelectionColor = color;
this.SelectedText = text;
this.SelectionColor = c;
</Source>
                  <HAFunc Type="Public" Text="InsertText" IsExpanded="false" IsSelected="false" AllowDrag="true">
                    <Arguments>
                      <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                      <HAObject Type="Private" Text="fontStyle:FontStyle" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    </Arguments>
                    <Comment SelectionStart="0" SelectionLength="0" />
                    <Source SelectionStart="32" SelectionLength="0">if (text.Length &lt; 1) return;

Font f1 = this.SelectionFont;
Font f2 = new Font(f1.FontFamily, f1.Size, fontStyle);
this.SelectionFont = f2;
this.SelectedText = text;
this.SelectionFont = f1;
f2.Dispose();
</Source>
                  </HAFunc>
                  <HAFunc Type="Public" Text="InsertText" IsExpanded="false" IsSelected="false" AllowDrag="true">
                    <Arguments>
                      <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                      <HAObject Type="Private" Text="color:Color" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                      <HAObject Type="Private" Text="fontStyle:FontStyle" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                    </Arguments>
                    <Comment SelectionStart="0" SelectionLength="0" />
                    <Source SelectionStart="32" SelectionLength="0">if (text.Length &lt; 1) return;

Color c = this.SelectionColor;
this.SelectionColor = color;
this.InsertText(text, fontStyle);
this.SelectionColor = c;
</Source>
                  </HAFunc>
                </HAFunc>
              </HAFunc>
              <HAFunc Type="Folder" Text="Wrappers" IsExpanded="true" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="0" SelectionLength="0" />
                <HAFunc Type="Public" Text="get_CurrentLine:int" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="42" SelectionLength="0">return TextBoxPlus.GetCurrentLine(this);
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="get_CurrentColumn:int" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="44" SelectionLength="0">return TextBoxPlus.GetCurrentColumn(this);
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="GetLinePosition:int" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="line:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="34" SelectionLength="0">return TextBoxPlus.GetLinePosition(this, line);
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="GetLine:int" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="pos:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="40" SelectionLength="0">return TextBoxPlus.GetLine(this, pos);
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="GetLineText:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="line:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="45" SelectionLength="0">return TextBoxPlus.GetLineText(this, line);
</Source>
                </HAFunc>
              </HAFunc>
            </HAFunc>
          </Body>
          <Footer>
            <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="0" SelectionLength="0" />
            </HAFunc>
          </Footer>
        </HAClass>
        <HAClass Type="Public" Text="CodeEditor:ExRichTextBox" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <HAObject Type="Public" Text="Parser:ParserBase" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Header>
            <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="122" SelectionLength="0">using System;
using System.Drawing;
using System.IO;
using System.Windows.Forms;
using Girl.Coding;
using Girl.Rtf;
</Source>
            </HAFunc>
          </Header>
          <Body>
            <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="41" SelectionLength="0">&lt;summary&gt;
ソースコードを編集するための RichTextBox です。
&lt;/summary&gt;
</Comment>
              <Source SelectionStart="0" SelectionLength="0" />
              <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
                <Source SelectionStart="156" SelectionLength="0">this.AcceptsTab = true;
this.ScrollBars = RichTextBoxScrollBars.ForcedBoth;
this.WordWrap = false;
this.Font = new Font("ＭＳ ゴシック", 9);

this.Parser = null;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="JumpToError" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="p:Point" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="397" SelectionLength="0">if (p.X &lt; 0 || p.Y &lt; 0) return;

this.SelectionStart = this.GetLinePosition(p.Y) + p.X;
this.SelectionLength = 0;
if (this.Parser != null)
{
	StringReader sr = new StringReader(this.Lines[p.Y].Substring(p.X));
	this.Parser.Reader = sr;
	if (this.Parser.Read() &amp;&amp; this.Parser.Spacing == "")
	{
		this.SelectionLength = this.Parser.Text.Length;
	}
	this.Parser.Close();
	sr.Close();
}
this.Focus();
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_Text:override string" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="18" SelectionLength="0">return base.Text;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="set_Text:override string" IsExpanded="false" IsSelected="true" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="75" SelectionLength="0">if (this.Parser == null || value == null)
{
	base.Text = value;
	return;
}

RtfDocument rd = new RtfDocument();
rd.CurrentFont = this.Font;
StringReader sr = new StringReader(value);
this.Parser.Reader = sr;
this.Parser.Color_Default = this.ForeColor;
while (this.Parser.Read())
{
	rd.AppendText(this.Parser.Spacing);
	rd.AppendText(this.Parser.Text, this.Parser.TextColor);
}
this.Parser.Close();
sr.Close();
if (this.Parser.Spacing != "")
{
	rd.AppendText(this.Parser.Spacing);
	if (this.Parser.Spacing.EndsWith("\n")) rd.AppendLine();
}
this.Rtf = rd.ToRtf();
</Source>
              </HAFunc>
            </HAFunc>
          </Body>
          <Footer>
            <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="0" SelectionLength="0" />
            </HAFunc>
          </Footer>
        </HAClass>
        <HAClass Type="Public" Text="LinkRichTextBox:ExRichTextBox" IsExpanded="false" IsSelected="true" AllowDrag="true">
          <HAObject Type="Public" Text="LinkTargetNotify:event LinkTargetEventHandler" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Public" Text="LinkTargetClicked:event LinkTargetEventHandler" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="oldCursor:Cursor" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="linkColor:Color" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="links:ArrayList" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="linkTarget:object" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Header>
            <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="90" SelectionLength="0">using System;
using System.Collections;
using System.Drawing;
using System.Windows.Forms;
</Source>
            </HAFunc>
          </Header>
          <Body>
            <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="44" SelectionLength="0">&lt;summary&gt;
リンクをサポートした読み取り専用の RichTextBox です。
&lt;/summary&gt;
</Comment>
              <Source SelectionStart="0" SelectionLength="0">public struct LinkTargetInfo 
{
	public int Start, Length;
	public object Target;

	public LinkTargetInfo(int start, int length, object target)
	{
		this.Start  = start;
		this.Length = length;
		this.Target = target;
	}
}

public class LinkTargetEventArgs : EventArgs
{
	public object Target;

	public LinkTargetEventArgs(object target)
	{
		this.Target = target;
	}
}

public delegate void LinkTargetEventHandler(object sender, LinkTargetEventArgs e);
</Source>
              <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
                <Source SelectionStart="149" SelectionLength="0">this.ReadOnly   = true;
this.oldCursor  = this.Cursor;
this.linkColor  = Color.Blue;
this.links      = new ArrayList();
this.linkTarget = null;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="get_LinkColor:Color" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="24" SelectionLength="0">return this.linkColor;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="set_LinkColor:Color" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="25" SelectionLength="0">this.linkColor = value;
</Source>
              </HAFunc>
              <HAFunc Type="Folder" Text="Link" IsExpanded="true" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="0" SelectionLength="0" />
                <HAFunc Type="Public" Text="Clear:new void" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments />
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="29" SelectionLength="0">this.SetTarget(null);
this.links.Clear();
base.Clear();
</Source>
                </HAFunc>
                <HAFunc Type="Public" Text="AppendLink" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                    <HAObject Type="Private" Text="target:object" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="134" SelectionLength="0">this.links.Add(new LinkTargetInfo(this.TextLength, text.Length, target));
this.AppendText(text, this.LinkColor, FontStyle.Underline);
</Source>
                </HAFunc>
                <HAFunc Type="Protected" Text="OnMouseMove:override" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="e:MouseEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="304" SelectionLength="0">base.OnMouseMove(e);

int pos = this.GetCharIndexFromPosition(new Point(e.X, e.Y));
object target = null;
LinkTargetInfo li;
foreach (object obj in this.links)
{
	li = (LinkTargetInfo)obj;
	if (li.Start &lt;= pos &amp;&amp; pos &lt; li.Start + li.Length)
	{
		target = li.Target;
		break;
	}
}
this.SetTarget(target);
</Source>
                </HAFunc>
                <HAFunc Type="Protected" Text="OnMouseLeave:override" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="44" SelectionLength="0">base.OnMouseLeave(e);
this.SetTarget(null);
</Source>
                </HAFunc>
                <HAFunc Type="Protected" Text="OnMouseDown:override" IsExpanded="false" IsSelected="false" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="e:MouseEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="165" SelectionLength="0">base.OnMouseDown(e);
if (this.linkTarget == null || this.LinkTargetClicked == null) return;

this.LinkTargetClicked(this, new LinkTargetEventArgs(this.linkTarget));
</Source>
                </HAFunc>
                <HAFunc Type="Private" Text="SetTarget" IsExpanded="false" IsSelected="true" AllowDrag="true">
                  <Arguments>
                    <HAObject Type="Private" Text="target:object" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                  </Arguments>
                  <Comment SelectionStart="0" SelectionLength="0" />
                  <Source SelectionStart="236" SelectionLength="0">if (target == this.linkTarget) return;

this.linkTarget = target;
this.Cursor = (target == null) ? this.oldCursor : Cursors.Hand;
if (this.LinkTargetNotify == null) return;

this.LinkTargetNotify(this, new LinkTargetEventArgs(target));
</Source>
                </HAFunc>
              </HAFunc>
            </HAFunc>
          </Body>
          <Footer>
            <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="0" SelectionLength="0" />
            </HAFunc>
          </Footer>
        </HAClass>
        <HAClass Type="Public" Text="ExComboBox:ComboBox" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <HAObject Type="Public" Text="EnterKeyPress:event EventHandler" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Public" Text="EscapeKeyPress:event EventHandler" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Header>
            <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="true" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="42" SelectionLength="0">using System;
using System.Windows.Forms;
</Source>
            </HAFunc>
          </Header>
          <Body>
            <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="67" SelectionLength="0">&lt;summary&gt;
ComboBox 内での Enter キーと Escape キーの入力を監視します。
&lt;/summary&gt;
</Comment>
              <Source SelectionStart="0" SelectionLength="0" />
              <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
                <Source SelectionStart="0" SelectionLength="0" />
              </HAFunc>
              <HAFunc Type="Public" Text="PreProcessMessage:override bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="m:ref Message" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="375" SelectionLength="0">const int WM_KEYDOWN = 256;
if (m.Msg == WM_KEYDOWN &amp;&amp; !this.DroppedDown)
{
	switch ((int)m.WParam)
	{
		case 13:
			if (this.EscapeKeyPress != null) this.EnterKeyPress(this, EventArgs.Empty);
			return true;
		case 27:
			if (this.EscapeKeyPress != null) this.EscapeKeyPress(this, EventArgs.Empty);
			return true;
	}
}

return base.PreProcessMessage(ref m);
</Source>
              </HAFunc>
            </HAFunc>
          </Body>
          <Footer>
            <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="0" SelectionLength="0" />
            </HAFunc>
          </Footer>
        </HAClass>
        <HAClass Type="Public" Text="FontComboBox:ExComboBox" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Header>
            <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="true" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="90" SelectionLength="0">using System;
using System.Collections;
using System.Drawing;
using System.Windows.Forms;
</Source>
            </HAFunc>
          </Header>
          <Body>
            <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="34" SelectionLength="0">&lt;summary&gt;
フォント名を列挙する ComboBox です。
&lt;/summary&gt;
</Comment>
              <Source SelectionStart="0" SelectionLength="0" />
              <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
                <Source SelectionStart="45" SelectionLength="0">this.DrawMode = DrawMode.OwnerDrawVariable;
</Source>
              </HAFunc>
              <HAFunc Type="Public" Text="InitializeItems" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments />
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="260" SelectionLength="0">this.Items.Clear();
FontFamily[] ffs = FontFamily.Families;
ArrayList al = new ArrayList();
foreach (FontFamily ff in ffs)
{
	if (ff.IsStyleAvailable(FontStyle.Regular)) al.Add(ff.Name);
	ff.Dispose();
}
al.Sort();
this.Items.AddRange(al.ToArray());
</Source>
              </HAFunc>
              <HAFunc Type="Protected" Text="OnMeasureItem:override" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="e:MeasureItemEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="173" SelectionLength="0">base.OnMeasureItem(e);

Font f = new Font(this.Items[e.Index].ToString(), this.Font.Size);
e.ItemHeight = (int)e.Graphics.MeasureString(f.Name, f).Height;
f.Dispose();
</Source>
              </HAFunc>
              <HAFunc Type="Protected" Text="OnDrawItem:override" IsExpanded="false" IsSelected="false" AllowDrag="true">
                <Arguments>
                  <HAObject Type="Private" Text="e:DrawItemEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                </Arguments>
                <Comment SelectionStart="0" SelectionLength="0" />
                <Source SelectionStart="281" SelectionLength="0">base.OnDrawItem(e);

Font f = new Font(this.Items[e.Index].ToString(), this.Font.Size);
Brush b = (e.State == DrawItemState.Selected)
	? SystemBrushes.HighlightText : SystemBrushes.WindowText;
e.DrawBackground();
e.Graphics.DrawString(f.Name, f, b, e.Bounds);
f.Dispose();
</Source>
              </HAFunc>
            </HAFunc>
          </Body>
          <Footer>
            <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="0" SelectionLength="0" />
            </HAFunc>
          </Footer>
        </HAClass>
      </HAClass>
    </HAClass>
  </HAClass>
</HAProject>