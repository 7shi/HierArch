<?xml version="1.0" encoding="utf-8"?>
<HAClass Type="Public" Text="RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true">
  <HAObject Type="Protected" Text="name:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
  <HAObject Type="Protected" Text="rtfObjects:ArrayList" IsExpanded="false" IsSelected="true" AllowDrag="true" />
  <Header>
    <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="true" AllowDrag="false">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0" />
      <Source SelectionStart="132" SelectionLength="0">using System;
using System.Collections;
using System.Globalization;
using System.IO;
using System.Text;
using System.Windows.Forms;
</Source>
    </HAFunc>
  </Header>
  <Body>
    <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
      <Arguments />
      <Comment SelectionStart="36" SelectionLength="0">&lt;summary&gt;
RTF の要素を保持します。
&lt;/summary&gt;
</Comment>
      <Source SelectionStart="0" SelectionLength="0" />
      <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="53" SelectionLength="0">this.name = "";
this.rtfObjects = new ArrayList();
</Source>
      </HAFunc>
      <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <Arguments>
          <HAObject Type="Private" Text="nm:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        </Arguments>
        <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="53" SelectionLength="0">this.name = nm;
this.rtfObjects = new ArrayList();
</Source>
      </HAFunc>
      <HAFunc Type="Folder" Text="Properties" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="get_Name:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="19" SelectionLength="0">return this.name;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_RtfObjects:ArrayList" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="25" SelectionLength="0">return this.rtfObjects;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_IsText:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <HAObject Type="Private" Text="len:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="235" SelectionLength="0">len = this.name.Length;
if (len &lt; 1 || this.name[0] != '\\' || len &lt; 2) return true;
if (len &gt; 2 &amp;&amp; (this.name[1] == 'c' || this.name[1] == 'u')
	&amp;&amp; char.IsDigit(this.name[2])) return true;

return __CLASS._IsChar(this.name[1]);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_IsEmpty:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="54" SelectionLength="0">return this.name == "" &amp;&amp; this.rtfObjects.Count &lt; 1;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_IsFontNumber:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="95" SelectionLength="0">return this.name.Length &gt; 2
	&amp;&amp; this.name.StartsWith("\\f")
	&amp;&amp; char.IsDigit(this.name[2]);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_Text:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0">return this.GetText(Encoding.Default);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_Value:int" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="176" SelectionLength="0">sb = new StringBuilder();
foreach (char ch in this.name)
{
	if (char.IsDigit(ch)) sb.Append(ch);
}
if (sb.Length &lt; 1) return 0;

return Convert.ToInt32(sb.ToString());
</Source>
        </HAFunc>
      </HAFunc>
      <HAFunc Type="Public" Text="GetText:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <Arguments>
          <HAObject Type="Private" Text="encoding:Encoding" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        </Arguments>
        <HAObject Type="Private" Text="text:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="ms:MemoryStream" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        <HAObject Type="Private" Text="sr:StringReader" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="d:Decoder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="ch:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="ch2:char" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="461" SelectionLength="0">text = new StringBuilder();
ms = new MemoryStream();
sr = new StringReader(this.name);
d = encoding.GetDecoder();
while ((ch = sr.Read()) != -1)
{
	ch2 = (char)ch;
	if (ch2 == '\\')
	{
		this.ReadEscape(text, ms, sr, d);
	}
	else if (' ' &lt;= ch2 &amp;&amp; ch2 &lt; 128)
	{
		ms.WriteByte((byte)ch2);
	}
	else
	{
		this.AppendText(text, ms, d);
		text.Append(ch2);
	}
}
this.AppendText(text, ms, d);
sr.Close();
ms.Close();
return text.ToString();
</Source>
        <HAFunc Type="Private" Text="ReadEscape" IsExpanded="true" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="text:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="ms:MemoryStream" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <HAObject Type="Private" Text="sr:StringReader" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="d:Decoder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          </Arguments>
          <HAObject Type="Private" Text="ch:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="ch2:char" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="59" SelectionLength="0">ch = sr.Read();
if (ch == -1) return;

ch2 = (char)ch;
if (ch2 == '\'')
{
	this.ReadByte(ms, sr);
}
else if (ch2 == 'u')
{
	this.AppendText(text, ms, d);
	this.ReadUnicode(text, sr);
}
else
{
	this.AppendText(text, ms, d);
	text.Append(ch2);
}
</Source>
          <HAFunc Type="Private" Text="ReadByte" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="ms:MemoryStream" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              <HAObject Type="Private" Text="sr:StringReader" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            </Arguments>
            <HAObject Type="Private" Text="ch:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="hex:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="217" SelectionLength="0">ch = sr.Read();
if (ch == -1) return;

hex = ((char)ch).ToString();

ch = sr.Read();
if (ch == -1) return;

hex += (char)ch;

try
{
	ms.WriteByte(byte.Parse(hex, NumberStyles.HexNumber));
}
catch
{
}
</Source>
          </HAFunc>
          <HAFunc Type="Private" Text="ReadUnicode" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="text:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="sr:StringReader" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <HAObject Type="Private" Text="ch:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="ch2:char" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="241" SelectionLength="0">sb = new StringBuilder();
while ((ch = sr.Read()) != -1)
{
	ch2 = (char)ch;
	if (!char.IsDigit(ch2)) break;
	sb.Append(ch2);
}
if (sb.Length &lt; 1) return;

try
{
	text.Append((char)Convert.ToInt32(sb.ToString()));
}
catch
{
}
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Private" Text="AppendText" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="text:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="ms:MemoryStream" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="d:Decoder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <HAObject Type="Private" Text="bytes:Byte[]" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="chars:char[]" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="201" SelectionLength="0">if (ms.Length &lt; 1 ) return;

bytes = ms.ToArray();
ms.SetLength(0);

chars = new char[d.GetCharCount(bytes, 0, bytes.Length)];
d.GetChars(bytes, 0, bytes.Length, chars, 0);
text.Append(chars);
</Source>
        </HAFunc>
      </HAFunc>
      <HAFunc Type="Public" Text="Parse" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <Arguments>
          <HAObject Type="Private" Text="sr:StringReader" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        </Arguments>
        <HAObject Type="Private" Text="ch1:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="ch:char" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="escape:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="u:bool" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="81" SelectionLength="0">sb = new StringBuilder();
escape = u = false;
while ((ch1 = sr.Read()) &gt;= 0)
{
	ch = (char)ch1;
	if (u)
	{
		if (!char.IsDigit(ch))
		{
			this.AddRtfObject(sb);
		}
		sb.Append("\\u");
		sb.Append(ch);
		u = false;
	}
	else if (escape)
	{
		bool text = __CLASS._IsText(sb);
		if (text &amp;&amp; ch == 'u')
		{
			u = true;
		}
		else
		{
			if (text &amp;&amp; !__CLASS._IsChar(ch))
			{
				this.AddRtfObject(sb);
			}
			sb.Append('\\');
			sb.Append(ch);
		}
		escape = false;
	}
	else if (ch == '}')
	{
		break;
	}
	else if (ch == '{')
	{
		this.AddRtfObject(sb);
		ro = new RtfObject();
		ro.Parse(sr);
		this.AddRtfObject(ro);
	}
	else if (ch == '\\')
	{
		if (!__CLASS._IsText(sb)) this.AddRtfObject(sb);
		escape = true;
	}
	else if (ch == ' ' &amp;&amp; !__CLASS._IsText(sb))
	{
		this.AddRtfObject(sb);
	}
	else if (ch == '\r' || ch == '\n')
	{
		this.AddRtfObject(sb);
	}
	else
	{
		sb.Append(ch);
	}
}
this.AddRtfObject(sb);
</Source>
        <HAFunc Type="Protected" Text="_IsText:static bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <HAObject Type="Private" Text="len:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="193" SelectionLength="0">len = sb.Length;
if (len &lt; 1 || sb[0] != '\\' || len &lt; 2) return true;
if (len &gt; 2 &amp;&amp; (sb[1] == 'c' || sb[1] == 'u')
	&amp;&amp; char.IsDigit(sb[2])) return true;

return __CLASS._IsChar(sb[1]);
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="_IsChar:static bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="ch:char" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="60" SelectionLength="0">return ch == '\\' || ch == '{' || ch == '}' || ch == '\'';
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="AddRtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="name:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="36" SelectionLength="0">this.AddRtfObject(new RtfObject(name));
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="AddRtfObject:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <HAObject Type="Private" Text="len:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="ret:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="227" SelectionLength="0">len = sb.Length;
if (len &lt; 1) return null;

if (this.name == "")
{
	this.name = sb.ToString();
	ret = this;
}
else
{
	ret = new RtfObject(sb.ToString());
	this.AddRtfObject(ret);
}
sb.Remove(0, len);
return ret;
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="AddRtfObject:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="26" SelectionLength="0">this.rtfObjects.Add(ro);
</Source>
        </HAFunc>
      </HAFunc>
      <HAFunc Type="Public" Text="ParseNode" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <Arguments>
          <HAObject Type="Private" Text="node:TreeNode" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        </Arguments>
        <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="136" SelectionLength="0">this.name = node.Text;

foreach (TreeNode n in node.Nodes)
{
	ro = new RtfObject();
	ro.ParseNode(n);
	this.AddRtfObject(ro);
}
</Source>
      </HAFunc>
      <HAFunc Type="Public" Text="GenerateRtf" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <Arguments>
          <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        </Arguments>
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="332" SelectionLength="0">if (this.IsEmpty) return;

if (this.rtfObjects.Count &lt; 1)
{
	sb.Append(this.name);
	if (this.name == "\\par") sb.Append("\r\n");
	return;
}

sb.Append('{');
sb.Append(this.name);

this.GenerateRtfChild(sb);

sb.Append('}');
if (this.name == "\\colortbl" || this.name == "\\fonttbl" || this.name == "\\rtf1")
{
	sb.Append("\r\n");
}
</Source>
        <HAFunc Type="Protected" Text="GenerateRtfChild:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <HAObject Type="Private" Text="prev:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="130" SelectionLength="0">prev = null;
foreach (object obj in this.rtfObjects)
{
	ro = obj as RtfObject;
	if (sb.Length &gt; 0 &amp;&amp; sb[sb.Length - 1] != '\n'
		&amp;&amp; !ro.Name.StartsWith("\\")
		&amp;&amp; (prev == null || !prev.IsText))
	{
		sb.Append(' ');
	}
	ro.GenerateRtf(sb);
	prev = ro;
}
</Source>
        </HAFunc>
      </HAFunc>
      <HAFunc Type="Public" Text="DisplayTreeView" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <Arguments>
          <HAObject Type="Private" Text="treeView:TreeView" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="parent:TreeNode" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        </Arguments>
        <HAObject Type="Private" Text="n:TreeNode" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="59" SelectionLength="0">if (this.IsEmpty) return;

n = new TreeNode(this.name);
if (parent == null)
{
	treeView.Nodes.Add(n);
}
else
{
	parent.Nodes.Add(n);
}

this.DisplayTreeViewChild(treeView, n);
</Source>
        <HAFunc Type="Protected" Text="DisplayTreeViewChild:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="treeView:TreeView" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="node:TreeNode" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="101" SelectionLength="0">foreach (object obj in this.rtfObjects)
{
	(obj as RtfObject).DisplayTreeView(treeView, node);
}
</Source>
        </HAFunc>
      </HAFunc>
      <HAFunc Type="Public" Text="Exists:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <Arguments>
          <HAObject Type="Private" Text="target:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        </Arguments>
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="17" SelectionLength="0">if (this.name == target) return true;

foreach (object obj in this.rtfObjects)
{
	if ((obj as RtfObject).Exists(target)) return true;
}

return false;
</Source>
      </HAFunc>
      <HAFunc Type="Public" Text="Remove" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <Arguments>
          <HAObject Type="Private" Text="target:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        </Arguments>
        <HAObject Type="Private" Text="ros:ArrayList" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="194" SelectionLength="0">ros = new ArrayList();
foreach (object obj in this.rtfObjects)
{
	ro = obj as RtfObject;
	if (ro.name == target) continue;
	
	ros.Add(ro);
	ro.Remove(target);
}
this.rtfObjects = ros;
</Source>
      </HAFunc>
      <HAFunc Type="Public" Text="ConvertText:static string" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <Arguments>
          <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        </Arguments>
        <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="274" SelectionLength="0">sb = new StringBuilder();
foreach (char ch in text)
{
	if (ch == '\\' || ch == '{' || ch == '}')
	{
		sb.Append('\\');
	}
	if (' ' &lt;= ch &amp;&amp; ch &lt; 128)
	{
		sb.Append(ch);
	}
	else
	{
		sb.Append(string.Format("\\u{0}?", (int)ch));
	}
}
return sb.ToString();
</Source>
      </HAFunc>
      <HAFunc Type="Public" Text="ConvertLocalText:static string" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <Arguments>
          <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        </Arguments>
        <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="e:Encoder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="chars:char[]" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="bytes:byte[]" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="ch:char" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="469" SelectionLength="0">sb = new StringBuilder();
e = Encoding.Default.GetEncoder();
chars = text.ToCharArray();
bytes = new byte[e.GetByteCount(chars, 0, text.Length, false)];
e.GetBytes(chars, 0, text.Length, bytes, 0, false);
foreach (byte b in bytes)
{
	ch = (char)b;
	if (ch == '\\' || ch == '{' || ch == '}')
	{
		sb.Append('\\');
	}
	if (' ' &lt;= ch &amp;&amp; ch &lt; 128)
	{
		sb.Append(ch);
	}
	else
	{
		sb.Append(string.Format("\\'{0:x2}", b));
	}
}
return sb.ToString();
</Source>
      </HAFunc>
    </HAFunc>
  </Body>
  <Footer>
    <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0" />
      <Source SelectionStart="0" SelectionLength="0" />
    </HAFunc>
  </Footer>
</HAClass>