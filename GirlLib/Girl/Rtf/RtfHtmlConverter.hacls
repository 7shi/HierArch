<?xml version="1.0" encoding="utf-8"?>
<HAClass Type="Public" Text="RtfHtmlConverter" IsExpanded="false" IsSelected="false" AllowDrag="true">
  <Header>
    <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0" />
      <Source SelectionStart="76" SelectionLength="0">using System;
using System.Collections;
using System.Text;
using Girl.Text;
</Source>
    </HAFunc>
  </Header>
  <Body>
    <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
      <Arguments />
      <Comment SelectionStart="42" SelectionLength="0">&lt;summary&gt;
RTF と HTML を相互変換します。
&lt;/summary&gt;
</Comment>
      <Source SelectionStart="0" SelectionLength="0" />
      <HAFunc Type="Public" Text="Convert:static string" IsExpanded="true" IsSelected="false" AllowDrag="true">
        <Arguments>
          <HAObject Type="Private" Text="rd:RtfDocument" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        </Arguments>
        <HAObject Type="Private" Text="ret:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="rc1:RtfContext" IsExpanded="true" IsSelected="false" AllowDrag="true">
          <HAObject Type="Private" Text="rc2:RtfContext" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        </HAObject>
        <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="rf:RtfFont" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="stack1:Stack" IsExpanded="false" IsSelected="false" AllowDrag="true" />
        <HAObject Type="Private" Text="stack2:Stack" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="601" SelectionLength="0">ret = new StringBuilder();
rc1 = new RtfContext();
rc2 = new RtfContext();
stack1 = new Stack();
stack2 = new Stack();
foreach (object obj in rd.Document)
{
	ro = obj as RtfObject;
	rc2 = rc1;
	rc1.Read(ro);
	__CLASS.CheckContext(stack1, rc1, rc2);
	if (ro.IsText)
	{
		__CLASS.WriteStack(ret, stack1, stack2);
		rf = rd.FontTable.Fonts[rc1.Font];
		ret.Append(ro.GetText(
			CharSetEncoding.GetEncoding(rf.CharSet)));
	}
	else if (ro.Name == "\\par")
	{
		__CLASS.WriteStack(ret, stack1, stack2);
		ret.Append("&lt;br&gt;\r\n");
	}
}
__CLASS.WritePop(ret, stack2, null);  // スタックを解消
return ret.ToString();
</Source>
        <HAFunc Type="Private" Text="CheckContext:static" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="stack1:Stack" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <HAObject Type="Private" Text="rc1:RtfContext" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="rc2:RtfContext" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="121" SelectionLength="0">if (rc1.Bold != rc2.Bold)
{
	if (rc1.Bold)
	{
		stack1.Push("b");
	}
	else
	{
		__CLASS.WritePop(null, stack1, "b");
	}
}
if (rc1.Italic != rc2.Italic)
{
	if (rc1.Italic)
	{
		stack1.Push("i");
	}
	else
	{
		__CLASS.WritePop(null, stack1, "i");
	}
}
</Source>
        </HAFunc>
        <HAFunc Type="Private" Text="WriteStack:static" IsExpanded="false" IsSelected="true" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="stack1:Stack" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="stack2:Stack" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <HAObject Type="Private" Text="st1:object[]" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="st2:object[]" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="common:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0">// 配列が Push 順ではなく Pop された順番（逆向き）になるのに注意！
st1 = stack1.ToArray();
st2 = stack2.ToArray();

// 共通部分を調べて無視する
int len1 = stack1.Count;
int len2 = stack2.Count;
int lenm = Math.Min(len1, len2);
for (common = 0; common &lt; lenm; common++)
{
	// 配列が逆向きなのに注意！
	if (!st1[len1 - common - 1].Equals(st2[len2 - common - 1])) break;
}

// スタックを解消する
while (stack2.Count &gt; common)
{
	sb.AppendFormat("&lt;/{0}&gt;", stack2.Pop());
}

// スタックを積む
for (int i = common; i &lt; len1; i++)
{
	string s = st1[len1 - i - 1] as string;
	sb.AppendFormat("&lt;{0}&gt;", s);
	stack2.Push(s);
}

// stack2 は stack1 と同じ内容になる
</Source>
        </HAFunc>
        <HAFunc Type="Private" Text="WritePop:static" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="stack:Stack" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="tag:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <HAObject Type="Private" Text="st:Stack" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <HAObject Type="Private" Text="ss:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="332" SelectionLength="0">st = new Stack();
while (stack.Count &gt; 0)
{
	ss = stack.Pop() as string;
	if (sb != null) sb.AppendFormat("&lt;/{0}&gt;", ss);
	if (ss == tag) break;
	
	st.Push(ss);
}
if (tag == null) return;  // スタック解消に使うため

// スタックを積み直す
while (st.Count &gt; 0)
{
	ss = st.Pop() as string;
	if (sb != null) sb.AppendFormat("&lt;{0}&gt;", ss);
	stack.Push(ss);
}
</Source>
        </HAFunc>
      </HAFunc>
    </HAFunc>
  </Body>
  <Footer>
    <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0" />
      <Source SelectionStart="0" SelectionLength="0" />
    </HAFunc>
  </Footer>
</HAClass>