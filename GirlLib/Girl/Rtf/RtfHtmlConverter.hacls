<?xml version="1.0" encoding="utf-8"?>
<HAClass Type="Public" Text="RtfHtmlConverter" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/09 17:34:01">
  <Header>
    <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/03/09 17:08:25">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0" />
      <Source SelectionStart="61" SelectionLength="0">using System;
using System.Collections;
using System.Drawing;
using System.Text;
using Girl.Text;
</Source>
    </HAFunc>
  </Header>
  <Body>
    <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false" LastModified="2003/03/01 21:39:57">
      <Arguments />
      <Comment SelectionStart="42" SelectionLength="0">&lt;summary&gt;
RTF と HTML を相互変換します。
&lt;/summary&gt;
</Comment>
      <Source SelectionStart="0" SelectionLength="0" />
      <HAFunc Type="Public" Text="Convert:static string" IsExpanded="true" IsSelected="true" AllowDrag="true" LastModified="2003/03/09 17:34:01">
        <Arguments>
          <HAObject Type="Private" Text="rd:RtfDocument" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/01 21:39:57" />
        </Arguments>
        <HAObject Type="Private" Text="ret:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/01 21:39:57" />
        <HAObject Type="Private" Text="rc1:RtfContext" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/03/01 21:39:57">
          <HAObject Type="Private" Text="rc2:RtfContext" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/01 21:39:57" />
        </HAObject>
        <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/01 21:39:57" />
        <HAObject Type="Private" Text="rf:RtfFont" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/01 21:39:57" />
        <HAObject Type="Private" Text="stack1:Stack" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/01 21:39:57" />
        <HAObject Type="Private" Text="stack2:Stack" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/01 21:39:57" />
        <HAObject Type="Private" Text="fonts:RtfFont[]" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/09 16:50:45" />
        <HAObject Type="Private" Text="colors:Color[]" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/09 16:49:32" />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="298" SelectionLength="0">ret = new StringBuilder();
rc1 = new RtfContext();
rc2 = new RtfContext();
stack1 = new Stack();
stack2 = new Stack();
fonts  = rd. FontTable.Fonts;
colors = rd.ColorTable.Colors;
foreach (object obj in rd.Document)
{
	ro = obj as RtfObject;
	rc2 = rc1;
	rc1.Read(ro);
	__CLASS.CheckContext(fonts, colors, stack1, rc1, rc2);
	if (ro.IsText)
	{
		__CLASS.WriteStack(ret, stack1, stack2);
		rf = fonts[rc1.Font];
		ret.Append(ro.GetText(
			CharSetEncoding.GetEncoding(rf.CharSet)));
	}
	else if (ro.Name == "\\par")
	{
		__CLASS.WriteStack(ret, stack1, stack2);
		ret.Append("&lt;br/&gt;\r\n");
	}
}
__CLASS.WritePop(ret, stack2, null);  // スタックを解消
return ret.ToString();
</Source>
        <HAFunc Type="Private" Text="CheckContext:static" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/09 17:33:53">
          <Arguments>
            <HAObject Type="Private" Text="fonts:RtfFont[]" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/09 17:33:53" />
            <HAObject Type="Private" Text="colors:Color[]" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/09 16:52:23" />
            <HAObject Type="Private" Text="stack1:Stack" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/01 21:39:57" />
            <HAObject Type="Private" Text="rc1:RtfContext" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/01 21:39:57" />
            <HAObject Type="Private" Text="rc2:RtfContext" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/01 21:39:57" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="610" SelectionLength="0">if (rc1.Bold != rc2.Bold)
{
	if (rc1.Bold)
	{
		stack1.Push("b");
	}
	else
	{
		__CLASS.WritePop(null, stack1, "b");
	}
}
if (rc1.Italic != rc2.Italic)
{
	if (rc1.Italic)
	{
		stack1.Push("i");
	}
	else
	{
		__CLASS.WritePop(null, stack1, "i");
	}
}
if (rc1.Underline != rc2.Underline)
{
	if (rc1.Underline)
	{
		stack1.Push("u");
	}
	else
	{
		__CLASS.WritePop(null, stack1, "u");
	}
}
if (rc1.Color != rc2.Color)
{
	__CLASS.WritePop(null, stack1, "font color=");
	if (rc1.Color &gt; 0)
	{
		Color c = colors[rc1.Color];
		stack1.Push(string.Format("font color=\"#{0:x2}{1:x2}{2:x2}\"",
			c.R, c.G, c.B));
	}
}
if (rc1.Font != rc2.Font)
{
	__CLASS.WritePop(null, stack1, "font face=");
	if (rc1.Font &gt; 0)
	{
		stack1.Push(string.Format("font face=\"{0}\"",
			fonts[rc1.Font].Name));
	}
}
if (rc1.FontSize != rc2.FontSize)
{
	__CLASS.WritePop(null, stack1, "font size=");
	if (rc1.FontSize != 18)  // 決め打ちでも問題ないと思う
	{
		stack1.Push(string.Format("font size=\"{0}\"",
			((double)rc1.FontSize) / 2));
	}
}
</Source>
        </HAFunc>
        <HAFunc Type="Private" Text="WriteStack:static" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/09 17:13:05">
          <Arguments>
            <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/01 21:39:57" />
            <HAObject Type="Private" Text="stack1:Stack" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/01 21:39:57" />
            <HAObject Type="Private" Text="stack2:Stack" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/01 21:39:57" />
          </Arguments>
          <HAObject Type="Private" Text="st1:object[]" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/01 21:39:57" />
          <HAObject Type="Private" Text="st2:object[]" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/01 21:39:57" />
          <HAObject Type="Private" Text="common:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/01 21:39:57" />
          <HAObject Type="Private" Text="str:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/01 21:39:57" />
          <HAObject Type="Private" Text="p:int" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/09 17:10:45" />
          <HAObject Type="Private" Text="st3:Stack" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/01 21:39:57" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="386" SelectionLength="0">st3 = new Stack();

// 配列が Push 順ではなく Pop された順番（逆向き）になるのに注意！
st1 = stack1.ToArray();
st2 = stack2.ToArray();

// 共通部分を調べて無視する
int len1 = stack1.Count;
int len2 = stack2.Count;
int lenm = Math.Min(len1, len2);
for (common = 0; common &lt; lenm; common++)
{
	// 配列が逆向きなのに注意！
	if (!st1[len1 - common - 1].Equals(st2[len2 - common - 1])) break;
}

// スタックを解消する
while (stack2.Count &gt; common)
{
	str = stack2.Pop() as string;
	p = str.IndexOf(" ");
	if (p &gt; 0) str = str.Substring(0, p);
	sb.AppendFormat("&lt;/{0}&gt;", str);
}

// スタックを積む
for (int i = common; i &lt; len1; i++)
{
	string s = st1[len1 - i - 1] as string;
	st3.Push(s);
}

while(st3.Count &gt; 0)
{
	string ss = st3.Pop() as string;
	sb.AppendFormat("&lt;{0}&gt;", ss);
	stack2.Push(ss);
}

// stack2 は stack1 と同じ内容になる
</Source>
        </HAFunc>
        <HAFunc Type="Private" Text="WritePop:static" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/09 17:22:34">
          <Arguments>
            <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/01 21:39:57" />
            <HAObject Type="Private" Text="stack:Stack" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/01 21:39:57" />
            <HAObject Type="Private" Text="tag:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/01 21:39:57" />
          </Arguments>
          <HAObject Type="Private" Text="st:Stack" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/01 21:39:57" />
          <HAObject Type="Private" Text="ss:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/09 17:22:04" />
          <HAObject Type="Private" Text="str:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/01 21:39:57" />
          <HAObject Type="Private" Text="p:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/09 17:18:06" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0">st = new Stack();

// スタックに存在するかチェック
if (tag != null)
{
	bool ok = false;
	foreach (object obj in stack.ToArray())
	{
		string s = obj as string;
		if (s == tag || s.StartsWith(tag))
		{
			ok = true;
			break;
		}
	}
	if (!ok) return;
}

while (stack.Count &gt; 0)
{
	ss = str = stack.Pop() as string;
	
	p = str.IndexOf(" ");
	if (p &gt; 0) str = str.Substring(0, p);
	if (sb != null) sb.AppendFormat("&lt;/{0}&gt;", str);
	
	if (tag != null &amp;&amp; (ss == tag || ss.StartsWith(tag))) break;
	st.Push(ss);
}
if (tag == null) return;  // スタック解消に使うため

// スタックを積み直す
while (st.Count &gt; 0)
{
	str = st.Pop() as string;
	if (sb != null) sb.AppendFormat("&lt;{0}&gt;", str);
	stack.Push(str);
}
</Source>
        </HAFunc>
      </HAFunc>
    </HAFunc>
  </Body>
  <Footer>
    <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/03/01 21:39:57">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0" />
      <Source SelectionStart="0" SelectionLength="0" />
    </HAFunc>
  </Footer>
</HAClass>