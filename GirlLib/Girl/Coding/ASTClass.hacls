<?xml version="1.0" encoding="utf-8"?>
<HAClass Type="Public" Text="ASTClass:ASTObject" IsExpanded="false" IsSelected="false" AllowDrag="true">
  <HAObject Type="Public" Text="Access:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
  <Header>
    <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0" />
      <Source SelectionStart="40" SelectionLength="0">using System;
using System.Collections;
</Source>
    </HAFunc>
  </Header>
  <Body>
    <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
      <Source SelectionStart="0" SelectionLength="0" />
      <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <Arguments />
        <Comment SelectionStart="26" SelectionLength="0">&lt;summary&gt;
抽象構文木でのクラスを表します。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
      <HAFunc Type="Public" Text="ParseDeclaration" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <Arguments>
          <HAObject Type="Private" Text="parser:ParserBase" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        </Arguments>
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="34" SelectionLength="0">this.DeclarationPos = parser.Pos;
string text;

while (parser.Read())
{
	text = parser.Text;
	if (this.Name == "") this.Name = text;
	if (text == "{")
	{
		this.Access = parser.Access;
		this.Parse(parser);
		break;
	}
}
</Source>
      </HAFunc>
      <HAFunc Type="Public" Text="Parse" IsExpanded="true" IsSelected="true" AllowDrag="true">
        <Arguments>
          <HAObject Type="Private" Text="parser:ParserBase" IsExpanded="false" IsSelected="true" AllowDrag="true" />
        </Arguments>
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="913" SelectionLength="0">int level = 0;
bool ignore = false;
string text = parser.Text, preText;
int pos = parser.Pos, prePos;
bool first = true;
Stack region = new Stack();

while (parser.Read())
{
	if (first)
	{
		this.Pos = parser.Pos;
		first = false;
	}
	preText = text;
	prePos  = pos;
	text = parser.Text;
	pos  = parser.Pos;
	
	if (text == "{")
	{
		if (level == 0 &amp;&amp; !ignore)
		{
			this.ParseProperty(parser, region, preText, prePos);
		}
		else
		{
			level++;
		}
	}
	else if (text == "}")
	{
		level--;
		if (level &lt; 0) break;
	}
	else if (text == "=" || text == "delegate")
	{
		ignore = true;
	}
	else if (text == ";")
	{
		ignore = false;
	}
	else if (text == "(" &amp;&amp; level == 0 &amp;&amp; !ignore)
	{
		ASTMethod am = new ASTMethod();
		am.Name = preText;
		am.DeclarationPos = prePos;
		am.ParseDeclaration(parser);
		this.AddObject(region, am);
		ignore = false;
	}
	else if (text == "class" || text == "struct" || text == "enum")
	{
		ASTClass ac = new ASTClass();
		ac.ParseDeclaration(parser);
		this.objects.Add(ac);
	}
	else if (text.StartsWith("#region"))
	{
		ASTRegion ar = new ASTRegion(text, pos);
		this.AddObject(region, ar);
		region.Push(ar);
	}
	else if (text == "#endregion")
	{
		if (region.Count &gt; 0) region.Pop();
	}
}
</Source>
        <HAFunc Type="Private" Text="ParseProperty" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="parser:ParserBase" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="region:Stack" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <HAObject Type="Private" Text="name:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="pos:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="313" SelectionLength="0">string text = parser.Text, preText, access = parser.Access;

while (parser.Read())
{
	preText = text;
	text = parser.Text;
	
	if (text == "{")
	{
		ASTMethod am = new ASTMethod();
		am.Name = preText + "_" + name;
		am.Access = access;
		am.DeclarationPos = pos;
		am.Parse(parser);
		this.AddObject(region, am);
	}
	else if (text == "}")
	{
		break;
	}
}
</Source>
        </HAFunc>
        <HAFunc Type="Private" Text="AddObject" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="region:Stack" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <HAObject Type="Private" Text="ao:ASTObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="64" SelectionLength="0">if (region.Count &lt; 1)
{
	this.objects.Add(ao);
}
else
{
	(region.Peek() as ASTObject).Objects.Add(ao);
}
</Source>
        </HAFunc>
      </HAFunc>
    </HAFunc>
  </Body>
  <Footer>
    <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0" />
      <Source SelectionStart="0" SelectionLength="0" />
    </HAFunc>
  </Footer>
</HAClass>