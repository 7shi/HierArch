<?xml version="1.0" encoding="utf-8"?>
<HAClass Type="Public" Text="CSharpParser:CParserBase" IsExpanded="false" IsSelected="false" AllowDrag="true">
  <HAObject Type="Protected" Text="objects:ArrayList" IsExpanded="false" IsSelected="true" AllowDrag="true" />
  <Header>
    <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0" />
      <Source SelectionStart="40" SelectionLength="0">using System;
using System.Collections;
</Source>
    </HAFunc>
  </Header>
  <Body>
    <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
      <Arguments />
      <Comment SelectionStart="30" SelectionLength="0">&lt;summary&gt;
プルモデルによる C# のパーサです。
&lt;/summary&gt;
</Comment>
      <Source SelectionStart="0" SelectionLength="0" />
      <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="0" SelectionLength="0">this.keyWords = new string[]
	{
		"abstract", "as", "base", "bool",
		"break", "byte", "case", "catch",
		"char", "checked", "class", "const",
		"continue", "decimal", "default", "delegate",
		"do", "double", "else", "enum",
		"event", "explicit", "extern", "false",
		"finally", "fixed", "float", "for",
		"foreach", "goto", "if", "implicit",
		"in", "int", "interface", "internal",
		"is", "lock", "long", "namespace",
		"new", "null", "object", "operator",
		"out", "override", "params", "private",
		"protected", "public", "readonly", "ref",
		"return", "sbyte", "sealed", "short",
		"sizeof", "stackalloc", "static", "string",
		"struct", "switch", "this", "throw",
		"true", "try", "typeof", "uint",
		"ulong", "unchecked", "unsafe", "ushort",
		"using", "virtual", "volatile", "void",
		"while"
	};
</Source>
      </HAFunc>
      <HAFunc Type="Protected" Text="Init:override" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="72" SelectionLength="0">base.Init();

this.objects = new ArrayList();
this.access  = "private";
</Source>
      </HAFunc>
      <HAFunc Type="Public" Text="Read:override bool" IsExpanded="false" IsSelected="true" AllowDrag="true">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="206" SelectionLength="0">bool ret = base.Read();
if (this.text == "public"
	|| this.text == "protected"
	|| this.text == "private")
{
	this.access = this.text;
}
else if (this.text == "}")
{
	this.access = "private";
}
return ret;
</Source>
      </HAFunc>
      <HAFunc Type="Public" Text="Parse:override" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0">string text;

while (this.Read())
{
	text = this.Text;
	
	if (text == "namespace")
	{
		ASTNamespace an = new ASTNamespace();
		an.ParseDeclaration(this);
		this.objects.Add(an);
	}
	else if (text == "class")
	{
		ASTClass ac = new ASTClass();
		ac.ParseDeclaration(this);
		this.objects.Add(ac);
	}
}

this.Close();
</Source>
      </HAFunc>
      <HAFunc Type="Public" Text="get_Objects:ArrayList" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="21" SelectionLength="0">return this.objects;
</Source>
      </HAFunc>
    </HAFunc>
  </Body>
  <Footer>
    <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0" />
      <Source SelectionStart="0" SelectionLength="0" />
    </HAFunc>
  </Footer>
</HAClass>