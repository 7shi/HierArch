<?xml version="1.0" encoding="utf-8"?>
<HAClass Type="Public" Text="CParserBase:ParserBase" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/16 0:55:04">
  <HAObject Type="Protected" Text="separator:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53" />
  <HAObject Type="Private" Text="preText:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53" />
  <HAObject Type="Private" Text="preChar:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53" />
  <HAObject Type="Private" Text="curChar:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53" />
  <HAObject Type="Private" Text="nextChar:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53" />
  <HAObject Type="Private" Text="curLineNum:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53" />
  <HAObject Type="Private" Text="prePos:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53" />
  <HAObject Type="Private" Text="curPos:int" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:53" />
  <Header>
    <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 4:18:53">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0" />
      <Source SelectionStart="31" SelectionLength="0">using System;
using System.IO;
</Source>
    </HAFunc>
  </Header>
  <Body>
    <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 4:18:53">
      <Arguments />
      <Comment SelectionStart="40" SelectionLength="0">&lt;summary&gt;
プルモデルによる C 型言語向けパーサのベースクラスです。
&lt;/summary&gt;
</Comment>
      <Source SelectionStart="112" SelectionLength="0">private enum State
{
	Normal,
	Comment1,
	Comment2,
	Directive,
	String,
	StringAt,
	Char,
	Number
}
</Source>
      <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
      <HAFunc Type="Protected" Text="Init:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="234" SelectionLength="0">base.Init();

this.separator = ";,.(){}[]*";

this.preText    = "";
this.preChar    = -1;
this.curChar    = -1;
this.nextChar   = -1;
this.curLineNum =  1;
this.prePos     =  0;
this.curPos     =  0;
this.pos        =  0;
</Source>
      </HAFunc>
      <HAFunc Type="Public" Text="Read:override bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/16 0:35:29">
        <Arguments />
        <HAObject Type="Private" Text="ch:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53" />
        <HAObject Type="Private" Text="st:State" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:53" />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="2438" SelectionLength="0">this.preText = this.text;
this.text = this.spacing = "";
ch = -1;
st = State.Normal;

for (;;)
{
	if (this.text.Length &lt; 1)
	{
		this.lineNumber = this.curLineNum;
		this.prePos = this.pos;
		this.pos = this.curPos;
	}
	ch = ReadChar();
	if (ch == -1) break;

	if (st == State.String || st == State.StringAt
		|| st == State.Char || st == State.Comment1)
	{
	}
	else if (st == State.Comment2 || st == State.Directive)
	{
		if (ch == '\r' || ch == '\n')
		{
			this.nextChar = ch;
			break;
		}
	}
	else if (" \t\r\n".IndexOf((char)ch) &gt;= 0) 
	{
		if (this.text.Length &gt; 0)
		{
			this.nextChar = ch;
			break;
		}
		this.spacing += (char)ch;
		continue;
	}
	else if (ch == '"')
	{
		if (this.text.Length &lt; 1)
		{
			st = State.String;
		}
		else if (this.text == "@")
		{
			st = State.StringAt;
		}
		else if (st != State.String)
		{
			this.nextChar = ch;
			break;
		}
	}
	else if (ch == '\'')
	{
		if (this.text.Length &lt; 1)
		{
			st = State.Char;
		}
		else if (st != State.Char)
		{
			this.nextChar = ch;
			break;
		}
	}
	else if (ch == '.')
	{
		if (this.text.Length &gt; 0 &amp;&amp; st != State.Number)
		{
			this.nextChar = ch;
			break;
		}
	}
	else if (this.text == "/" &amp;&amp; ch == '*')
	{
	}
	else if (this.text.Length &gt; 0
		&amp;&amp; this.separator.IndexOf((char)ch) &gt;= 0)
	{
		this.nextChar = ch;
		break;
	}

	this.text += (char)ch;
	if (this.text.Length == 1) 
	{
		this.lineNumber = this.curLineNum;
		if (this.text == "#") 
		{
			st = State.Directive;
		}
		else if (this.separator.IndexOf(this.text) &gt;= 0)
		{
			this.preChar = ch;
			break;
		}
	}
	else if (this.text == "/*") 
	{
		st = State.Comment1;
	}
	else if (this.text == "//")
	{
		st = State.Comment2;
	}
	else if (this.text == "#") 
	{
		st = State.Directive;
	}
	else if (this.text.Length == 1 &amp;&amp; '0' &lt;= ch &amp;&amp; ch &lt;= '9')
	{
		st = State.Number;
	}

	if (st == State.Comment1)
	{
		if (this.preChar == '*' &amp;&amp; ch == '/') break;
	} 
	else if (st == State.String)
	{
		if (this.text.Length &gt; 1)
		{
			if (this.preChar == '\\' &amp;&amp; ch == '\\')
			{
				this.curChar = ' ';
			}
			else if (this.preChar != '\\' &amp;&amp; ch == '"')
			{
				break;
			}
		}
	}
	else if (st == State.StringAt)
	{
		if (this.text.Length &gt; 2 &amp;&amp; ch == '"') break;
	}
	else if (st == State.Char)
	{
		if (this.text.Length &gt; 1)
		{
			if (this.preChar == '\\' &amp;&amp; ch == '\\')
			{
				this.curChar = ' ';
			}
			else if (this.preChar != '\\' &amp;&amp; ch == '\'')
			{
				break;
			}
		}
	}
}

return base.Read();
</Source>
      </HAFunc>
      <HAFunc Type="Private" Text="ReadChar:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="376" SelectionLength="0">if (this.nextChar != -1) 
{
	this.curChar = this.nextChar;
	this.nextChar = -1;
} 
else 
{
	this.preChar = this.curChar;
	this.curChar = this.reader.Read();
	if (this.curChar != -1)
	{
		this.curPos++;
		this.source.Append((char)this.curChar);
	}
	if (this.curChar == '\r'
		|| (this.preChar != '\r' &amp;&amp; this.curChar == '\n'))
	{
		this.curLineNum++;
	}
}
return this.curChar;
</Source>
      </HAFunc>
      <HAFunc Type="Folder" Text="Properties" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="get_IsComment:override bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="66" SelectionLength="0">return this.text.StartsWith("/*") || this.text.StartsWith("//");
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_IsString:override bool" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/16 0:55:04">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="95" SelectionLength="0">return this.text.StartsWith("\"") || this.text.StartsWith("'") || this.text.StartsWith("@\"");
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_IsDirective:override bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="35" SelectionLength="0">return this.text.StartsWith("#");
</Source>
        </HAFunc>
      </HAFunc>
    </HAFunc>
  </Body>
  <Footer>
    <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 4:18:53">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0" />
      <Source SelectionStart="0" SelectionLength="0" />
    </HAFunc>
  </Footer>
</HAClass>