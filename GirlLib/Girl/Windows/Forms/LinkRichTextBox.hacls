<?xml version="1.0" encoding="utf-8"?>
<HAClass Type="Public" Text="LinkRichTextBox:ExRichTextBox" IsExpanded="false" IsSelected="false" AllowDrag="true">
  <HAObject Type="Public" Text="LinkTargetNotify:event LinkTargetEventHandler" IsExpanded="false" IsSelected="false" AllowDrag="true" />
  <HAObject Type="Public" Text="LinkTargetClicked:event LinkTargetEventHandler" IsExpanded="false" IsSelected="false" AllowDrag="true" />
  <HAObject Type="Private" Text="oldCursor:Cursor" IsExpanded="false" IsSelected="false" AllowDrag="true" />
  <HAObject Type="Private" Text="linkColor:Color" IsExpanded="false" IsSelected="false" AllowDrag="true" />
  <HAObject Type="Private" Text="links:ArrayList" IsExpanded="false" IsSelected="false" AllowDrag="true" />
  <HAObject Type="Private" Text="linkTarget:object" IsExpanded="false" IsSelected="true" AllowDrag="true" />
  <Header>
    <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="true" AllowDrag="false">
      <Arguments />
      <Comment SelectionStart="42" SelectionLength="0">このファイルは LinkRichTextBox.hacls から生成されています。
</Comment>
      <Source SelectionStart="90" SelectionLength="0">using System;
using System.Collections;
using System.Drawing;
using System.Windows.Forms;
</Source>
    </HAFunc>
  </Header>
  <Body>
    <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
      <Arguments />
      <Comment SelectionStart="44" SelectionLength="0">&lt;summary&gt;
リンクをサポートした読み取り専用の RichTextBox です。
&lt;/summary&gt;
</Comment>
      <Source SelectionStart="0" SelectionLength="0">public struct LinkTargetInfo 
{
	public int Start, Length;
	public object Target;

	public LinkTargetInfo(int start, int length, object target)
	{
		this.Start  = start;
		this.Length = length;
		this.Target = target;
	}
}

public class LinkTargetEventArgs : EventArgs
{
	public object Target;

	public LinkTargetEventArgs(object target)
	{
		this.Target = target;
	}
}

public delegate void LinkTargetEventHandler(object sender, LinkTargetEventArgs e);
</Source>
      <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="149" SelectionLength="0">this.ReadOnly   = true;
this.oldCursor  = this.Cursor;
this.linkColor  = Color.Blue;
this.links      = new ArrayList();
this.linkTarget = null;
</Source>
      </HAFunc>
      <HAFunc Type="Public" Text="get_LinkColor:Color" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="24" SelectionLength="0">return this.linkColor;
</Source>
      </HAFunc>
      <HAFunc Type="Public" Text="set_LinkColor:Color" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="25" SelectionLength="0">this.linkColor = value;
</Source>
      </HAFunc>
      <HAFunc Type="Folder" Text="Link" IsExpanded="true" IsSelected="false" AllowDrag="true">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="Clear:new void" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="29" SelectionLength="0">this.SetTarget(null);
this.links.Clear();
base.Clear();
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="AppendLink" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="target:object" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="134" SelectionLength="0">this.links.Add(new LinkTargetInfo(this.TextLength, text.Length, target));
this.AppendText(text, this.LinkColor, FontStyle.Underline);
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="OnMouseMove:override" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="e:MouseEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="304" SelectionLength="0">base.OnMouseMove(e);

int pos = this.GetCharIndexFromPosition(new Point(e.X, e.Y));
object target = null;
LinkTargetInfo li;
foreach (object obj in this.links)
{
	li = (LinkTargetInfo)obj;
	if (li.Start &lt;= pos &amp;&amp; pos &lt; li.Start + li.Length)
	{
		target = li.Target;
		break;
	}
}
this.SetTarget(target);
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="OnMouseLeave:override" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="44" SelectionLength="0">base.OnMouseLeave(e);
this.SetTarget(null);
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="OnMouseDown:override" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="e:MouseEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="165" SelectionLength="0">base.OnMouseDown(e);
if (this.linkTarget == null || this.LinkTargetClicked == null) return;

this.LinkTargetClicked(this, new LinkTargetEventArgs(this.linkTarget));
</Source>
        </HAFunc>
        <HAFunc Type="Private" Text="SetTarget" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="target:object" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="236" SelectionLength="0">if (target == this.linkTarget) return;

this.linkTarget = target;
this.Cursor = (target == null) ? this.oldCursor : Cursors.Hand;
if (this.LinkTargetNotify == null) return;

this.LinkTargetNotify(this, new LinkTargetEventArgs(target));
</Source>
        </HAFunc>
      </HAFunc>
    </HAFunc>
  </Body>
  <Footer>
    <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0" />
      <Source SelectionStart="0" SelectionLength="0" />
    </HAFunc>
  </Footer>
</HAClass>