<?xml version="1.0" encoding="utf-8"?>
<HAClass Type="Public" Text="EditManager:ContextManager" IsExpanded="false" IsSelected="false" AllowDrag="true">
  <HAObject Type="Private" Text="controls:ArrayList" IsExpanded="false" IsSelected="true" AllowDrag="true" />
  <HAObject Type="Private" Text="target:Control" IsExpanded="false" IsSelected="false" AllowDrag="true" />
  <HAObject Type="Private" Text="forms:ArrayList" IsExpanded="false" IsSelected="false" AllowDrag="true" />
  <Header>
    <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="true" AllowDrag="false">
      <Arguments />
      <Comment SelectionStart="93" SelectionLength="0">このファイルは EditManager.hacls から生成されています。

このクラスは[STAThread]でのみ正常動作します。
[MTAThread]では使用しないでください。
</Comment>
      <Source SelectionStart="194" SelectionLength="0">using System;
using System.Collections;
using System.Windows.Forms;

namespace Girl.Windows.Forms
{
	public enum EditAction
	{
		Undo,
		Redo,
		Cut,
		Copy,
		Paste,
		Delete,
		SelectAll
	}
}
</Source>
    </HAFunc>
  </Header>
  <Body>
    <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
      <Arguments />
      <Comment SelectionStart="43" SelectionLength="0">&lt;summary&gt;
テキストボックスの状態を管理します。
&lt;/summary&gt;
</Comment>
      <Source SelectionStart="0" SelectionLength="0" />
      <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <Arguments />
        <Comment SelectionStart="35" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="423" SelectionLength="0">this.controls = new ArrayList();
this.target   = null;

this.handlers = new EventHandler[]
	{
		new EventHandler(this.cmd_Undo     ),
		new EventHandler(this.cmd_Redo     ),
		new EventHandler(this.cmd_Cut      ),
		new EventHandler(this.cmd_Copy     ),
		new EventHandler(this.cmd_Paste    ),
		new EventHandler(this.cmd_Delete   ),
		new EventHandler(this.cmd_SelectAll)
	};

this.forms = new ArrayList();
</Source>
      </HAFunc>
      <HAFunc Type="Public" Text="get_MaxActions:override int" IsExpanded="false" IsSelected="false" AllowDrag="true">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="55" SelectionLength="0">return (int)Enum.GetNames(typeof(EditAction)).Length;
</Source>
      </HAFunc>
      <HAFunc Type="Folder" Text="Command" IsExpanded="true" IsSelected="false" AllowDrag="true">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="SetCommand" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="action:EditAction" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <HAObject Type="Private" Text="target:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="39" SelectionLength="0">this.SetCommand((int)action, target);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="SetCommand" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="action:EditAction" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <HAObject Type="Private" Text="targets:params object[]" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="76" SelectionLength="0">foreach (object obj in targets)
{
	this.SetCommand((int)action, obj);
}
</Source>
        </HAFunc>
      </HAFunc>
      <HAFunc Type="Folder" Text="Control Management" IsExpanded="true" IsSelected="false" AllowDrag="true">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="get_Controls:ArrayList" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="23" SelectionLength="0">return this.controls;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_Target:Control" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="21" SelectionLength="0">return this.target;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="AddControl" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="control:Control" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <HAObject Type="Private" Text="f:Form" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0">if (control == null || this.controls.Contains(control)) return;

control.Disposed += new EventHandler(this.control_Disposed);
control.Enter    += new EventHandler(this.control_Enter);

EventHandler eh = new EventHandler(this.target_Event);
control.VisibleChanged += eh;
control.EnabledChanged += eh;

if (control is TextBox)
{
	TextBox tb = control as TextBox;
	tb.TextChanged += eh;
	MouseEventHandler meh = new MouseEventHandler(this.textBox_MouseMove);
	tb.MouseDown += meh;
	tb.MouseUp   += meh;
	tb.MouseMove += meh;
	KeyEventHandler keh = new KeyEventHandler(this.textBox_KeyUpDown);
	tb.KeyDown += keh;
	tb.KeyUp   += keh;
}
else if (control is RichTextBox)
{
	RichTextBox rtb = control as RichTextBox;
	rtb.SelectionChanged += eh;
}

f = control.TopLevelControl as Form;
if (f == null || this.forms.Contains(f)) return;

this.forms.Add(f);
f.Activated += new EventHandler(this.form_Activated);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="RemoveControl" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="control:Control" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="81" SelectionLength="0">if (!this.controls.Contains(control)) return;

this.controls.Remove(control);
</Source>
        </HAFunc>
      </HAFunc>
      <HAFunc Type="Folder" Text="Edit" IsExpanded="true" IsSelected="false" AllowDrag="true">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="Undo:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="99" SelectionLength="0">if (this.target is TextBoxBase)
{
	(this.target as TextBoxBase).Undo();
}
this.CheckStatus();
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Redo:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="78" SelectionLength="0">if (this.target is RichTextBox)
{
	(this.target as RichTextBox).Redo();
}
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Cut:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="73" SelectionLength="0">if (this.target is TextBoxBase)
{
	(this.target as TextBoxBase).Cut();
}
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Copy:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="262" SelectionLength="0">if (this.target is RichTextBox)
{
	RichTextBox rtb = this.target as RichTextBox;
	if (rtb.SelectionLength &gt; 0)
	{
		DataObject obj = new DataObject();
		obj.SetData(DataFormats.Rtf, rtb.SelectedRtf);
		obj.SetData(rtb.SelectedText);
		Clipboard.SetDataObject(obj);
	}
}
else if (this.target is TextBoxBase)
{
	(this.target as TextBoxBase).Copy();
}
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Paste:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="79" SelectionLength="0">if (this.target is TextBoxBase)
{
	(this.target as TextBoxBase).Paste();
}
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Delete:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="89" SelectionLength="0">if (this.target is TextBoxBase)
{
	(this.target as TextBoxBase).SelectedText = "";
}
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="SelectAll:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="83" SelectionLength="0">if (this.target is TextBoxBase)
{
	(this.target as TextBoxBase).SelectAll();
}
</Source>
        </HAFunc>
        <HAFunc Type="Folder" Text="Handlers" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Private" Text="cmd_Undo" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="9" SelectionLength="0">this.Undo();
</Source>
          </HAFunc>
          <HAFunc Type="Private" Text="cmd_Redo" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="9" SelectionLength="0">this.Redo();
</Source>
          </HAFunc>
          <HAFunc Type="Private" Text="cmd_Cut" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="8" SelectionLength="0">this.Cut();
</Source>
          </HAFunc>
          <HAFunc Type="Private" Text="cmd_Copy" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="9" SelectionLength="0">this.Copy();
</Source>
          </HAFunc>
          <HAFunc Type="Private" Text="cmd_Paste" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="10" SelectionLength="0">this.Paste();
</Source>
          </HAFunc>
          <HAFunc Type="Private" Text="cmd_Delete" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="11" SelectionLength="0">this.Delete();
</Source>
          </HAFunc>
          <HAFunc Type="Private" Text="cmd_SelectAll" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="19" SelectionLength="0">this.SelectAll();
</Source>
          </HAFunc>
        </HAFunc>
      </HAFunc>
      <HAFunc Type="Folder" Text="Check Status" IsExpanded="true" IsSelected="false" AllowDrag="true">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="CheckStatus" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="153" SelectionLength="0">if (!this.target.Visible || !this.target.Enabled)
{
	this.SetStatus(false);
}
else if (this.target is TextBoxBase)
{
	this.CheckTextBoxBase();
}
</Source>
        </HAFunc>
        <HAFunc Type="Private" Text="CheckTextBoxBase" IsExpanded="true" IsSelected="false" AllowDrag="true">
          <Arguments />
          <HAObject Type="Private" Text="tbb:TextBoxBase" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <HAObject Type="Private" Text="status:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="440" SelectionLength="0">tbb = this.target as TextBoxBase;

this.SetStatus((int)EditAction.Undo, tbb.CanUndo);

status = tbb.SelectionLength &gt; 0;
this.SetStatus((int)EditAction.Cut   , status);
this.SetStatus((int)EditAction.Copy  , status);
this.SetStatus((int)EditAction.Delete, status);

this.SetStatus((int)EditAction.SelectAll, true);

if (tbb is TextBox)
{
	this.CheckTextBox();
}
else if (tbb is RichTextBox)
{
	this.CheckRichTextBox();
}
</Source>
          <HAFunc Type="Private" Text="CheckTextBox" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <HAObject Type="Private" Text="tb:TextBox" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <HAObject Type="Private" Text="status:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="358" SelectionLength="0">tb = this.target as TextBox;

this.SetStatus((int)EditAction.Redo, false);

status = false;
IDataObject data = Clipboard.GetDataObject();
if (data != null)
{
	string[] dfs = data.GetFormats();
	foreach (string df in dfs)
	{
		if (df == "UnicodeText")
		{
			status = true;
			break;
		}
	}
}
this.SetStatus((int)EditAction.Paste, status);
</Source>
          </HAFunc>
          <HAFunc Type="Private" Text="CheckRichTextBox" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <HAObject Type="Private" Text="rtb:RichTextBox" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <HAObject Type="Private" Text="status:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="91" SelectionLength="298">rtb = this.target as RichTextBox;

this.SetStatus((int)EditAction.Redo, rtb.CanRedo);

status = false;
IDataObject data = Clipboard.GetDataObject();
if (data != null)
{
	string[] dfs = data.GetFormats();
	foreach (string df in dfs)
	{
		if (rtb.CanPaste(DataFormats.GetFormat(df)))
		{
			status = true;
			break;
		}
	}
}
this.SetStatus((int)EditAction.Paste, status);
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Folder" Text="Handlers" IsExpanded="true" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Private" Text="control_Disposed" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="91" SelectionLength="0">if (this.target == sender) this.SetStatus(false);
this.RemoveControl(sender as Control);
</Source>
          </HAFunc>
          <HAFunc Type="Private" Text="control_Enter" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="55" SelectionLength="0">this.target = sender as Control;
this.CheckStatus();
</Source>
          </HAFunc>
          <HAFunc Type="Private" Text="form_Activated" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="57" SelectionLength="0">if (this.target == null) return;

this.CheckStatus();
</Source>
          </HAFunc>
          <HAFunc Type="Private" Text="target_Event" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="54" SelectionLength="0">if (sender != target) return;

this.CheckStatus();
</Source>
          </HAFunc>
          <HAFunc Type="Private" Text="textBox_MouseMove" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="e:MouseEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="11" SelectionLength="0">this.target_Event(sender, EventArgs.Empty);
</Source>
          </HAFunc>
          <HAFunc Type="Private" Text="textBox_KeyUpDown" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="e:KeyEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="45" SelectionLength="0">this.target_Event(sender, EventArgs.Empty);
</Source>
          </HAFunc>
        </HAFunc>
      </HAFunc>
    </HAFunc>
  </Body>
  <Footer>
    <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0" />
      <Source SelectionStart="0" SelectionLength="0" />
    </HAFunc>
  </Footer>
</HAClass>