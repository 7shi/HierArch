<?xml version="1.0" encoding="utf-8"?>
<HAClass Type="Public" Text="CodeEditorManager:ContextManager" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
  <HAObject Type="Public" Text="IndentString:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
  <HAObject Type="Public" Text="menuOptions:Hashtable" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
  <Header>
    <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="true" AllowDrag="false" LastModified="2003/02/16 4:18:53">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0" />>
      <Source SelectionStart="213" SelectionLength="0">using System;
using System.Collections;
using System.IO;
using System.Windows.Forms;

namespace Girl.Windows.Forms
{
	public enum CodeEditorOption
	{
		SmartEnter,
		SmartTab,
		SmartHome,
		SmartParenthesis
	}
}
</Source>
    </HAFunc>
  </Header>
  <Body>
    <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 4:18:53">
      <Arguments />
      <Comment SelectionStart="50" SelectionLength="0">&lt;summary&gt;
TextBox にコード入力支援機能を付加します。
&lt;/summary&gt;
</Comment>
      <Source SelectionStart="0" SelectionLength="0" />>
      <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="175" SelectionLength="0">this.IndentString = "\t";
this.menuOptions = new Hashtable();
this.handlers = new EventHandler[]
	{
		new EventHandler(this.menuItem_Click)
	};

this.SetStatus(true);
</Source>
      </HAFunc>
      <HAFunc Type="Public" Text="get_MaxActions:override int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />>
        <Source SelectionStart="43" SelectionLength="0">return (int)Enum.GetNames(typeof(CodeEditorOption)).Length;
</Source>
      </HAFunc>
      <HAFunc Type="Public" Text="GetIndent:static string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
        <Arguments>
          <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
        </Arguments>
        <Comment SelectionStart="0" SelectionLength="0" />>
        <Source SelectionStart="360" SelectionLength="0">int len = text.Length;
if (len &lt; 1) return "";

int pos;
char ch = text[0];
if (ch == '&gt;' || ch == '|')
{
	for (pos = 1; pos &lt; len; pos++)
	{
		ch = text[pos];
		if (" \t&gt;|".IndexOf(ch) &lt; 0) break;
	}
}
else
{
	for (pos = 0; pos &lt; len; pos++)
	{
		ch = text[pos];
		if (ch != ' ' &amp;&amp; ch != '\t') break;
	}
}
return text.Substring(0, pos);
</Source>
      </HAFunc>
      <HAFunc Type="Public" Text="SetTarget" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
        <Arguments>
          <HAObject Type="Private" Text="textBox:TextBoxBase" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
        </Arguments>
        <Comment SelectionStart="0" SelectionLength="0" />>
        <Source SelectionStart="140" SelectionLength="0">textBox.KeyDown  += new KeyEventHandler     (this.textBox_KeyDown );
textBox.KeyPress += new KeyPressEventHandler(this.textBox_KeyPress);
</Source>
      </HAFunc>
      <HAFunc Type="Folder" Text="Command" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />>
        <Source SelectionStart="0" SelectionLength="0" />>
        <HAFunc Type="Public" Text="SetCommand" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
          <Arguments>
            <HAObject Type="Private" Text="option:CodeEditorOption" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
            <HAObject Type="Private" Text="target:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />>
          <Source SelectionStart="39" SelectionLength="0">this.SetCommand((int)option, target);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="SetCommand" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
          <Arguments>
            <HAObject Type="Private" Text="option:CodeEditorOption" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
            <HAObject Type="Private" Text="targets:params object[]" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />>
          <Source SelectionStart="76" SelectionLength="0">foreach (object obj in targets)
{
	this.SetCommand((int)option, obj);
}
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="SetHandler:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
          <Arguments>
            <HAObject Type="Private" Text="action:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
            <HAObject Type="Private" Text="target:object" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />>
          <Source SelectionStart="118" SelectionLength="0">if (target is MenuItem)
{
	this.menuOptions[target] = action;
	(target as MenuItem).Click += this.handlers[0];
}
</Source>
        </HAFunc>
      </HAFunc>
      <HAFunc Type="Folder" Text="Properties" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />>
        <Source SelectionStart="0" SelectionLength="0" />>
        <HAFunc Type="Public" Text="get_SmartEnter:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />>
          <Source SelectionStart="54" SelectionLength="0">return this.flags[(int)CodeEditorOption.SmartEnter];
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="set_SmartEnter:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />>
          <Source SelectionStart="58" SelectionLength="0">this.SetStatus((int)CodeEditorOption.SmartEnter, value);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_SmartTab:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />>
          <Source SelectionStart="52" SelectionLength="0">return this.flags[(int)CodeEditorOption.SmartTab];
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="set_SmartTab:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />>
          <Source SelectionStart="45" SelectionLength="0">this.SetStatus((int)CodeEditorOption.SmartTab, value);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_SmartHome:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />>
          <Source SelectionStart="53" SelectionLength="0">return this.flags[(int)CodeEditorOption.SmartHome];
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="set_SmartHome:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />>
          <Source SelectionStart="57" SelectionLength="0">this.SetStatus((int)CodeEditorOption.SmartHome, value);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_SmartParenthesis:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />>
          <Source SelectionStart="60" SelectionLength="0">return this.flags[(int)CodeEditorOption.SmartParenthesis];
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="set_SmartParenthesis:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />>
          <Source SelectionStart="64" SelectionLength="0">this.SetStatus((int)CodeEditorOption.SmartParenthesis, value);
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="SetProperty:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
          <Arguments>
            <HAObject Type="Private" Text="target:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
            <HAObject Type="Private" Text="status:bool" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />>
          <Source SelectionStart="116" SelectionLength="0">if (target is MenuItem)
{
	MenuItem mi = target as MenuItem;
	if (mi.Checked != status) mi.Checked = status;
}
</Source>
        </HAFunc>
      </HAFunc>
      <HAFunc Type="Folder" Text="Process" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />>
        <Source SelectionStart="0" SelectionLength="0" />>
        <HAFunc Type="Private" Text="ProcessEnter" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
          <Arguments>
            <HAObject Type="Private" Text="textBox:TextBoxBase" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />>
          <Source SelectionStart="1573" SelectionLength="0">int ln = TextBoxPlus.GetCurrentLine(textBox);
int cl = TextBoxPlus.GetCurrentColumn(textBox);
string crtext = TextBoxPlus.GetLineText(textBox, ln);
string crind  = __CLASS.GetIndent(crtext);
int pos = -1;
if (cl == crind.Length &amp;&amp; cl &lt; crtext.Length)
{
	pos = textBox.SelectionStart;
	if (crtext.EndsWith("}"))
	{
		this.InsertText(textBox, this.IndentString);
		pos++;
	}
	this.InsertText(textBox, "\r\n" + crind);
}
else if (cl &lt; crind.Length)
{
	pos = (textBox.SelectionStart += crind.Length - cl);
	if (crtext.EndsWith("}"))
	{
		this.InsertText(textBox, this.IndentString);
		pos++;
	}
	this.InsertText(textBox, "\r\n" + crind);
}
else if (cl &gt; 0 &amp;&amp; crtext.Substring(cl - 1, 1) == "{")
{
	string nxtext = TextBoxPlus.GetLineText(textBox, ln + 1);
	string nxind  = __CLASS.GetIndent(nxtext);
	this.InsertText(textBox, "\r\n" + crind + this.IndentString);
	bool needsClose = !(nxtext.EndsWith("}") &amp;&amp; crind == nxind) &amp;&amp; crind.Length &gt;= nxind.Length;
	if (cl &lt; crtext.Length)
	{
		pos = textBox.SelectionStart;
		if (crtext.Substring(cl, 1) == "}")
		{
			this.InsertText(textBox, "\r\n" + crind);
			textBox.SelectionStart++;
			if (textBox.SelectionStart == textBox.TextLength)
			{
				this.InsertText(textBox, "\r\n");
			}
			needsClose = false;
		}
		else if (needsClose)
		{
			textBox.SelectionStart += crtext.Length - cl;
		}
	}
	if (needsClose)
	{
		if (pos &lt; 0) pos = textBox.SelectionStart;
		this.InsertText(textBox, "\r\n" + crind + "}");
		if (textBox.SelectionStart == textBox.TextLength)
		{
			this.InsertText(textBox, "\r\n");
		}
	}
}
else if (crtext.EndsWith(":"))
{
	this.InsertText(textBox, "\r\n" + crind + this.IndentString);
}
else
{
	this.InsertText(textBox, "\r\n" + crind);
}
if (pos &gt;= 0) textBox.SelectionStart = pos;
</Source>
        </HAFunc>
        <HAFunc Type="Private" Text="ProcessHome:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
          <Arguments>
            <HAObject Type="Private" Text="textBox:TextBoxBase" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />>
          <Source SelectionStart="21" SelectionLength="0">int clm = TextBoxPlus.GetCurrentColumn(textBox);
int ind = __CLASS.GetIndent(TextBoxPlus.GetLineText(textBox, TextBoxPlus.GetCurrentLine(textBox))).Length;
if (clm == 0 &amp;&amp; ind &gt; 0)
{
	textBox.SelectionStart += ind;
	return true;
}
else if (ind &lt; clm)
{
	textBox.SelectionStart -= clm - ind;
	return true;
}
return false;
</Source>
        </HAFunc>
        <HAFunc Type="Private" Text="ProcessParenthesis:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
          <Arguments>
            <HAObject Type="Private" Text="textBox:TextBoxBase" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
            <HAObject Type="Private" Text="ch:char" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />>
          <Source SelectionStart="986" SelectionLength="0">int pos = textBox.SelectionStart;
char prv1 = pos &gt; 0 ? textBox.Text[pos - 1] : '\0';
char prv2 = pos &gt; 1 ? textBox.Text[pos - 2] : '\0';
char curr = pos &lt; textBox.TextLength ? textBox.Text[pos] : '\0';
switch (ch)
{
	case '(':
		this.InsertText(textBox, ")");
		textBox.SelectionStart--;
		break;
	case '[':
		this.InsertText(textBox, "]");
		textBox.SelectionStart--;
		break;
	case '{':
		this.InsertText(textBox, "}");
		textBox.SelectionStart--;
		break;
	case '&lt;':
		this.InsertText(textBox, "&gt;");
		textBox.SelectionStart--;
		break;
	case '*':
		if (prv1 == '/')
		{
			this.InsertText(textBox, "*/");
			textBox.SelectionStart -= 2;
		}
		break;
	case '"':
	case '\'':
		if (prv1 != '\\' || (prv1 == '\\' &amp;&amp; prv2 == '\\'))
		{
			if (ch == curr)
			{
				textBox.SelectionStart++;
				return true;
			}
			this.InsertText(textBox, ch.ToString());
			textBox.SelectionStart--;
		}
		break;
	case ')':
	case ']':
	case '}':
	case '&gt;':
		if (ch != curr) break;
		textBox.SelectionStart++;
		return true;
}
return false;
</Source>
        </HAFunc>
        <HAFunc Type="Private" Text="ProcessTab" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
          <Arguments>
            <HAObject Type="Private" Text="textBox:TextBoxBase" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
            <HAObject Type="Private" Text="shift:bool" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />>
          <Source SelectionStart="503" SelectionLength="0">int pos = textBox.SelectionStart;
int len = textBox.SelectionLength;
int sl = TextBoxPlus.GetLine(textBox, pos);
int el = TextBoxPlus.GetLine(textBox, pos + len);
if (textBox.SelectedText.EndsWith("\n")) el--;
int sp = TextBoxPlus.GetLinePosition(textBox, sl);
int ep = TextBoxPlus.GetLinePosition(textBox, el + 1);
textBox.SelectionStart  = sp;
textBox.SelectionLength = ep - sp;

StringReader sr = new StringReader(textBox.SelectedText);
StringWriter sw = new StringWriter();
string ind = this.IndentString, line;
while ((line = sr.ReadLine()) != null)
{
	if (!shift)
	{
		sw.WriteLine(ind + line);
	}
	else
	{
		char ch = (line.Length &gt; 0) ? line[0] : '\0';
		if (line.StartsWith(ind))
		{
			sw.WriteLine(line.Substring(ind.Length));
		}
		else if (ch == ' ' || ch == '\t' || ch == '&gt;' || ch == '|')
		{
			sw.WriteLine(line.Substring(1));
		}
		else
		{
			sw.WriteLine(line);
		}
	}
}
sw.Close();
sr.Close();
textBox.SelectedText = sw.ToString();
int nlen = textBox.SelectionStart - sp;
textBox.SelectionStart = sp;
textBox.SelectionLength = nlen;
</Source>
        </HAFunc>
        <HAFunc Type="Private" Text="InsertText" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
          <Arguments>
            <HAObject Type="Private" Text="textBox:TextBoxBase" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
            <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />>
          <Source SelectionStart="161" SelectionLength="0">RichTextBox rtb = textBox as RichTextBox;
if (rtb != null)
{
	rtb.SelectionColor = rtb.ForeColor;
	rtb.SelectionFont  = rtb.Font;
}
textBox.SelectedText = text;
</Source>
        </HAFunc>
      </HAFunc>
      <HAFunc Type="Folder" Text="Event Handler" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />>
        <Source SelectionStart="0" SelectionLength="0" />>
        <HAFunc Type="Private" Text="textBox_KeyDown" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
          <Arguments>
            <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
            <HAObject Type="Private" Text="e:KeyEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />>
          <Source SelectionStart="130" SelectionLength="0">TextBoxBase textBox = sender as TextBoxBase;
if (textBox == null) return;

if (e.KeyCode == Keys.Enter &amp;&amp; this.SmartEnter)
{
	if (e.Modifiers == Keys.None)
	{
		this.ProcessEnter(textBox);
	}
	else if (e.Modifiers == Keys.Shift)
	{
		int line = TextBoxPlus.GetCurrentLine(textBox);
		if (line &lt; textBox.Lines.Length)
		{
			int clm  = TextBoxPlus.GetCurrentColumn(textBox);
			int ind = __CLASS.GetIndent(TextBoxPlus.GetLineText(textBox, line + 1)).Length;
			textBox.SelectionStart += (TextBoxPlus.GetLineText(textBox, line).Length - clm)
				+ TextBoxPlus.GetEndLineWidth(textBox) + ind;
		}
	}
	e.Handled = true;
}
else if (e.KeyCode == Keys.Home &amp;&amp; this.SmartHome &amp;&amp; e.Modifiers == Keys.None)
{
	if (this.ProcessHome(textBox)) e.Handled = true;
}
else if (e.KeyCode == Keys.Tab &amp;&amp; this.SmartTab &amp;&amp; (e.Shift || textBox.SelectionLength &gt; 0))
{
	this.ProcessTab(textBox, e.Shift);
	e.Handled = true;
}
</Source>
        </HAFunc>
        <HAFunc Type="Private" Text="textBox_KeyPress" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
          <Arguments>
            <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
            <HAObject Type="Private" Text="e:KeyPressEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />>
          <Source SelectionStart="493" SelectionLength="0">TextBoxBase textBox = sender as TextBoxBase;
if (textBox == null) return;

if (e.KeyChar == (char)13 &amp;&amp; this.SmartEnter &amp;&amp; textBox is TextBox)
{
	e.Handled = true;
}
else if (e.KeyChar == '\t' &amp;&amp; textBox.SelectionLength &gt; 0 &amp;&amp; this.SmartTab)
{
	e.Handled = true;
}
else if (this.SmartParenthesis
	&amp;&amp; this.ProcessParenthesis(textBox, e.KeyChar))
{
	e.Handled = true;
}
else if (e.KeyChar &gt;= ' ' &amp;&amp; textBox is RichTextBox)
{
	this.InsertText(textBox, e.KeyChar.ToString());
	e.Handled = true;
}
</Source>
        </HAFunc>
        <HAFunc Type="Private" Text="menuItem_Click" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53">
          <Arguments>
            <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
            <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
          </Arguments>
          <HAObject Type="Private" Text="mi:MenuItem" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:53" />>
          <Comment SelectionStart="0" SelectionLength="0" />>
          <Source SelectionStart="148" SelectionLength="0">mi = sender as MenuItem;
if (mi == null || !this.menuOptions.Contains(mi)) return;

this.SetStatus((int)this.menuOptions[sender], !mi.Checked);
</Source>
        </HAFunc>
      </HAFunc>
    </HAFunc>
  </Body>
  <Footer>
    <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 4:18:53">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0" />>
      <Source SelectionStart="0" SelectionLength="0" />>
    </HAFunc>
  </Footer>
</HAClass>