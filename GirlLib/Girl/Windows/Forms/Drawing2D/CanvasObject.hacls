<?xml version="1.0" encoding="utf-8"?>
<HAClass Type="Public" Text="CanvasObject" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 10:20:48">
  <HAObject Type="Protected" Text="guid:Guid" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/24 9:56:57" />
  <HAObject Type="Protected" Text="name:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/05/27 21:28:46" />
  <HAObject Type="Protected" Text="rect:RectangleF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/05/13 14:33:13">
    <HAObject Type="Protected" Text="prevRect:RectangleF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 11:09:22" />
  </HAObject>
  <HAObject Type="Protected" Text="crect:RectangleF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/21 13:55:01">
    <HAObject Type="Protected" Text="crects:RectangleF[]" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/05/13 15:31:14" />
  </HAObject>
  <HAObject Type="Protected" Text="pen:Pen" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/05/13 14:43:47" />
  <HAObject Type="Protected" Text="brush:Brush" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/05/13 17:46:46" />
  <HAObject Type="Protected" Text="tag:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/05/27 21:28:51" />
  <HAObject Type="Protected" Text="toolTipText:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/05/28 21:03:07" />
  <HAObject Type="Protected" Text="angle:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/18 13:41:39">
    <HAObject Type="Protected" Text="prevAngle:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 16:13:10" />
  </HAObject>
  <HAObject Type="Protected" Text="visible:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/20 11:06:48" />
  <HAObject Type="Protected" Text="enabled:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/24 23:42:01" />
  <HAObject Type="Protected" Text="fixAngle:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/21 15:09:55" />
  <HAObject Type="Protected" Text="resizable:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/30 13:31:54" />
  <HAObject Type="Protected" Text="minSize:SizeF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 9:27:14" />
  <HAObject Type="Protected" Text="maxSize:SizeF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 9:27:21" />
  <HAObject Type="Protected" Text="editPath:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 9:10:29" />
  <HAObject Type="Protected" Text="order:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 11:02:53" />
  <HAObject Type="Protected" Text="frontMost:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/12 7:09:33" />
  <HAObject Type="Protected" Text="backMost:bool" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/12 10:31:27" />
  <HAObject Type="Protected" Text="group:CanvasGroup" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/26 7:29:59" />
  <Header>
    <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/07/08 13:51:25">
      <Arguments />
      <Comment SelectionStart="19" SelectionLength="0">ここにソースコードの注釈を書きます。
</Comment>
      <Source SelectionStart="192" SelectionLength="0">using System;
using System.Collections;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Serialization;
using Girl.Drawing;
</Source>
    </HAFunc>
  </Header>
  <Body>
    <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false" LastModified="2003/07/12 9:54:51">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0" />
      <Source SelectionStart="126" SelectionLength="0">public static Cursor[] CursorSizes = new Cursor[]
	{
		Cursors.SizeWE, Cursors.SizeNWSE, Cursors.SizeNS, Cursors.SizeNESW
	};
</Source>
      <HAFunc Type="Protected" Text="Init:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/12 10:37:12">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="471" SelectionLength="0">this.guid = Guid.NewGuid();
this.prevRect = RectangleF.Empty;
this.pen = SystemPens.WindowText;
this.brush = null;
this.name = null;
this.tag = null;
this.toolTipText = null;
this.angle = this.prevAngle = 0;
this.visible = true;
this.enabled = true;
this.fixAngle = false;
this.resizable = true;
this.minSize = SizeF.Empty;
this.maxSize = SizeF.Empty;
this.crects = null;
this.editPath = false;
this.order = -1;
this.frontMost = this.backMost = false;
this.group = null;
</Source>
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/05/13 15:34:40">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="13" SelectionLength="0">this.Init();
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 12:42:12">
          <Arguments>
            <HAObject Type="Private" Text="x:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/05/13 14:32:35" />
            <HAObject Type="Private" Text="y:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/05/13 14:32:37" />
            <HAObject Type="Private" Text="width:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/05/13 14:32:38" />
            <HAObject Type="Private" Text="height:float" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/05/13 14:32:41" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="64" SelectionLength="0">this.Init();
this.Bounds = new RectangleF(x, y, width, height);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 12:42:15">
          <Arguments>
            <HAObject Type="Private" Text="rect:RectangleF" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/05/13 14:34:30" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="33" SelectionLength="0">this.Init();
this.Bounds = rect;
</Source>
        </HAFunc>
      </HAFunc>
      <HAFunc Type="Public" Text="CheckGuid" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 13:47:08">
        <Arguments>
          <HAObject Type="Private" Text="guidTable:Hashtable" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/08 13:38:19" />
        </Arguments>
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="94" SelectionLength="0">if (guidTable == null || !guidTable.Contains(this.guid)) return;

this.guid = Guid.NewGuid();
</Source>
      </HAFunc>
      <HAFunc Type="Folder" Text="Properties" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/21 15:10:38">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="get_Guid:Guid" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/24 9:57:22">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="18" SelectionLength="0">return this.guid;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_Name:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/21 16:03:39">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="18" SelectionLength="0">return this.name;
</Source>
          <HAFunc Type="Public" Text="set_Name:strng" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 9:18:48">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="19" SelectionLength="0">this.name = value;
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="get_Tag:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/21 16:03:35">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="17" SelectionLength="0">return this.tag;
</Source>
          <HAFunc Type="Public" Text="set_Tag:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 9:18:50">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="18" SelectionLength="0">this.tag = value;
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="get_Group:CanvasGroup" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/26 7:31:21">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="19" SelectionLength="0">return this.group;
</Source>
          <HAFunc Type="Public" Text="set_Group:CanvasGroup" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 9:18:52">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="20" SelectionLength="0">this.group = value;
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="get_RootGroup:CanvasGroup" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/26 11:01:34">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="66" SelectionLength="0">if (this.group == null) return null;
return this.group.RootGroup;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_Visible:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/26 10:53:46">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="67" SelectionLength="0">return this.visible &amp;&amp; (this.group == null || this.group.Visible);
</Source>
          <HAFunc Type="Public" Text="set_Visible:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 9:18:53">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="22" SelectionLength="0">this.visible = value;
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="get_Enabled:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/24 23:42:43">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="21" SelectionLength="0">return this.enabled;
</Source>
          <HAFunc Type="Public" Text="set_Enabled:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 9:18:55">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="22" SelectionLength="0">this.enabled = value;
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="get_FixAngle:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/21 15:12:04">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="22" SelectionLength="0">return this.fixAngle;
</Source>
          <HAFunc Type="Public" Text="set_FixAngle:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 9:18:57">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="23" SelectionLength="0">this.fixAngle = value;
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="get_ToolTipText:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/24 23:42:34">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="25" SelectionLength="0">return this.toolTipText;
</Source>
          <HAFunc Type="Public" Text="set_ToolTipText:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 9:18:59">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="26" SelectionLength="0">this.toolTipText = value;
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="get_Resizable:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/30 13:33:21">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="23" SelectionLength="0">return this.resizable;
</Source>
          <HAFunc Type="Public" Text="set_Resizable:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 9:19:01">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="24" SelectionLength="0">this.resizable = value;
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="get_Order:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/11 17:56:15">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="19" SelectionLength="0">return this.order;
</Source>
          <HAFunc Type="Public" Text="set_Order:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 11:03:25">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="20" SelectionLength="0">this.order = value;
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="get_FrontMost:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/12 10:38:17">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="23" SelectionLength="0">return this.frontMost;
</Source>
          <HAFunc Type="Public" Text="set_FrontMost:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/12 10:38:08">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="47" SelectionLength="0">this.frontMost = value;
this.backMost = false;
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="get_BackMost:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/12 10:37:55">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="22" SelectionLength="0">return this.backMost;
</Source>
          <HAFunc Type="Public" Text="set_BackMost:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/12 10:37:50">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="47" SelectionLength="0">this.frontMost = false;
this.backMost = value;
</Source>
          </HAFunc>
        </HAFunc>
      </HAFunc>
      <HAFunc Type="Folder" Text="描画" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/20 11:07:30">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="Draw:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/11 16:51:53">
          <Arguments>
            <HAObject Type="Private" Text="g:Graphics" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/05/20 0:21:37" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="32" SelectionLength="0">if (!this.CheckDraw(g)) return;
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="CheckDraw:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/11 16:49:07">
          <Arguments>
            <HAObject Type="Private" Text="g:Graphics" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/11 16:48:07" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="195" SelectionLength="0">float sc = Geometry.GetScale(g.Transform);
if (Math.Abs(this.rect.Width * sc) &lt; 2 &amp;&amp; Math.Abs(this.rect.Height * sc) &lt; 2)
{
	CanvasRectangle.DrawRectangle(this, g);
	return false;
}
return true;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_Pen:Pen" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/17 23:03:41">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="17" SelectionLength="0">return this.pen;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="set_Pen:Pen" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/05/13 17:48:43">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="18" SelectionLength="0">this.pen = value;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_Brush:Brush" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/22 22:30:46">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0">return this.brush;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="set_Brush:Brush" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/22 22:30:48">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="20" SelectionLength="0">this.brush = value;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="GetThumbnailImage:Image" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/02 16:24:00">
          <Arguments>
            <HAObject Type="Private" Text="width:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/02 8:07:14" />
            <HAObject Type="Private" Text="height:int" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/02 8:07:22" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="468" SelectionLength="0">RectangleF r = this.crect;
Bitmap ret = new Bitmap(width, height);
Matrix m = new Matrix();
float zx = (r.Width  &gt;= 10) ? (float)(width  - 1) / r.Width  : 1;
float zy = (r.Height &gt;= 10) ? (float)(height - 1) / r.Height : 1;
m.Scale(zx, zy);
if (r.Width  &lt; 10) m.Translate((width  - r.Width ) / 2, 0);
if (r.Height &lt; 10) m.Translate(0, (height - r.Height) / 2);
Graphics g = Graphics.FromImage(ret);
g.Transform = m;
this.Draw(g);
g.Dispose();
m.Dispose();
return ret;
</Source>
        </HAFunc>
      </HAFunc>
      <HAFunc Type="Folder" Text="座標" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/25 10:13:29">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="get_Bounds:RectangleF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 11:53:57">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="18" SelectionLength="0">return this.rect;
</Source>
          <HAFunc Type="Public" Text="get_Location:PointF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:49:14">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="27" SelectionLength="0">return this.rect.Location;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_Size:SizeF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:49:18">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="23" SelectionLength="0">return this.rect.Size;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_Left:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:49:22">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="23" SelectionLength="0">return this.rect.Left;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_Top:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:49:26">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="22" SelectionLength="0">return this.rect.Top;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_Right:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:49:29">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="24" SelectionLength="0">return this.rect.Right;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_Bottom:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:49:37">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="23" SelectionLength="0">return this.rect.Bottom;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_Width:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:49:40">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="24" SelectionLength="0">return this.rect.Width;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_Height:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:49:44">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="25" SelectionLength="0">return this.rect.Height;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_CenterPoint:PointF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:49:56">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="38" SelectionLength="0">return Geometry.GetCenter(this.rect);
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="set_Bounds:RectangleF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/02 15:16:39">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="219" SelectionLength="0">RectangleF r = this.rect;
this.rect = value;
this.SetClientRectangles();

if (this.rect.Location != r.Location)
{
	this.OnMove(EventArgs.Empty);
}
else if (this.rect.Size != r.Size)
{
	this.OnResize(EventArgs.Empty);
}
</Source>
          <HAFunc Type="Public" Text="set_Location:PointF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:50:00">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="29" SelectionLength="0">this.Bounds = new RectangleF(value, this.rect.Size);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="set_Size:SizeF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:50:03">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="57" SelectionLength="0">this.Bounds = new RectangleF(this.rect.Location, value);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="set_Left:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:50:07">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="30" SelectionLength="0">RectangleF r = this.rect;
r.X = value;
this.Bounds = r;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="set_Top:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:50:09">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="29" SelectionLength="0">RectangleF r = this.rect;
r.Y = value;
this.Bounds = r;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="set_Right:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:50:11">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="66" SelectionLength="0">RectangleF r = this.rect;
r.X = value - r.Width;
this.Bounds = r;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="set_Bottom:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:50:13">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="67" SelectionLength="0">RectangleF r = this.rect;
r.Y = value - r.Height;
this.Bounds = r;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="set_Width:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:50:15">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="60" SelectionLength="0">RectangleF r = this.rect;
r.Width = value;
this.Bounds = r;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="set_Height:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:50:20">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="61" SelectionLength="0">RectangleF r = this.rect;
r.Height = value;
this.Bounds = r;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="set_CenterPoint:PointF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:50:23">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="93" SelectionLength="0">this.Location = new PointF(value.X - this.rect.Width / 2F, value.Y - this.rect.Height / 2F);
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="get_MinSize:SizeF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:50:46">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="21" SelectionLength="0">return this.minSize;
</Source>
          <HAFunc Type="Public" Text="get_MinWidth:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:51:05">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="27" SelectionLength="0">return this.minSize.Width;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_MinHeight:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:51:16">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="28" SelectionLength="0">return this.minSize.Height;
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="get_MaxSize:SizeF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:51:46">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="21" SelectionLength="0">return this.maxSize;
</Source>
          <HAFunc Type="Public" Text="get_MaxWidth:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:51:41">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="15" SelectionLength="0">return this.maxSize.Width;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_MaxHeight:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:51:37">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="15" SelectionLength="0">return this.maxSize.Height;
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="set_MinSize:SizeF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:52:49">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="22" SelectionLength="0">this.minSize = value;
</Source>
          <HAFunc Type="Public" Text="set_MinWidth:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:53:11">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="28" SelectionLength="0">this.minSize.Width = value;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="set_MinHeight:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:53:17">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="29" SelectionLength="0">this.minSize.Height = value;
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="set_MaxSize:SizeF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:53:24">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="22" SelectionLength="0">this.maxSize = value;
</Source>
          <HAFunc Type="Public" Text="set_MaxWidth:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:53:29">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="26" SelectionLength="0">this.maxSize.Width = value;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="set_MaxHeight:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 13:53:33">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="29" SelectionLength="0">this.maxSize.Height = value;
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="get_ClientRectangle:RectangleF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 11:54:30">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="19" SelectionLength="0">return this.crect;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_ClientRectangles:RectangleF[]" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 11:54:32">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="21" SelectionLength="0">return this.crects;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Offset" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 11:54:38">
          <Arguments>
            <HAObject Type="Private" Text="x:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/18 4:08:55" />
            <HAObject Type="Private" Text="y:float" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/27 11:23:30" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="60" SelectionLength="0">this.Location = new PointF(this.Left + x, this.Top + y);
</Source>
          <HAFunc Type="Public" Text="Offset" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/27 11:23:54">
            <Arguments>
              <HAObject Type="Private" Text="pt:PointF" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/18 4:08:55" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="25" SelectionLength="0">this.Offset(pt.X, pt.Y);
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="get_Angle:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 11:54:55">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="19" SelectionLength="0">return this.angle;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="set_Angle:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/21 13:56:56">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="94" SelectionLength="0">while (value &gt;  180F) value -= 360F;
while (value &lt; -180F) value += 360F;
this.angle = value;
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="SetClientRectangles:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/22 21:55:18">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="62" SelectionLength="0">this.SetClientRectangle();
this.SetDefaultClientRectangles();
</Source>
          <HAFunc Type="Protected" Text="SetClientRectangle" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/25 17:50:51">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="52" SelectionLength="0">@[Rectangle(this.crect) = Rectangle(this.rect)の絶対値]
</Source>
          </HAFunc>
          <HAFunc Type="Protected" Text="SetDefaultClientRectangles" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 12:45:22">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="119" SelectionLength="0">if (this.crects == null || this.crects.Length != 1)
{
	this.crects = new RectangleF[1];
}
this.crects[0] = this.crect;
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="get_PenWidth:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/27 11:56:25">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="49" SelectionLength="0">return (this.pen != null) ? this.pen.Width : 1F;
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="OnMove:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/02 15:15:55">
          <Arguments>
            <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/02 15:15:55" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
        </HAFunc>
        <HAFunc Type="Protected" Text="OnResize:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/02 15:15:50">
          <Arguments>
            <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/02 15:15:50" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
        </HAFunc>
        <HAFunc Type="Public" Text="MemorizeStatus:virtual" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/07/12 9:55:20">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="56" SelectionLength="0">this.prevRect = this.rect;
this.prevAngle = this.angle;
</Source>
          <HAFunc Type="Public" Text="RestoreStatus:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 16:14:58">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="58" SelectionLength="0">this.Bounds = this.prevRect;
this.Angle = this.prevAngle;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_MemorizedBounds:RectangleF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 16:13:00">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="22" SelectionLength="0">return this.prevRect;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_MemorizedAngle:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 16:13:25">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="23" SelectionLength="0">return this.prevAngle;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_TagBounds:virtual object" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/07/12 10:03:51">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="22" SelectionLength="0">return this.prevRect;
</Source>
            <HAFunc Type="Public" Text="set_TagBounds:virtual object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/12 9:55:53">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="33" SelectionLength="0">this.Bounds = (RectangleF)value;
</Source>
            </HAFunc>
          </HAFunc>
        </HAFunc>
      </HAFunc>
      <HAFunc Type="Folder" Text="交差" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/05/13 16:05:07">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="Rotate" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/23 14:13:40">
          <Arguments>
            <HAObject Type="Private" Text="matrix:Matrix" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/21 21:48:09" />
            <HAObject Type="Private" Text="angle:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/21 21:48:11" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="108" SelectionLength="0">float an = this.angle;
if (this.fixAngle) an -= angle;
if (an != 0F) matrix.RotateAt(an, this.CenterPoint);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Contains:virtual bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/24 16:00:17">
          <Arguments>
            <HAObject Type="Private" Text="matrix:Matrix" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/21 21:54:02" />
            <HAObject Type="Private" Text="angle:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/21 15:35:31" />
            <HAObject Type="Private" Text="pt:PointF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/05/13 15:53:34" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="203" SelectionLength="0">Matrix m = matrix.Clone();
this.Rotate(m, angle);
m.Invert();
pt = Geometry.TransformPoint(m, pt);
m.Dispose();

foreach (RectangleF r in this.crects)
{
	if (r.Contains(pt)) return true;
}
return false;
</Source>
          <HAFunc Type="Public" Text="Contains:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/21 21:58:40">
            <Arguments>
              <HAObject Type="Private" Text="matrix:Matrix" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/21 21:58:35" />
              <HAObject Type="Private" Text="angle:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/21 15:35:37" />
              <HAObject Type="Private" Text="x:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/05/13 15:53:34" />
              <HAObject Type="Private" Text="y:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/05/13 16:04:07" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="55" SelectionLength="0">return this.Contains(matrix, angle, new PointF(x, y));
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="IntersectsWith:virtual bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/24 16:00:39">
          <Arguments>
            <HAObject Type="Private" Text="matrix:Matrix" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/21 21:43:51" />
            <HAObject Type="Private" Text="angle:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/21 15:34:13" />
            <HAObject Type="Private" Text="rect:RectangleF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/05/13 15:50:39" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="278" SelectionLength="0">Matrix m = matrix.Clone();
this.Rotate(m, angle);
bool ret = false;
foreach (RectangleF r in this.crects)
{
	PointF[] quad = Geometry.ConvertToPoints(r);
	m.TransformPoints(quad);
	if (Geometry.IntersectsWith(rect, quad))
	{
		ret = true;
		break;
	}
}
m.Dispose();
return ret;
</Source>
          <HAFunc Type="Public" Text="IntersectsWith:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/24 16:24:06">
            <Arguments>
              <HAObject Type="Private" Text="matrix:Matrix" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/21 21:43:51" />
              <HAObject Type="Private" Text="angle:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/21 15:34:13" />
              <HAObject Type="Private" Text="x:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/05/13 15:50:39" />
              <HAObject Type="Private" Text="y:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/24 16:23:41" />
              <HAObject Type="Private" Text="width:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/24 16:23:43" />
              <HAObject Type="Private" Text="height:float" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/24 16:23:45" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="64" SelectionLength="0">return this.IntersectsWith(matrix, angle, x, y, width, height);
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="IsContainedWith:virtual bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/24 16:01:22">
          <Arguments>
            <HAObject Type="Private" Text="matrix:Matrix" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/21 21:58:22" />
            <HAObject Type="Private" Text="angle:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/21 15:35:31" />
            <HAObject Type="Private" Text="rect:RectangleF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/05/13 15:53:34" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="273" SelectionLength="0">Matrix m = matrix.Clone();
this.Rotate(m, angle);
bool ret = true;
foreach (RectangleF r in this.crects)
{
	PointF[] quad = Geometry.ConvertToPoints(r);
	m.TransformPoints(quad);
	if (!Geometry.Contains(rect, quad))
	{
		ret = false;
		break;
	}
}
m.Dispose();
return ret;
</Source>
          <HAFunc Type="Public" Text="IsContainedWith:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/21 21:59:12">
            <Arguments>
              <HAObject Type="Private" Text="matrix:Matrix" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/21 21:58:58" />
              <HAObject Type="Private" Text="angle:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/21 15:35:37" />
              <HAObject Type="Private" Text="x:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/05/13 15:53:34" />
              <HAObject Type="Private" Text="y:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/05/13 16:04:07" />
              <HAObject Type="Private" Text="width:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/21 16:51:48" />
              <HAObject Type="Private" Text="height:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/21 16:51:51" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="81" SelectionLength="0">return this.IsContainedWith(matrix, angle, new RectangleF(x, y, width, height));
</Source>
          </HAFunc>
        </HAFunc>
      </HAFunc>
      <HAFunc Type="Folder" Text="編集" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/07/12 11:11:07">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="InitSelection:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 21:58:06">
          <Arguments>
            <HAObject Type="Private" Text="sel:CanvasObjectSelection" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/23 5:10:33" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="217" SelectionLength="0">sel.Borders = new CanvasObject[] {new CanvasPolygon(), new CanvasPolygon()};
sel.Borders[0].Pen = SystemPens.Highlight;

sel.Corners = new CanvasCorner[0];
for (int i = 0; i &lt; 8; i++) sel.Add(new CanvasCorner(this));
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="SetSelection:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 20:03:04">
          <Arguments>
            <HAObject Type="Private" Text="sel:CanvasObjectSelection" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/23 20:16:27" />
            <HAObject Type="Private" Text="transform:Matrix" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/23 5:07:25" />
            <HAObject Type="Private" Text="angle:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/23 5:08:03" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="749" SelectionLength="0">PointF[] pts = Geometry.ConvertToPoints(this.rect);
PointF cpt = this.CenterPoint;
float sc = 7 / Geometry.GetScale(transform);
pts[0] = Geometry.Inflate(pts[0].X, pts[0].Y, cpt.X, cpt.Y, sc, sc, -1, -1);
pts[1] = Geometry.Inflate(pts[1].X, pts[1].Y, cpt.X, cpt.Y, sc, sc,  1, -1);
pts[2] = Geometry.Inflate(pts[2].X, pts[2].Y, cpt.X, cpt.Y, sc, sc,  1,  1);
pts[3] = Geometry.Inflate(pts[3].X, pts[3].Y, cpt.X, cpt.Y, sc, sc, -1,  1);

Matrix m = transform.Clone();
this.Rotate(m, angle);
m.TransformPoints(pts);
m.Dispose();

CanvasPolygon poly = sel.Borders[0] as CanvasPolygon;
poly.Location = PointF.Empty;
poly.Points = pts;

sel.Corners[0].CenterPoint = pts[0];
sel.Corners[1].CenterPoint = Geometry.GetCenter(pts[0], pts[1]);
sel.Corners[2].CenterPoint = pts[1];
sel.Corners[3].CenterPoint = Geometry.GetCenter(pts[0], pts[3]);
sel.Corners[4].CenterPoint = Geometry.GetCenter(pts[1], pts[2]);
sel.Corners[5].CenterPoint = pts[3];
sel.Corners[6].CenterPoint = Geometry.GetCenter(pts[3], pts[2]);
sel.Corners[7].CenterPoint = pts[2];

if (this.resizable)
{
	PointF cp = Geometry.GetCenter(pts);
	float an = Geometry.GetAngle(cp, sel.Corners[1].CenterPoint);
	if (an &lt; 0F) an += 180F;
	int cur = (int)((an + 22.5F) / 45F);
	sel.Corners[1].Cursor = sel.Corners[6].Cursor = CursorSizes[cur &amp; 3];
	sel.Corners[3].Cursor = sel.Corners[4].Cursor = CursorSizes[(cur + 2) &amp; 3];
	if (sel.Corners[0].Left &gt; sel.Corners[1].Left) cur += 2;
	if (sel.Corners[0].Top  &gt; sel.Corners[3].Top ) cur += 2;
	sel.Corners[0].Cursor = sel.Corners[7].Cursor = CursorSizes[(cur - 1) &amp; 3];
	sel.Corners[2].Cursor = sel.Corners[5].Cursor = CursorSizes[(cur + 1) &amp; 3];
}
else
{
	foreach (CanvasCorner cc in sel.Corners)
	{
		cc.Cursor = Cursors.Default;
	}
}
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Resize:virtual" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 10:20:48">
          <Arguments>
            <HAObject Type="Private" Text="corner:CanvasCorner" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/13 19:13:41" />
            <HAObject Type="Private" Text="x:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/11 16:31:21" />
            <HAObject Type="Private" Text="y:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/23 11:27:36" />
            <HAObject Type="Private" Text="transform:Matrix" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/11 15:47:46" />
            <HAObject Type="Private" Text="angle:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/11 15:47:50" />
            <HAObject Type="Private" Text="modifier:Keys" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/07 6:58:27" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="584" SelectionLength="0">int index = corner.Index;
Matrix m1 = transform.Clone();
this.Rotate(m1, angle);
PointF cpt1 = this.CenterPoint;
PointF cpt2 = Geometry.TransformPoint(m1, cpt1);
m1.Invert();
PointF pt = Geometry.TransformPoint(m1,
	Geometry.Inflate(x, y, cpt2.X, cpt2.Y, -7, -7, 0, 0));
m1.Dispose();

float x1 = this.rect.Left, y1 = this.rect.Top;
float x2 = this.rect.Right, y2 = this.rect.Bottom;
float rx1 = this.prevRect.Left, ry1 = this.prevRect.Top;
float rx2 = this.prevRect.Right, ry2 = this.prevRect.Bottom;
float rw = this.prevRect.Width, rh = this.prevRect.Height;
bool shift = false; ///(modifier &amp; Keys.Shift) != 0;

if (index == 0 || index == 3 || index == 5)
{
	float dx = x2 - pt.X;
	if (minSize.Width &gt; 0 &amp;&amp; Math.Abs(dx) &lt; minSize.Width)
		if (dx &gt; 0) pt.X = x2 - minSize.Width;
		else        pt.X = x2 + minSize.Width;
	if (maxSize.Width &gt; 0 &amp;&amp; Math.Abs(dx) &gt; maxSize.Width)
		if (dx &gt; 0) pt.X = x2 - maxSize.Width;
		else        pt.X = x2 + maxSize.Width;
	x1 = pt.X;
	if (shift)
	{
		float dh = rh * Math.Abs(rx2 - x1) / rw - rh;
		if (index == 0)
		{
			y1 = ry1 - dh;
		}
		else if (index == 5)
		{
			y2 = ry2 + dh;
		}
		else
		{
			y1 = ry1 - dh / 2;
			y2 = ry2 + dh / 2;
		}
	}
}
else if (index == 2 || index == 4 || index == 7)
{
	float dx = pt.X - x1;
	if (minSize.Width &gt; 0 &amp;&amp; Math.Abs(dx) &lt; minSize.Width)
		if (dx &gt; 0) pt.X = x1 + minSize.Width;
		else        pt.X = x1 - minSize.Width;
	if (maxSize.Width &gt; 0 &amp;&amp; Math.Abs(dx) &gt; maxSize.Width)
		if (dx &gt; 0) pt.X = x1 + maxSize.Width;
		else        pt.X = x1 - maxSize.Width;
	x2 = pt.X;
	if (shift)
	{
		float dh = rh * Math.Abs(x2 - rx1) / rw - rh;
		if (index == 2)
		{
			y1 = ry1 - dh;
		}
		else if (index == 7)
		{
			y2 = ry2 + dh;
		}
		else
		{
			y1 = ry1 - dh / 2;
			y2 = ry2 + dh / 2;
		}
	}
}
if ((!shift &amp;&amp; index == 0) || index == 1 || (!shift &amp;&amp; index == 2))
{
	float dy = y2 - pt.Y;
	if (minSize.Height &gt; 0 &amp;&amp; Math.Abs(dy) &lt; minSize.Height)
		if (dy &gt; 0) pt.Y = y2 - minSize.Height;
		else        pt.Y = y2 + minSize.Height;
	if (maxSize.Height &gt; 0 &amp;&amp; Math.Abs(dy) &gt; maxSize.Height)
		if (dy &gt; 0) pt.Y = y1 - maxSize.Height;
		else        pt.Y = y1 + maxSize.Height;
	y1 = pt.Y;
}
else if ((!shift &amp;&amp; index == 5) || index == 6 || (!shift &amp;&amp; index == 7))
{
	float dy = pt.Y - y1;
	if (minSize.Height &gt; 0 &amp;&amp; Math.Abs(dy) &lt; minSize.Height)
		if (dy &gt; 0) pt.Y = y1 + minSize.Height;
		else        pt.Y = y1 - minSize.Height;
	if (maxSize.Height &gt; 0 &amp;&amp; Math.Abs(dy) &gt; maxSize.Height)
		if (dy &gt; 0) pt.Y = y1 + maxSize.Height;
		else        pt.Y = y1 - maxSize.Height;
	y2 = pt.Y;
}
this.Bounds = RectangleF.FromLTRB(x1, y1, x2, y2);

this.AdjustPosition(cpt1, angle);
</Source>
          <HAFunc Type="Public" Text="CancelResize:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 0:54:47">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="22" SelectionLength="0">this.RestoreStatus();
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="EndResize:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 0:53:07">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="0" SelectionLength="0" />
          </HAFunc>
          <HAFunc Type="Protected" Text="AdjustPosition" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 7:39:51">
            <Arguments>
              <HAObject Type="Private" Text="cpt:PointF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 7:39:18" />
              <HAObject Type="Private" Text="angle:float" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/14 7:39:27" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="193" SelectionLength="0">Matrix m = new Matrix();
float an = this.angle;
if (this.fixAngle) an -= angle;
if (an != 0F) m.RotateAt(an, cpt);
this.CenterPoint = Geometry.TransformPoint(m, this.CenterPoint);
m.Dispose();
</Source>
          </HAFunc>
        </HAFunc>
      </HAFunc>
      <HAFunc Type="Folder" Text="XML" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/06/26 13:41:30">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="WriteXml" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/07/12 10:42:08">
          <Arguments>
            <HAObject Type="Private" Text="serializer:CanvasSerializer" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/26 17:36:21" />
            <HAObject Type="Private" Text="xw:XmlWriter" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/26 14:19:04" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="666" SelectionLength="0">xw.WriteAttributeString("Guid", XmlConvert.ToString(this.guid));
xw.WriteAttributeString("Name", this.name);
xw.WriteAttributeString("ToolTipText", this.toolTipText);
xw.WriteAttributeString("Angle", XmlConvert.ToString(this.angle));
xw.WriteAttributeString("Visible", XmlConvert.ToString(this.visible));
xw.WriteAttributeString("Enabled", XmlConvert.ToString(this.enabled));
xw.WriteAttributeString("FixAngle" , XmlConvert.ToString(this.fixAngle));
xw.WriteAttributeString("Resizable" , XmlConvert.ToString(this.resizable));
xw.WriteAttributeString("FrontMost", XmlConvert.ToString(this.frontMost));
xw.WriteAttributeString("BackMost", XmlConvert.ToString(this.backMost));
if (this.order &gt;= 0)
{
	xw.WriteAttributeString("Order", XmlConvert.ToString(this.order));
}
//xw.WriteAttributeString("Group", XmlConvert.ToString(this.group.Guid));

serializer.WriteRectangleF(xw, "Bounds", this.rect);
if (this.pen != null) serializer.Write(xw, "Pen", this.pen);
if (this.brush != null)
{
	xw.WriteStartElement("Brush");
	serializer.Write(xw, null, this.brush);
	xw.WriteEndElement();
}

this.WriteXmlData(serializer, xw);
</Source>
          <HAFunc Type="Protected" Text="WriteXmlData:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/26 23:44:02">
            <Arguments>
              <HAObject Type="Private" Text="serializer:CanvasSerializer" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/26 23:43:48" />
              <HAObject Type="Private" Text="xw:XmlWriter" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/26 23:43:54" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="0" SelectionLength="0" />
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="ReadXml" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/07/12 10:42:34">
          <Arguments>
            <HAObject Type="Private" Text="serializer:CanvasSerializer" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/26 17:37:08" />
            <HAObject Type="Private" Text="xr:XmlReader" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/26 17:23:40" />
          </Arguments>
          <HAObject Type="Private" Text="v:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/30 13:50:52" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="1242" SelectionLength="0">if (xr.NodeType != XmlNodeType.Element) return;

string name = xr.Name;
this.guid = XmlConvert.ToGuid(xr.GetAttribute("Guid"));
this.name = xr.GetAttribute("Name");
this.ToolTipText = xr.GetAttribute("ToolTipText");
this.angle = (float)XmlConvert.ToDouble(xr.GetAttribute("Angle"));
this.visible = XmlConvert.ToBoolean(xr.GetAttribute("Visible"));
this.enabled = XmlConvert.ToBoolean(xr.GetAttribute("Enabled"));
this.fixAngle = XmlConvert.ToBoolean(xr.GetAttribute("FixAngle"));
v = xr.GetAttribute("Resizable");
if (v != null) this.resizable = XmlConvert.ToBoolean(v);
v = xr.GetAttribute("Order");
if (v != null) this.order = XmlConvert.ToInt32(v);
v = xr.GetAttribute("FrontMost");
if (v != null) this.frontMost = XmlConvert.ToBoolean(v);
v = xr.GetAttribute("BackMost");
if (v != null) this.backMost = XmlConvert.ToBoolean(v);
this.pen = null;
this.brush = null;
//Guid group = XmlConvert.ToGuid(xr.GetAttribute("Group"));
//this.group = ...;
if (xr.IsEmptyElement) return;

while (xr.Read())
{
	if (xr.Name == name &amp;&amp; xr.NodeType == XmlNodeType.EndElement)
	{
		break;
	}
	else if (xr.NodeType == XmlNodeType.Element)
	{
		this.ReadXmlData(serializer, xr);
	}
}

this.ReadXmlAdjust();
this.SetClientRectangles();
this.MemorizeStatus();
</Source>
          <HAFunc Type="Protected" Text="ReadXmlData:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/27 13:13:23">
            <Arguments>
              <HAObject Type="Private" Text="serializer:CanvasSerializer" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/26 20:07:05" />
              <HAObject Type="Private" Text="xr:XmlReader" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/26 20:07:10" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="262" SelectionLength="0">switch (xr.Name)
{
	case "Bounds":
		this.rect = serializer.ReadRectangleF(xr);
		return;
	case "Pen":
		this.pen = serializer.ReadPen(xr);
		return;
	case "Brush":
		if (serializer.ReadNext(xr))
		{
			this.brush = serializer.Read(xr) as Brush;
		}
		return;
}
</Source>
          </HAFunc>
          <HAFunc Type="Protected" Text="ReadXmlAdjust:virtual" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/09 19:19:44">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="0" SelectionLength="0" />
          </HAFunc>
        </HAFunc>
      </HAFunc>
    </HAFunc>
  </Body>
  <Footer>
    <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/05/13 14:29:16">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0" />
      <Source SelectionStart="0" SelectionLength="0" />
    </HAFunc>
  </Footer>
  <HAClass Link="CanvasLine.hacls" />
  <HAClass Link="CanvasPolygon.hacls" />
  <HAClass Link="CanvasRectangle.hacls" />
  <HAClass Link="CanvasEllipse.hacls" />
  <HAClass Link="CanvasImage.hacls" />
  <HAClass Link="CanvasString.hacls" />
  <HAClass Link="CanvasCorner.hacls" />
  <HAClass Link="CanvasGrip.hacls" />
  <HAClass Link="CanvasSeparator.hacls" />
  <HAClass Link="CanvasControl.hacls" />
</HAClass>