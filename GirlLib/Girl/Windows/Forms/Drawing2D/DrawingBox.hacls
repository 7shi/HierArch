<?xml version="1.0" encoding="utf-8"?>
<HAClass Type="Public" Text="DrawingBox:ControlEx" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/08/10 17:53:44">
  <HAObject Type="Folder" Text="Canvas" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 15:13:05">
    <HAObject Type="Protected" Text="paintManager:CanvasPaintManager" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 16:07:47" />
    <HAObject Type="Protected" Text="canvas:Canvas" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 13:15:53" />
    <HAObject Type="Protected" Text="frontCanvas:Canvas" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/20 11:05:19">
      <HAObject Type="Protected" Text="group1:CanvasGroup" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/26 0:56:25">
        <HAObject Type="Protected" Text="compass1:CanvasEllipse" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/20 11:20:05" />
        <HAObject Type="Protected" Text="compass2:CanvasEllipse" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/20 11:20:11" />
        <HAObject Type="Protected" Text="compass3:CanvasLine" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/20 11:20:21" />
        <HAObject Type="Protected" Text="compass4:CanvasLine" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/20 11:20:31" />
      </HAObject>
      <HAObject Type="Protected" Text="group2:CanvasGroup" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/26 1:09:16">
        <HAObject Type="Protected" Text="rotate1:CanvasEllipse" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/21 22:54:21" />
        <HAObject Type="Protected" Text="rotate2:CanvasImage" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/21 22:54:40" />
      </HAObject>
      <HAObject Type="Protected" Text="selBox:CanvasRectangle" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/21 14:06:20" />
      <HAObject Type="Protected" Text="vline:CanvasLine" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/03 2:29:03" />
      <HAObject Type="Protected" Text="hline:CanvasLine" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/03 2:29:08" />
      <HAObject Type="Protected" Text="zoomInfo:CanvasString" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/12 5:55:56" />
    </HAObject>
    <HAObject Type="Protected" Text="backCanvas:Canvas" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/02 9:10:35">
      <HAObject Type="Protected" Text="printBox:CanvasRectangle" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/02 9:13:16" />
    </HAObject>
    <HAObject Type="Protected" Text="standardAngle:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 13:27:33" />
  </HAObject>
  <HAObject Type="Folder" Text="Mouse Button" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 22:59:42">
    <HAObject Type="Protected" Text="prevEvent:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/10 14:30:28" />
    <HAObject Type="Protected" Text="prevPos:PointF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 18:40:02" />
    <HAObject Type="Protected" Text="origAngle:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 22:50:50" />
    <HAObject Type="Protected" Text="prevAngle:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 23:03:25" />
    <HAObject Type="Protected" Text="preSels:CanvasObject[]" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/22 19:39:20" />
    <HAObject Type="Protected" Text="corner:CanvasCorner" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/23 9:48:34" />
    <HAObject Type="Protected" Text="rotateCenter:PointF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/02 1:41:57" />
    <HAObject Type="Protected" Text="cmnPos:Point" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 13:56:13" />
  </HAObject>
  <HAObject Type="Folder" Text="Context Menu" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/16 22:47:57">
    <HAObject Type="Public" Text="Menu:DrawingBoxContextMenu" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/16 22:44:07" />
    <HAObject Type="Public" Text="cmnPath:ContextMenu" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/12 7:57:49">
      <HAObject Type="Public" Text="mnuPathMakeVertex:MenuItem" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/12 7:58:00" />
      <HAObject Type="Public" Text="mnuPathRemove:MenuItem" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/12 7:59:11" />
    </HAObject>
    <HAObject Type="Public" Text="cmnRightDrag:ContextMenu" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 0:27:30">
      <HAObject Type="Public" Text="mnuRightDragMoveTo:MenuItem" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 0:28:11" />
      <HAObject Type="Public" Text="mnuRightDragCopyTo:MenuItem" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 0:27:43" />
    </HAObject>
    <HAObject Type="Public" Text="cmnZoom:ContextMenu" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 15:02:42" />
  </HAObject>
  <HAObject Type="Public" Text="Serializer:CanvasSerializer" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/27 9:32:04" />
  <HAObject Type="Public" Text="Changed:event EventHandler" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/26 13:28:08">
    <HAObject Type="Protected" Text="opsUndo:Stack" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 11:21:33" />
    <HAObject Type="Protected" Text="opsRedo:Stack" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 13:53:27" />
  </HAObject>
  <HAObject Type="Protected" Text="addItem:CanvasObject" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 2:19:14" />
  <Header>
    <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/07/01 15:39:04">
      <Arguments />
      <Comment SelectionStart="19" SelectionLength="0">ここにソースコードの注釈を書きます。
</Comment>
      <Source SelectionStart="0" SelectionLength="0">using System;
using System.Collections;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.IO;
using System.Text;
using System.Windows.Forms;
using System.Xml;
using Girl.Drawing;
using Girl.Windows.Forms;
</Source>
    </HAFunc>
  </Header>
  <Body>
    <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false" LastModified="2003/07/14 2:34:46">
      <Arguments />
      <Comment SelectionStart="37" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
      <Source SelectionStart="531" SelectionLength="0">public const float WheelZoomUpScale = 6F / 5F;
public const float WheelZoomDownScale = 1F / WheelZoomUpScale;

public class Operation
{
	public string Name;
	public Guid Guid;
	public object Tag;
	
	public Operation(string name) : this(name, Guid.Empty, null) {}
	public Operation(string name, object tag) : this(name, Guid.Empty, tag) {}
	public Operation(string name, Guid guid) : this(name, guid, null) {}
	
	public Operation(string name, Guid guid, object tag)
	{
		this.Name = name;
		this.Guid = guid;
		this.Tag = tag;
	}
}
</Source>
      <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/17 0:41:29">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="671" SelectionLength="0">this.SetStyle(ControlStyles.DoubleBuffer
	| ControlStyles.UserPaint
	| ControlStyles.AllPaintingInWmPaint,
	true);
this.AcceptsArrow = true;
this.BackColor = SystemColors.Window;

this.prevEvent = null;
this.standardAngle = 0F;
this.prevPos = PointF.Empty;
this.origAngle = this.prevAngle = 0F;
this.preSels = null;
this.corner = null;
this.Serializer = new CanvasSerializer();
this.rotateCenter = Point.Empty;
this.cmnPos = Point.Empty;
this.addItem = null;

this.opsUndo = new Stack();
this.opsRedo = new Stack();

this.InitContextMenu();
this.InitCanvas();
this.Transform = new Matrix();
this.canvas.SelectionChanged += new EventHandler(this.canvas_SelectionChanged);
</Source>
        <HAFunc Type="Protected" Text="InitContextMenu:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/16 22:49:23">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="18" SelectionLength="0">this.Menu = null;

cmnPath = new ContextMenu(new MenuItem[]
{
	mnuPathMakeVertex = new MenuItem("頂点化(&amp;V)", new EventHandler(AddVertex)),
	mnuPathRemove = new MenuItem("削除(&amp;D)", new EventHandler(RemoveVertex))
});

cmnRightDrag = new ContextMenu(new MenuItem[]
{
	mnuRightDragMoveTo = new MenuItem("ここへ移動(&amp;M)", new EventHandler(MoveTo)),
	mnuRightDragCopyTo = new MenuItem("ここへコピー(&amp;C)", new EventHandler(CopyTo)),
	new MenuItem("-"),
	new MenuItem("キャンセル(&amp;A)")
});

cmnZoom = new ContextMenu();
EventHandler ehz = new EventHandler(SetZoom);
foreach (int z in new int[]
	{
		1, 5, 10, 25, 50, 75, 100, 150, 200, 300, 400, 500,
		600, 800, 1000, 1200, 1500, 2000, 2500, 3000
	})
{
	cmnZoom.MenuItems.Add(string.Format("{0}%", z), ehz);
}
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="InitCanvas:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 17:28:36">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="368" SelectionLength="0">this.backCanvas = new Canvas(this);
this.printBox = new CanvasRectangle();
this.printBox.Pen = new Pen(Color.Indigo, 4);
this.printBox.Visible = false;
this.backCanvas.Items.Add(this.printBox);

this.paintManager = new CanvasPaintManager(this);
this.canvas = new Canvas(this.paintManager);
this.paintManager.CanvasCollection.Add(this.canvas);

this.InitFrontCanvas();
</Source>
          <HAFunc Type="Protected" Text="InitFrontCanvas:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/12 5:57:31">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="1800" SelectionLength="0">this.frontCanvas = new Canvas(this);
this.frontCanvas.PaintManager.SmoothingMode = SmoothingMode.AntiAlias;

this.group1 = new CanvasGroup();
this.compass1 = new CanvasEllipse(0, 0, 64, 64);
this.compass1.Brush = new SolidBrush(Color.FromArgb(192, 192, 255, 255));
this.compass1.Group = this.group1;
this.compass2 = new CanvasEllipse(0, 0, 64, 64);
this.compass2.Pen = new Pen(Color.Black, 2F);
this.compass2.Group = this.group1;
AdjustableArrowCap arrow = new AdjustableArrowCap(6, 6, false);
this.compass3 = new CanvasLine(32, 0, 0, 64);
this.compass3.Pen = new Pen(Color.FromArgb(192, 255, 128, 128), 2F);
this.compass3.Pen.CustomStartCap = arrow;
this.compass3.Group = this.group1;
this.compass4 = new CanvasLine(0, 32, 64, 0);
this.compass4.Pen = new Pen(Color.Black, 2F);
this.compass4.Pen.CustomStartCap = arrow;
this.compass4.Group = this.group1;

this.selBox = new CanvasRectangle();
this.selBox.Pen = new Pen(Color.Black);
this.selBox.Brush = new SolidBrush(Color.Gray);
this.SetSelBoxColor();
this.selBox.Visible = false;

this.group2 = new CanvasGroup();
this.group2.Visible = false;
Size sz = Cursors.NoMove2D.Size;
this.rotate1 = new CanvasEllipse(0, 0, sz.Width, sz.Height);
this.rotate1.Brush = new SolidBrush(Color.FromArgb(128, 192, 192, 192));
this.rotate1.Group = this.group2;
this.rotate2 = new CanvasImage(Canvas.CreateBitmap(Cursors.NoMove2D));
this.rotate2.Group = this.group2;

this.vline = new CanvasLine();
this.hline = new CanvasLine();
this.vline.Pen = this.hline.Pen = new Pen(Color.Red);
this.vline.Visible = this.hline.Visible = false;

this.zoomInfo = new CanvasString();

this.frontCanvas.Items.AddRange(new object[]
{
	this.selBox, this.vline, this.hline,
	this.rotate2, this.rotate1,
	this.zoomInfo,
	this.compass4, this.compass3, this.compass2, this.compass1
});
</Source>
          </HAFunc>
          <HAFunc Type="Protected" Text="SetSelBoxColor" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/06 1:09:23">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="197" SelectionLength="0">Color c1 = SystemColors.Highlight;
Color c2 = ImageManipulator.Mix(c1, this.BackColor);
this.selBox.Pen.Color = c1;
(this.selBox.Brush as SolidBrush).Color = Color.FromArgb(128, c2.R, c2.G, c2.B);
</Source>
          </HAFunc>
        </HAFunc>
      </HAFunc>
      <HAFunc Type="Folder" Text="Properties" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 23:04:38">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="get_Canvas:Canvas" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 13:20:51">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="20" SelectionLength="0">return this.canvas;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_FrontCanvas:Canvas" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/20 11:11:09">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="25" SelectionLength="0">return this.frontCanvas;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_BackCanvas:Canvas" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/02 9:12:10">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="24" SelectionLength="0">return this.backCanvas;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_ShowCompass:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/26 0:59:43">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="28" SelectionLength="0">return this.group1.Visible;
</Source>
          <HAFunc Type="Public" Text="set_ShowCompass:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/10 15:20:05">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="71" SelectionLength="0">this.group1.Visible = value;
this.frontCanvas.Invalidate(this.group1);
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="get_StandardAngle:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 13:27:57">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="27" SelectionLength="0">return this.standardAngle;
</Source>
          <HAFunc Type="Public" Text="set_StandardAngle:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/10 15:20:07">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="47" SelectionLength="0">this.standardAngle = value;
this.SetCompass();
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="get_PaintManager:CanvasPaintManager" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 16:08:13">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="26" SelectionLength="0">return this.paintManager;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_CanCopy:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/27 12:11:15">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="89" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
return sels != null &amp;&amp; sels.Length &gt; 0;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_CanPaste:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/27 10:33:24">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="66" SelectionLength="0">return Clipboard.GetDataObject().GetDataPresent(this.DataFormat);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_Transform:virtual Matrix" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/02 9:17:10">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="30" SelectionLength="0">return this.canvas.Transform;
</Source>
          <HAFunc Type="Public" Text="set_Transform:virtual Matrix" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/10 15:20:11">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="59" SelectionLength="0">this.backCanvas.Transform = this.canvas.Transform = value;
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="get_XmlElement:virtual string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/27 10:31:44">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="17" SelectionLength="0">return "Canvas";
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_DataFormat:virtual string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/27 10:32:10">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="34" SelectionLength="0">return this.XmlElement + "Items";
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_PrintBox:CanvasRectangle" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/02 9:52:49">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="22" SelectionLength="0">return this.printBox;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_CanUndo:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/10 15:21:37">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0">return this.opsUndo.Count &gt; 0;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_CanRedo:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 23:29:44">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0">return this.opsRedo.Count &gt; 0;
</Source>
        </HAFunc>
      </HAFunc>
      <HAFunc Type="Folder" Text="Event Handlers" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/06/24 11:35:39">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Protected" Text="OnSizeChanged:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/12 5:58:33">
          <Arguments>
            <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/19 16:59:14" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="63" SelectionLength="0">base.OnSizeChanged(e);

this.SetCompass();
this.SetZoomInfo();
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="OnMouseDown:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 3:17:19">
          <Arguments>
            <HAObject Type="Private" Text="e:MouseEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/19 22:44:02" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="143" SelectionLength="0">if (!this.Focused) this.Focus();
if (e.Button == MouseButtons.Middle)
{
	this.prevEvent = this.eventStatus;
	this.OnCancelEvent(EventArgs.Empty);
}
base.OnMouseDown(e);
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="OnMouseMove:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/11 21:08:49">
          <Arguments>
            <HAObject Type="Private" Text="e:MouseEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/19 22:44:02" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="56" SelectionLength="0">if (this.vline.Visible) this.SetLines();
this.SetCursor();
if (e.Button == MouseButtons.None) return;

base.OnMouseMove(e);
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="OnMouseWheel:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 14:36:55">
          <Arguments>
            <HAObject Type="Private" Text="e:MouseEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/19 22:44:02" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="154" SelectionLength="0">base.OnMouseWheel(e);
if (e.Delta == 0) return;

PointF pt = this.PointToCanvas(this.rotateCenter);

float sc = this.canvas.Scale, zoom;
if (e.Delta &lt; 0)
{
	if (sc &lt; 0.01F) return;
	zoom = __CLASS.WheelZoomDownScale;
}
else
{
	if (sc &gt; 30F) return;
	zoom = __CLASS.WheelZoomUpScale;
}
this.canvas.ScaleAt(zoom, this.PointToCanvas(e.X, e.Y));

CanvasObject sel = this.canvas.SelectedItem;
if (sel == null)
{
	this.rotateCenter = this.PointFromCanvas(pt);
}
else
{
	this.rotateCenter = this.PointFromCanvas(sel.CenterPoint);
}
this.rotate1.CenterPoint = this.rotate2.CenterPoint = this.rotateCenter;

this.Invalidate();
this.SetCursor();
this.SetZoomInfo();
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="OnDoubleClick:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 3:17:47">
          <Arguments>
            <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/13 14:02:19" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="171" SelectionLength="0">base.OnDoubleClick(e);

if (this.prevButton == MouseButtons.Middle)
{
	this.OnCancelEvent(e);
	this.SetZoom(1, this.PointToCanvas(this.PointToClient(Cursor.Position)));
}
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="OnKeyDown:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/16 22:41:13">
          <Arguments>
            <HAObject Type="Private" Text="e:KeyEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/24 10:31:01" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="430" SelectionLength="0">base.OnKeyDown(e);

switch (e.KeyCode)
{
	case Keys.Delete:
		this.Delete(this, EventArgs.Empty);
		break;
	case Keys.Home:
		this.MoveOrigin(this, EventArgs.Empty);
		break;
	case Keys.Left:
		this.ArrowMove(-1, 0, e.Modifiers);
		break;
	case Keys.Up:
		this.ArrowMove(0, -1, e.Modifiers);
		break;
	case Keys.Right:
		this.ArrowMove(1, 0, e.Modifiers);
		break;
	case Keys.Down:
		this.ArrowMove(0, 1, e.Modifiers);
		break;
}
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="OnKeyUp:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/16 22:45:46">
          <Arguments>
            <HAObject Type="Private" Text="e:KeyEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/24 10:31:01" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="478" SelectionLength="0">base.OnKeyUp(e);

if (e.KeyCode == Keys.Apps)
{
	CanvasObject sel = this.canvas.SelectedItem;
	CanvasObject[] sels = this.canvas.SelectedItems;
	if (sel != null)
	{
		this.clickPoint = Point.Truncate(this.PointFromCanvas(sel.CenterPoint));
	}
	else
	{
		this.clickPoint = this.CenterPoint;
	}
	if (sels != null)
	{
		if (this.Menu != null) this.Menu.cmnItem.Show(this, this.clickPoint);
	}
	else
	{
		if (this.Menu != null) this.Menu.cmnCanvas.Show(this, this.clickPoint);
	}
}
</Source>
        </HAFunc>
        <HAFunc Type="Private" Text="canvas_SelectionChanged" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/16 23:48:41">
          <Arguments>
            <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/06 17:14:15" />
            <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/06 17:14:20" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="68" SelectionLength="0">if (this.Menu != null) this.Menu.OnSetMenuEnabled(EventArgs.Empty);
</Source>
        </HAFunc>
        <HAFunc Type="Folder" Text="拡張イベント" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 15:12:23">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Protected" Text="OnPrepareEvent:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 3:43:23">
            <Arguments>
              <HAObject Type="Private" Text="e:MouseEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/07 7:04:24" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="220" SelectionLength="0">this.corner = this.canvas.GetCornerAt(e.X, e.Y);
if (this.eventStatus == "PrepareRotate") this.prevAngle = this.MouseAngle;
if (this.eventStatus == null) base.OnPrepareEvent(e);
this.preSels = this.canvas.SelectedItems;
</Source>
          </HAFunc>
          <HAFunc Type="Protected" Text="OnStartEvent:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 17:57:34">
            <Arguments>
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/14 3:20:01" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="0" SelectionLength="0">CanvasObject co = this.canvas.GetItemAt(this.clickPoint);
CanvasObject[] sels = this.canvas.SelectedItems;
if (this.mouseButtons == MouseButtons.Middle
	|| (this.mouseButtons == MouseButtons.Right
	&amp;&amp; this.modifierShift &amp;&amp; this.modifierControl))
{
	this.prevPos = PointF.Empty;
	this.eventStatus = "CanvasMove";
}
else if (this.eventStatus == "PrepareSelectPrint")
{
	this.UnsetLines();
	this.SetSelBoxColor();
	this.selBox.Pen.Color = ImageManipulator.Swap(this.selBox.Pen.Color,
		PrimaryColors.Red, PrimaryColors.Blue, PrimaryColors.Green);
	SolidBrush sb = this.selBox.Brush as SolidBrush;
	sb.Color = ImageManipulator.Swap(sb.Color,
		PrimaryColors.Red, PrimaryColors.Blue, PrimaryColors.Green);
	this.eventStatus = "SelectPrint";
}
else if (this.eventStatus == "PrepareRotate")
{
	this.Cursor = Cursors.Hand;
	if (sels != null &amp;&amp; sels.Length &gt; 0)
	{
		foreach (CanvasObject sel in sels) sel.MemorizeStatus();
	}
	this.origAngle = this.canvas.Angle;
	this.eventStatus = "Rotate";
}
else if (this.eventStatus == "PrepareAddItem")
{
	this.OnStartAddItem();
}
else if (this.mouseButtons == MouseButtons.Left)
{
	if (this.modifierShift &amp;&amp; this.modifierControl)
	{
		this.eventStatus = "SelectZoom";
	}
	else if (this.corner != null &amp;&amp; this.corner.Target.Resizable)
	{
		this.corner.Target.MemorizeStatus();
		this.eventStatus = "ItemResize";
	}
	else if (co != null &amp;&amp; !this.modifierShift)
	{
		this.OnStartItemMove();
	}
	else
	{
		this.eventStatus = "Select";
	}
}
else if (this.mouseButtons == MouseButtons.Right)
{
	if (co != null) this.OnStartItemMove();
}

base.OnStartEvent(e);
</Source>
            <HAFunc Type="Protected" Text="OnStartItemMove:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 0:17:32">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="155" SelectionLength="0">this.canvas.SelectItem(this.clickPoint);
foreach (CanvasObject sel in this.canvas.SelectedItems)
{
	sel.MemorizeStatus();
}
this.eventStatus = "ItemMove";
</Source>
            </HAFunc>
            <HAFunc Type="Protected" Text="OnStartAddItem:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 5:01:59">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="186" SelectionLength="0">this.eventStatus = "AddItem";

this.UnsetLines();
this.addItem.CenterPoint = this.PointToCanvas(this.clickPoint);
this.addItem.Angle = -this.canvas.Angle;
this.addItem.MemorizeStatus();
this.canvas.Items.Insert(0, this.addItem);
this.canvas.ToggledSelectItem(this.addItem);
if (!this.addItem.Resizable) return;

CanvasObjectSelection sel = this.canvas.GetSelection(this.addItem);
this.canvas.ResizeItem(sel.Corners[0], this.clickPoint.X, this.clickPoint.Y, Keys.None);
this.corner = sel.Corners[7];
</Source>
            </HAFunc>
          </HAFunc>
          <HAFunc Type="Protected" Text="OnDispatchEvent:override bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 17:58:19">
            <Arguments>
              <HAObject Type="Private" Text="e:MouseEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/24 11:15:55" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="534" SelectionLength="0">switch (this.eventStatus)
{
	case "ItemMove":
		this.OnItemMove(e);
		return true;
	case "ItemCopy":
		this.OnItemCopy(e);
		return true;
	case "ItemResize":
		this.OnItemResize(e);
		return true;
	case "CanvasMove":
		this.OnCanvasMove(e);
		return true;
	case "Rotate":
		this.OnRotate(e);
		return true;
	case "Select":
		this.OnSelect(e);
		return true;
	case "SelectPrint":
		this.OnSelectPrint(e);
		return true;
	case "AddItem":
		this.OnAddItem(e);
		return true;
	case "SelectZoom":
		this.OnSelectZoom(e);
		return true;
}

return base.OnDispatchEvent(e);
</Source>
            <HAFunc Type="Protected" Text="OnItemMove:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/29 9:12:18">
              <Arguments>
                <HAObject Type="Private" Text="e:MouseEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/23 10:59:25" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="192" SelectionLength="0">if (this.mouseButtons == MouseButtons.Left &amp;&amp; (Control.ModifierKeys &amp; Keys.Control) != 0)
{
	this.CancelMove();
	this.CopyItems();
	this.eventStatus = "ItemCopy";
}

this.MoveItems(e.X, e.Y);
</Source>
            </HAFunc>
            <HAFunc Type="Protected" Text="OnItemCopy:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/29 8:48:10">
              <Arguments>
                <HAObject Type="Private" Text="e:MouseEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/23 10:59:25" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="271" SelectionLength="0">if ((Control.ModifierKeys &amp; Keys.Control) == 0)
{
	CanvasObject[] sels = this.canvas.SelectedItems;
	this.canvas.SelectedItems = this.preSels;
	foreach (CanvasObject sel in sels) this.canvas.Items.Remove(sel);
	this.eventStatus = "ItemMove";
}

this.MoveItems(e.X, e.Y);
</Source>
            </HAFunc>
            <HAFunc Type="Protected" Text="OnItemResize:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 23:18:15">
              <Arguments>
                <HAObject Type="Private" Text="e:MouseEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/23 10:59:25" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="103" SelectionLength="0">this.canvas.ResizeItem(this.corner, e.X, e.Y, Control.ModifierKeys);
this.Cursor = this.corner.Cursor;
</Source>
            </HAFunc>
            <HAFunc Type="Protected" Text="OnCanvasMove:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 22:14:40">
              <Arguments>
                <HAObject Type="Private" Text="e:MouseEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/23 10:59:36" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="196" SelectionLength="0">if (this.noMove) this.Cursor = Cursors.Hand;
PointF pt = this.GetMouseDiff(e.X, e.Y);
this.Transform.Translate(pt.X - this.prevPos.X, pt.Y - this.prevPos.Y);
this.prevPos = pt;
this.Invalidate();
</Source>
            </HAFunc>
            <HAFunc Type="Protected" Text="OnRotate:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 22:55:41">
              <Arguments>
                <HAObject Type="Private" Text="e:MouseEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/23 10:59:36" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="83" SelectionLength="0">float an = this.MouseAngle;
this.Rotate(an - this.prevAngle);
this.prevAngle = an;
</Source>
            </HAFunc>
            <HAFunc Type="Protected" Text="OnSelect:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 18:53:58">
              <Arguments>
                <HAObject Type="Private" Text="e:MouseEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/23 10:59:47" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="110" SelectionLength="0">if (this.selBox.Visible)
{
	this.frontCanvas.Invalidate(this.selBox);
}
else
{
	this.selBox.Visible = true;
}

this.selBox.Bounds = new RectangleF(this.clickPoint,
	new SizeF(e.X - this.clickPoint.X, e.Y - this.clickPoint.Y));
this.frontCanvas.Invalidate(this.selBox);
this.canvas.SelectItems(this.modifierKeys, this.preSels, this.selBox.Bounds);
</Source>
            </HAFunc>
            <HAFunc Type="Protected" Text="OnSelectPrint:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 18:50:46">
              <Arguments>
                <HAObject Type="Private" Text="e:MouseEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/23 10:59:47" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="269" SelectionLength="0">if (this.selBox.Visible)
{
	this.frontCanvas.Invalidate(this.selBox);
}
else
{
	this.selBox.Visible = true;
}

this.selBox.Bounds = new RectangleF(this.clickPoint,
	new SizeF(e.X - this.clickPoint.X, e.Y - this.clickPoint.Y));
this.frontCanvas.Invalidate(this.selBox);
</Source>
            </HAFunc>
            <HAFunc Type="Protected" Text="OnAddItem:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 4:33:44">
              <Arguments>
                <HAObject Type="Private" Text="e:MouseEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/14 4:08:13" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="122" SelectionLength="0">this.canvas.Invalidate(this.addItem);
if (!this.addItem.Resizable) return;

this.canvas.ResizeItem(this.corner, e.X, e.Y, Keys.None);
</Source>
            </HAFunc>
            <HAFunc Type="Protected" Text="OnSelectZoom:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 17:58:05">
              <Arguments>
                <HAObject Type="Private" Text="e:MouseEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/23 10:59:47" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="269" SelectionLength="0">if (this.selBox.Visible)
{
	this.frontCanvas.Invalidate(this.selBox);
}
else
{
	this.selBox.Visible = true;
}

this.selBox.Bounds = new RectangleF(this.clickPoint,
	new SizeF(e.X - this.clickPoint.X, e.Y - this.clickPoint.Y));
this.frontCanvas.Invalidate(this.selBox);
</Source>
            </HAFunc>
          </HAFunc>
          <HAFunc Type="Protected" Text="OnCancelEvent:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/29 9:13:48">
            <Arguments>
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/14 3:15:20" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="290" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
switch (this.eventStatus)
{
	case "ItemMove":
		this.CancelMove();
		break;
	case "ItemCopy":
		this.canvas.SelectedItems = null;
		if (sels != null)
		{
			foreach (CanvasObject sel in sels)
			{
				this.canvas.Items.Remove(sel);
			}
		}
		this.canvas.SelectedItems = this.preSels;
		break;
	case "ItemResize":
		this.canvas.Invalidate(this.corner.Target);
		this.corner.Target.CancelResize();
		this.canvas.Invalidate(this.corner.Target);
		this.corner = null;
		break;
	case "PrepareSelectPrint":
		break;
	case "Select":
		this.selBox.Visible = false;
		this.canvas.SelectedItems = this.preSels;
		this.Invalidate();
		break;
	case "SelectPrint":
		this.selBox.Visible = false;
		this.Invalidate();
		this.SetSelBoxColor();
		break;
	case "PrepareRotate":
		this.frontCanvas.Invalidate(this.group2);
		this.group2.Visible = false;
		break;
	case "Rotate":
		this.frontCanvas.Invalidate(this.group2);
		this.group2.Visible = false;
		if (sels == null)
		{
			this.Rotate(this.origAngle - this.canvas.Angle);
		}
		else
		{
			foreach (CanvasObject sel in sels) sel.RestoreStatus();
		}
		this.Invalidate();
		break;
	case "CanvasMove":
		this.Transform.Translate(-this.prevPos.X, -this.prevPos.Y);
		this.Invalidate();
		break;
	case "PrepareAddItem":
		this.addItem = null;
		break;
	case "AddItem":
		this.addItem = null;
		break;
	case "SelectZoom":
		this.selBox.Visible = false;
		this.Invalidate();
		break;
}

base.OnCancelEvent(e);
this.SetCursor();
this.UnsetLines();
</Source>
          </HAFunc>
          <HAFunc Type="Protected" Text="OnEndEvent:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 17:59:30">
            <Arguments>
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/14 3:15:29" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="844" SelectionLength="0">switch (this.eventStatus)
{
	case "ItemMove":
		this.OnItemMoved();
		break;
	case "ItemCopy":
		this.OnItemCopied();
		break;
	case "ItemResize":
		this.OnItemResized();
		break;
	case "CanvasMove":
		this.OnCanvasMoved();
		break;
	case "PrepareRotate":
		this.frontCanvas.Invalidate(this.group2);
		this.group2.Visible = false;
		break;
	case "Rotate":
		this.OnRotated();
		break;
	case "Select":
		this.OnSelected();
		break;
	case "SelectPrint":
		this.OnSelectedPrint();
		break;
	case "PrepareAddItem":
		this.addItem.CenterPoint = this.PointToCanvas(this.clickPoint);
		this.addItem.Angle = -this.canvas.Angle;
		this.canvas.Items.Insert(0, this.addItem);
		this.Canvas.ToggledSelectItem(this.addItem);
		this.OnAddedItem();
		break;
	case "AddItem":
		this.OnAddedItem();
		break;
	case "SelectZoom":
		this.OnSelectedZoom();
		break;
}

string pe = this.prevEvent;
this.prevEvent = null;
base.OnEndEvent(e);
this.SetCursor();
this.UnsetLines();

if (pe == "PrepareSelectPrint")
{
	this.SelectPrint(this, EventArgs.Empty);
}
</Source>
            <HAFunc Type="Protected" Text="OnItemMoved:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/16 22:51:22">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="222" SelectionLength="0">if (this.mouseButtons == MouseButtons.Right)
{
	this.CancelMove();
	this.cmnPos = this.PointToClient(Cursor.Position);
	this.cmnRightDrag.Show(this, this.cmnPos);
	return;
}

this.SetUndoBounds(this.canvas.SelectedItems);
</Source>
            </HAFunc>
            <HAFunc Type="Protected" Text="OnItemCopied:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 14:50:41">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="47" SelectionLength="0">this.SetUndoDelete(this.canvas.SelectedItems);
</Source>
            </HAFunc>
            <HAFunc Type="Protected" Text="OnItemResized:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 23:20:31">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="93" SelectionLength="0">this.corner.Target.EndResize();
this.SetUndoBounds(new CanvasObject[] {this.corner.Target});
</Source>
            </HAFunc>
            <HAFunc Type="Protected" Text="OnCanvasMoved:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/10 14:58:44">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="31" SelectionLength="0">this.Cursor = Cursors.Default;
</Source>
            </HAFunc>
            <HAFunc Type="Protected" Text="OnRotated:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 16:20:31">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="148" SelectionLength="0">this.frontCanvas.Invalidate(this.group2);
this.group2.Visible = false;
this.Cursor = Cursors.Default;
this.SetUndoAngle(this.canvas.SelectedItems);
</Source>
            </HAFunc>
            <HAFunc Type="Protected" Text="OnSelected:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 15:13:24">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="48" SelectionLength="0">this.selBox.Visible = false;
this.Invalidate();
</Source>
            </HAFunc>
            <HAFunc Type="Protected" Text="OnSelectedPrint:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 19:08:50">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="249" SelectionLength="0">this.Cursor = Cursors.Default;
this.selBox.Visible = false;
this.Invalidate();
this.SetSelBoxColor();

float sc = this.canvas.Scale;
this.SetPrintArea(
	this.PointToCanvas(this.selBox.CenterPoint),
	this.selBox.Width / sc, this.selBox.Height / sc);
</Source>
            </HAFunc>
            <HAFunc Type="Protected" Text="OnAddedItem:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 4:26:15">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="76" SelectionLength="0">this.SetUndoDelete(new CanvasObject[] {this.addItem});
this.addItem = null;
</Source>
            </HAFunc>
            <HAFunc Type="Protected" Text="OnSelectedZoom:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 20:07:39">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="292" SelectionLength="0">this.selBox.Visible = false;

PointF cpt = this.PointToCanvas(this.selBox.CenterPoint);
float sc = this.canvas.Scale;
float w = this.selBox.Width / sc, h = this.selBox.Height / sc;
RectangleF r = new RectangleF(cpt.X - w / 2, cpt.Y - h / 2, w, h);
this.SetDisplayArea(r, -this.canvas.Angle);
</Source>
            </HAFunc>
          </HAFunc>
          <HAFunc Type="Protected" Text="OnMouseClick:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/16 22:46:53">
            <Arguments>
              <HAObject Type="Private" Text="e:MouseEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/05 19:07:03" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="307" SelectionLength="0">switch (e.Button)
{
	case MouseButtons.XButton1:
		this.canvas.SelectItem(e.X, e.Y);
		this.rotateCenter = new Point(e.X, e.Y);
		this.RotateLeft90(this, EventArgs.Empty);
		break;
	case MouseButtons.XButton2:
		this.canvas.SelectItem(e.X, e.Y);
		this.rotateCenter = new Point(e.X, e.Y);
		this.RotateRight90(this, EventArgs.Empty);
		break;
}

base.OnMouseClick(e);
</Source>
            <HAFunc Type="Protected" Text="OnLeftClick:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 19:27:42">
              <Arguments>
                <HAObject Type="Private" Text="e:MouseEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/05 19:07:03" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="273" SelectionLength="0">base.OnLeftClick(e);

CanvasObject[] sels = this.canvas.SelectedItems;
if (this.modifierShift &amp;&amp; this.modifierControl)
{
	this.OnMouseWheel(new MouseEventArgs(
		MouseButtons.None, 0, e.X, e.Y, 120));
}
else
{
	this.canvas.SelectItem(this.modifierKeys, this.clickPoint);
}
</Source>
            </HAFunc>
            <HAFunc Type="Protected" Text="OnRightClick:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/16 22:52:01">
              <Arguments>
                <HAObject Type="Private" Text="e:MouseEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/05 19:07:03" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="905" SelectionLength="0">base.OnRightClick(e);

CanvasObject[] sels = this.canvas.SelectedItems;
if (this.modifierShift &amp;&amp; this.modifierControl)
{
	this.OnMouseWheel(new MouseEventArgs(
		MouseButtons.None, 0, e.X, e.Y, -120));
}
else if (this.zoomInfo.ClientRectangle.Contains(e.X, e.Y))
{
	this.cmnZoom.Show(this, new Point(e.X, e.Y));
}
else if (this.corner != null)
{
	if (this.corner.Index &gt;= 8)
	{
		bool flg = this.corner.Type == 'L';
		this.mnuPathMakeVertex.Visible = flg;
		flg = !flg;
		this.mnuPathRemove.Visible = flg;
		if (flg)
		{
			CanvasPolygon poly = this.corner.Target as CanvasPolygon;
			this.mnuPathRemove.Enabled = poly.Points.Length &gt; 2;
		}
		this.cmnPath.Show(this, new Point(e.X, e.Y));
	}
}
else if (this.Menu != null)
{
	this.canvas.SelectItem(e.X, e.Y);
	CanvasObject sel = this.canvas.SelectedItem;
	if (sel != null)
	{
		this.Menu.cmnItem.Show(this, new Point(e.X, e.Y));
	}
	else
	{
		this.Menu.cmnCanvas.Show(this, new Point(e.X, e.Y));
	}
}
</Source>
            </HAFunc>
            <HAFunc Type="Protected" Text="OnMiddleClick:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/16 22:52:38">
              <Arguments>
                <HAObject Type="Private" Text="e:MouseEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/05 19:07:03" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="173" SelectionLength="0">base.OnMiddleClick(e);

CanvasObject[] sels = this.canvas.SelectedItems;
this.canvas.SelectItem(this.modifierKeys, this.clickPoint);
this.RotateFree(this, EventArgs.Empty);
</Source>
            </HAFunc>
          </HAFunc>
        </HAFunc>
      </HAFunc>
      <HAFunc Type="Folder" Text="座標" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/07 12:47:07">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="get_CenterPoint:Point" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 17:07:44">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="74" SelectionLength="0">Size sz = this.ClientSize;
return new Point(sz.Width / 2, sz.Height / 2);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_CenterPointInCanvas:PointF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 19:09:54">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="45" SelectionLength="0">return this.PointToCanvas(this.CenterPoint);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="PointToCanvas:PointF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 22:20:48">
          <Arguments>
            <HAObject Type="Private" Text="pt:PointF" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/19 17:08:49" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="67" SelectionLength="0">return Geometry.TransformPoint(this.canvas.InvertedTransform, pt);
</Source>
          <HAFunc Type="Public" Text="PointToCanvas:PointF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 19:00:50">
            <Arguments>
              <HAObject Type="Private" Text="x:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 17:08:47" />
              <HAObject Type="Private" Text="y:float" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/19 17:08:49" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="45" SelectionLength="0">return this.PointToCanvas(new PointF(x, y));
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="PointFromCanvas:PointF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 8:53:09">
          <Arguments>
            <HAObject Type="Private" Text="pt:PointF" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/19 17:08:49" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="59" SelectionLength="0">return Geometry.TransformPoint(this.canvas.Transform, pt);
</Source>
          <HAFunc Type="Public" Text="PointFromCanvas:PointF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 8:53:00">
            <Arguments>
              <HAObject Type="Private" Text="x:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 17:08:47" />
              <HAObject Type="Private" Text="y:float" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/19 17:08:49" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="47" SelectionLength="0">return this.PointFromCanvas(new PointF(x, y));
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Protected" Text="GetMouseDiff:PointF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 18:02:03">
          <Arguments>
            <HAObject Type="Private" Text="x:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 23:08:53" />
            <HAObject Type="Private" Text="y:int" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/19 23:08:56" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="384" SelectionLength="0">PointF pt = new PointF(x, y);
if ((Control.ModifierKeys &amp; Keys.Shift) != 0
	&amp;&amp; !(this.eventStatus == "CanvasMove"
	&amp;&amp; (Control.ModifierKeys &amp; Keys.Control) != 0))
{
	pt = Geometry.GetRightAngled(pt, this.clickPoint);
}

PointF[] pts = new PointF[] {this.clickPoint, pt};
this.canvas.InvertedTransform.TransformPoints(pts);
return new PointF(pts[1].X - pts[0].X, pts[1].Y - pts[0].Y);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="SetZoom" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 15:10:09">
          <Arguments>
            <HAObject Type="Private" Text="zoom:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 15:09:09" />
            <HAObject Type="Private" Text="pt:PointF" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/13 15:09:22" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="108" SelectionLength="0">this.canvas.ScaleAt(zoom / this.canvas.Scale, pt);
this.Invalidate();
this.SetCursor();
this.SetZoomInfo();
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="SetDisplayArea" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 19:39:04">
          <Arguments>
            <HAObject Type="Private" Text="rect:RectangleF" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 19:36:53" />
            <HAObject Type="Private" Text="angle:float" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/14 19:36:57" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="624" SelectionLength="0">RectangleF r = this.ClientRectangle;
float zx = Math.Abs(r.Width / rect.Width);
float zy = Math.Abs(r.Height / rect.Height);
float zoom = (zx &lt; zy) ? zx : zy;
PointF cpt1 = Geometry.GetCenter(rect);
Matrix m = new Matrix();
m.Translate(-cpt1.X, -cpt1.Y);
if (zoom &lt; 0.01F) zoom = 0.01F;
if (zoom &gt; 30F  ) zoom = 30F;
Geometry.ScaleAt(m, zoom, zoom, cpt1);
Matrix mm = m.Clone();
mm.Invert();
PointF cpt2 = Geometry.TransformPoint(mm, Geometry.GetCenter(r));
mm.Dispose();
m.Translate(cpt2.X - cpt1.X, cpt2.Y - cpt1.Y);
m.RotateAt(-angle, cpt1);

this.Transform = m;
this.SetCompass();
this.SetZoomInfo();
this.Invalidate();
</Source>
        </HAFunc>
        <HAFunc Type="Folder" Text="移動" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 13:48:12">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Protected" Text="CancelMove" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/29 9:14:21">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="0" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null) return;

foreach (CanvasObject co in sels)
{
	this.canvas.Invalidate(co);
	co.RestoreStatus();
	this.canvas.Invalidate(co);
}
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="MoveItems" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/29 9:15:05">
            <Arguments>
              <HAObject Type="Private" Text="x:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 13:46:50" />
              <HAObject Type="Private" Text="y:int" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/13 13:48:57" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="94" SelectionLength="0">PointF d = this.GetMouseDiff(x, y);

CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null)
{
	this.Cancel();
	return;
}

foreach (CanvasObject sel in sels)
{
	this.canvas.Invalidate(sel);
	sel.RestoreStatus();
	sel.Offset(d);
	this.canvas.Invalidate(sel);
}
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="CopyItems" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 13:50:56">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="290" SelectionLength="0">string xml = this.SerializeItems(this.canvas.SelectedItems);
CanvasObject[] cos = this.DeserializeItems(xml);
Hashtable guidTable = this.canvas.GetGuidTable();
foreach (CanvasObject co in cos) co.CheckGuid(guidTable);
this.canvas.Items.InsertRange(0, cos);
this.canvas.SelectedItems = cos;
</Source>
          </HAFunc>
          <HAFunc Type="Protected" Text="ArrowMove" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/16 10:53:11">
            <Arguments>
              <HAObject Type="Private" Text="dx:float" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/13 21:05:22" />
              <HAObject Type="Private" Text="dy:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 21:05:29" />
              <HAObject Type="Private" Text="modifiers:Keys" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 21:05:31" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="286" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;

if ((modifiers &amp; Keys.Shift) == 0)
{
	dx = dx * 16;
	dy = dy * 16;
}

Matrix i = this.canvas.InvertedTransform;
if (sels == null)
{
	PointF[] pts = new PointF[] {new PointF(dx, dy), PointF.Empty};
	i.TransformPoints(pts);
	this.canvas.Transform.Translate(pts[1].X - pts[0].X, pts[1].Y - pts[0].Y);
	this.Invalidate();
	return;
}

foreach (CanvasObject sel in sels)
{
	sel.MemorizeStatus();
	this.canvas.Invalidate(sel);
	PointF cpt = Geometry.TransformPoint(this.canvas.Transform, sel.CenterPoint);
	cpt.X += dx;
	cpt.Y += dy;
	sel.CenterPoint = Geometry.TransformPoint(i, cpt);
	this.canvas.Invalidate(sel);
}

this.SetUndoBounds(sels);
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Folder" Text="回転" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 13:47:30">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="SetCompass" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/02 7:51:47">
            <Arguments />
            <HAObject Type="Private" Text="an:double" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/21 11:17:38" />
            <HAObject Type="Private" Text="s:double" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/21 11:17:41" />
            <HAObject Type="Private" Text="c:double" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/21 11:17:44" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="733" SelectionLength="0">if (!this.ShowCompass) return;

this.frontCanvas.Invalidate(this.compass1);

SizeF sz = this.ClientSize;
this.compass1.Location = this.compass2.Location = new PointF(16, sz.Height - 80);
an = (double)this.standardAngle / 180D * Math.PI - Math.PI / 2D;
s = Math.Sin(an) * 30D;
c = Math.Cos(an) * 30D;
this.compass3.Bounds = new RectangleF(
	(float)(48D + c), (float)((double)sz.Height - 48D + s),
	(float)(c * (-2D)), (float)(s * (-2D)));
an = (double)this.canvas.Angle / 180D * Math.PI - Math.PI / 2D;
s = Math.Sin(an) * 30D;
c = Math.Cos(an) * 30D;
this.compass4.Bounds = new RectangleF(
	(float)(48D + c), (float)((double)sz.Height - 48D + s),
	(float)(c * (-2D)), (float)(s * (-2D)));

this.frontCanvas.Invalidate(this.compass1);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="RotateAt" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 14:50:36">
            <Arguments>
              <HAObject Type="Private" Text="angle:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 13:23:35" />
              <HAObject Type="Private" Text="pt:PointF" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/19 13:23:46" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="255" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null)
{
	this.canvas.RotateAt(angle, pt);
	this.SetCompass();
	return;
}

foreach (CanvasObject sel in sels)
{
	this.canvas.Invalidate(sel);
	sel.Angle += angle;
	this.canvas.Invalidate(sel);
}
</Source>
            <HAFunc Type="Public" Text="Rotate" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 19:10:41">
              <Arguments>
                <HAObject Type="Private" Text="angle:float" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/19 13:23:13" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="61" SelectionLength="0">this.RotateAt(angle, this.PointToCanvas(this.rotateCenter));
</Source>
            </HAFunc>
          </HAFunc>
          <HAFunc Type="Public" Text="get_MouseAngle:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/02 7:51:42">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="142" SelectionLength="0">CanvasObject sel = this.canvas.SelectedItem;
Point pt = this.PointToClient(Cursor.Position);
return Geometry.GetAngle(pt, this.rotateCenter);
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Folder" Text="情報" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 13:48:21">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Protected" Text="SetLines" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 3:00:56">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="438" SelectionLength="0">if (!this.vline.Visible)
{
	this.vline.Visible = this.hline.Visible = true;
}
else
{
	this.frontCanvas.Invalidate(this.vline);
	this.frontCanvas.Invalidate(this.hline);
}

PointF pt = this.PointToClient(Cursor.Position);
SizeF sz = this.ClientSize;
vline.Bounds = new RectangleF(pt.X, 0, 0, sz.Height);
hline.Bounds = new RectangleF(0, pt.Y, sz.Width, 0);
this.frontCanvas.Invalidate(this.vline);
this.frontCanvas.Invalidate(this.hline);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="UnsetLines" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 2:44:39">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="165" SelectionLength="0">if (!this.vline.Visible) return;

this.frontCanvas.Invalidate(this.vline);
this.frontCanvas.Invalidate(this.hline);
this.vline.Visible = this.hline.Visible = false;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="SetPrintArea" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 13:48:28">
            <Arguments>
              <HAObject Type="Private" Text="cpt:PointF" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/07 12:47:16" />
              <HAObject Type="Private" Text="width:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/07 12:53:50" />
              <HAObject Type="Private" Text="height:float" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/07 12:53:57" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="171" SelectionLength="0">this.printBox.Size = new SizeF(width, height);
this.printBox.CenterPoint = cpt;
this.printBox.Visible = true;
this.printBox.Angle = -this.canvas.Angle;
this.Invalidate();
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="SetZoomInfo" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 13:48:34">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="356" SelectionLength="0">if (!this.zoomInfo.Visible) return;

this.frontCanvas.Invalidate(this.zoomInfo);
this.zoomInfo.Text = string.Format("{0:0.0}%", this.canvas.Scale * 100);
SizeF sz1 = this.ClientSize;
SizeF sz2 = this.zoomInfo.Size;
this.zoomInfo.Location = new PointF(
	sz1.Width - sz2.Width - 16, sz1.Height - sz2.Height - 16);
this.frontCanvas.Invalidate(this.zoomInfo);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="SetCursor" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/17 0:38:49">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="72" SelectionLength="0">if (this.mouseButtons != MouseButtons.None || this.eventStatus != null)
{
	return;
}

Cursor cur = Cursors.Default;
Point pt = this.PointToClient(Cursor.Position);
CanvasCorner corner = this.canvas.GetCornerAt(pt.X, pt.Y);
if (corner != null) cur = corner.Cursor;
if (this.Cursor != cur) this.Cursor = cur;
</Source>
          </HAFunc>
        </HAFunc>
      </HAFunc>
      <HAFunc Type="Folder" Text="Context Menu" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 22:56:36">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="ResetClickPos" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/16 22:55:03">
          <Arguments>
            <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 18:57:01" />
            <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/08 18:57:06" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="36" SelectionLength="0">this.clickPoint = this.CenterPoint;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="SetZoom" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 15:11:45">
          <Arguments>
            <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/13 15:03:27" />
            <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 15:03:24" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="195" SelectionLength="0">MenuItem mni = sender as MenuItem;
if (mni == null) return;

string text = mni.Text;
float sc = float.Parse(text.Substring(0, text.Length - 1)) / 100;
this.SetZoom(sc, this.CenterPointInCanvas);
</Source>
        </HAFunc>
        <HAFunc Type="Folder" Text="回転・反転" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 23:32:21">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="RotateFree" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 3:43:03">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 22:58:56" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/19 22:58:59" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="15" SelectionLength="0">this.Cancel();

this.rotateCenter = this.clickPoint;
CanvasObject sel = this.canvas.SelectedItem;
if (sel != null)
{
	this.rotateCenter = this.PointFromCanvas(sel.CenterPoint);
}
this.group2.Visible = true;
this.rotate1.CenterPoint = this.rotate2.CenterPoint = this.rotateCenter;
this.frontCanvas.Invalidate(this.group2);
this.eventStatus = "PrepareRotate";
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="RotateLeft90" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 22:55:54">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 22:58:56" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/19 22:58:59" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="102" SelectionLength="0">this.rotateCenter = this.clickPoint;
this.Rotate(-90F);
this.SetUndoAngle(this.canvas.SelectedItems);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="RotateRight90" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 22:56:24">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 22:58:56" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/19 22:58:59" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="101" SelectionLength="0">this.rotateCenter = this.clickPoint;
this.Rotate(90F);
this.SetUndoAngle(this.canvas.SelectedItems);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="Rotate180" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 22:56:34">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 22:58:56" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/19 22:58:59" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="102" SelectionLength="0">this.rotateCenter = this.clickPoint;
this.Rotate(180F);
this.SetUndoAngle(this.canvas.SelectedItems);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="RotateAxis" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 22:56:41">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 22:58:56" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/19 22:58:59" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="336" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null)
{
	this.rotateCenter = this.clickPoint;
	this.Rotate(-this.canvas.Angle);
	return;
}

foreach (CanvasObject sel in sels)
{
	this.canvas.Invalidate(sel);
	sel.MemorizeStatus();
	sel.Angle = 0F;
	this.canvas.Invalidate(sel);
}
this.SetUndoAngle(this.canvas.SelectedItems);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="RotateCanvas" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 22:22:02">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 22:58:56" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/19 22:58:59" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="161" SelectionLength="0">CanvasObject sel = this.canvas.SelectedItem;
if (sel == null) return;

this.canvas.RotateAt(-this.canvas.Angle - sel.Angle, sel.CenterPoint);
this.SetCompass();
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="RotateToCanvas" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 16:19:46">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 22:58:56" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/19 22:58:59" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="275" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null) return;

foreach (CanvasObject sel in sels)
{
	this.canvas.Invalidate(sel);
	sel.MemorizeStatus();
	sel.Angle = -this.canvas.Angle;
	this.canvas.Invalidate(sel);
}
this.SetUndoAngle(this.canvas.SelectedItems);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="RotateStandard" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 22:56:58">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 22:58:56" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/19 22:58:59" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="372" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null)
{
	this.rotateCenter = this.clickPoint;
	this.Rotate(this.standardAngle - this.canvas.Angle);
	return;
}

foreach (CanvasObject sel in sels)
{
	this.canvas.Invalidate(sel);
	sel.MemorizeStatus();
	sel.Angle = this.standardAngle;
	this.canvas.Invalidate(sel);
}
this.SetUndoAngle(this.canvas.SelectedItems);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="SetStandard" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 22:22:06">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 22:58:56" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/19 22:58:59" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="40" SelectionLength="0">this.StandardAngle = this.canvas.Angle;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="FixAngle" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 23:14:59">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/21 15:52:32" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/21 15:52:34" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="267" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null) return;

foreach (CanvasObject sel in sels)
{
	if (sel.FixAngle)
	{
		sel.Angle -= this.canvas.Angle;
	}
	else
	{
		sel.Angle += this.canvas.Angle;
	}
	sel.FixAngle = !sel.FixAngle;
}

this.Change();
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="MirrorH" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 16:20:06">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 22:58:56" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/19 22:58:59" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="297" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null) return;

foreach (CanvasObject sel in sels)
{
	this.canvas.Invalidate(sel);
	sel.MemorizeStatus();
	RectangleF rect = sel.Bounds;
	rect.X += rect.Width;
	rect.Width = -rect.Width;
	sel.Bounds = rect;
	this.canvas.Invalidate(sel);
}
this.SetUndoBounds(sels);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="MirrorV" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 16:20:08">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 22:58:56" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/19 22:58:59" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="326" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null) return;

foreach (CanvasObject sel in sels)
{
	this.canvas.Invalidate(sel);
	sel.MemorizeStatus();
	RectangleF rect = sel.Bounds;
	rect.Y += rect.Height;
	rect.Height = -rect.Height;
	sel.Bounds = rect;
	this.canvas.Invalidate(sel);
}
this.SetUndoBounds(sels);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="MoveOrigin" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/12 6:10:17">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/27 0:03:56" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/27 0:03:59" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="66" SelectionLength="0">this.canvas.Transform.Reset();
this.SetCompass();
this.SetZoomInfo();
this.Invalidate();
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Folder" Text="配置" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/25 11:28:06">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="ArrangeLeft" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 8:54:30">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/25 11:28:22" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/25 11:28:24" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="245" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null || sels.Length &lt; 1) return;

RectangleF[] rects = new RectangleF[sels.Length];
Matrix m = this.canvas.Transform;
float x = 0F;
for (int i = 0; i &lt; sels.Length; i++)
{
	rects[i] = Geometry.TransformRectangle(m, sels[i].Bounds);
	float xx = rects[i].Left;
	if (i == 0 || x &gt; xx) x = xx;
}

m = this.canvas.InvertedTransform;
for (int i = 0; i &lt; sels.Length; i++)
{
	this.canvas.Invalidate(sels[i]);
	sels[i].MemorizeStatus();
	sels[i].CenterPoint = Geometry.TransformPoint(m,
		x + rects[i].Width / 2F, rects[i].Top + rects[i].Height / 2F);
	this.canvas.Invalidate(sels[i]);
}

this.SetUndoBounds(sels);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="ArrangeCenterH" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 22:40:24">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/25 11:49:50" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/25 11:49:53" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="654" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null || sels.Length &lt; 1) return;

RectangleF[] rects = new RectangleF[sels.Length];
Matrix m = this.canvas.Transform;
float x = 0F;
for (int i = 0; i &lt; sels.Length; i++)
{
	rects[i] = Geometry.TransformRectangle(m, sels[i].Bounds);
	x += rects[i].Left + rects[i].Width / 2F;
}
x /= (float)sels.Length;

m = this.canvas.InvertedTransform;
for (int i = 0; i &lt; sels.Length; i++)
{
	this.canvas.Invalidate(sels[i]);
	sels[i].MemorizeStatus();
	sels[i].CenterPoint = Geometry.TransformPoint(m,
		x, rects[i].Top + rects[i].Height / 2F);
	this.canvas.Invalidate(sels[i]);
}

this.SetUndoBounds(sels);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="ArrangeRight" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 22:40:35">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/25 11:28:22" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/25 11:28:24" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="667" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null || sels.Length &lt; 1) return;

RectangleF[] rects = new RectangleF[sels.Length];
Matrix m = this.canvas.Transform;
float x = 0F;
for (int i = 0; i &lt; sels.Length; i++)
{
	rects[i] = Geometry.TransformRectangle(m, sels[i].Bounds);
	float xx = rects[i].Right;
	if (i == 0 || x &lt; xx) x = xx;
}

m = this.canvas.InvertedTransform;
for (int i = 0; i &lt; sels.Length; i++)
{
	this.canvas.Invalidate(sels[i]);
	sels[i].MemorizeStatus();
	sels[i].CenterPoint = Geometry.TransformPoint(m,
		x - rects[i].Width / 2F, rects[i].Top + rects[i].Height / 2F);
	this.canvas.Invalidate(sels[i]);
}

this.SetUndoBounds(sels);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="ArrangeTop" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 22:42:23">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/25 11:28:22" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/25 11:28:24" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="666" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null || sels.Length &lt; 1) return;

RectangleF[] rects = new RectangleF[sels.Length];
Matrix m = this.canvas.Transform;
float y = 0F;
for (int i = 0; i &lt; sels.Length; i++)
{
	rects[i] = Geometry.TransformRectangle(m, sels[i].Bounds);
	float yy = rects[i].Top;
	if (i == 0 || y &gt; yy) y = yy;
}

m = this.canvas.InvertedTransform;
for (int i = 0; i &lt; sels.Length; i++)
{
	this.canvas.Invalidate(sels[i]);
	sels[i].MemorizeStatus();
	sels[i].CenterPoint = Geometry.TransformPoint(m,
		rects[i].Left + rects[i].Width / 2F, y + rects[i].Height / 2F);
	this.canvas.Invalidate(sels[i]);
}

this.SetUndoBounds(sels);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="ArrangeCenterV" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 22:42:31">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/25 11:49:50" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/25 11:49:53" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="497" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null || sels.Length &lt; 1) return;

RectangleF[] rects = new RectangleF[sels.Length];
Matrix m = this.canvas.Transform;
float y = 0F;
for (int i = 0; i &lt; sels.Length; i++)
{
	rects[i] = Geometry.TransformRectangle(m, sels[i].Bounds);
	y += rects[i].Top + rects[i].Height / 2F;
}
y /= (float)sels.Length;

m = this.canvas.InvertedTransform;
for (int i = 0; i &lt; sels.Length; i++)
{
	this.canvas.Invalidate(sels[i]);
	sels[i].MemorizeStatus();
	sels[i].CenterPoint = Geometry.TransformPoint(m,
		rects[i].Left + rects[i].Width / 2F, y);
	this.canvas.Invalidate(sels[i]);
}

this.SetUndoBounds(sels);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="ArrangeBottom" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 22:42:40">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/25 11:28:22" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/25 11:28:24" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="489" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null || sels.Length &lt; 1) return;

RectangleF[] rects = new RectangleF[sels.Length];
Matrix m = this.canvas.Transform;
float y = 0F;
for (int i = 0; i &lt; sels.Length; i++)
{
	rects[i] = Geometry.TransformRectangle(m, sels[i].Bounds);
	float yy = rects[i].Bottom;
	if (i == 0 || y &lt; yy) y = yy;
}

m = this.canvas.InvertedTransform;
for (int i = 0; i &lt; sels.Length; i++)
{
	this.canvas.Invalidate(sels[i]);
	sels[i].MemorizeStatus();
	sels[i].CenterPoint = Geometry.TransformPoint(m,
		rects[i].Left + rects[i].Width / 2F, y - rects[i].Height / 2F);
	this.canvas.Invalidate(sels[i]);
}

this.SetUndoBounds(sels);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="ArrangeH" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 22:45:57">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/25 11:49:50" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/25 11:49:53" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="1160" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null || sels.Length &lt; 3) return;

ArrayList list1 = new ArrayList(), list2 = new ArrayList();
Matrix m = this.canvas.Transform;
foreach (CanvasObject sel in sels)
{
	RectangleF r = Geometry.TransformRectangle(m, sel.Bounds);
	bool ok = false;
	for (int i = 0; i &lt; list1.Count; i++)
	{
		if (r.Left &lt; ((RectangleF)list2[i]).Left)
		{
			list1.Insert(i, sel);
			list2.Insert(i, r);
			ok = true;
			break;
		}
	}
	if (!ok)
	{
		list1.Add(sel);
		list2.Add(r);
	}
}

m = this.canvas.InvertedTransform;
int len = list1.Count;
RectangleF rs = (RectangleF)list2[0], re = (RectangleF)list2[len - 1];
float xs = rs.Left + rs.Width / 2F, xe = re.Left + re.Width / 2F;
for (int i = 1; i &lt; len - 1; i++)
{
	CanvasObject co = list1[i] as CanvasObject;
	RectangleF r = (RectangleF)list2[i];
	this.canvas.Invalidate(co);
	co.MemorizeStatus();
	co.CenterPoint = Geometry.TransformPoint(m,
		xs + (xe - xs) * ((float)i / (float)(len - 1F)), r.Top + r.Height / 2F);
	this.canvas.Invalidate(co);
}

list1.RemoveAt(len - 1);
list1.RemoveAt(0);
this.SetUndoBounds(list1.ToArray(typeof(CanvasObject)) as CanvasObject[]);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="ArrangeV" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 22:46:17">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/25 11:49:50" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/25 11:49:53" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="84" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null || sels.Length &lt; 3) return;

ArrayList list1 = new ArrayList(), list2 = new ArrayList();
Matrix m = this.canvas.Transform;
foreach (CanvasObject sel in sels)
{
	RectangleF r = Geometry.TransformRectangle(m, sel.Bounds);
	bool ok = false;
	for (int i = 0; i &lt; list1.Count; i++)
	{
		if (r.Top &lt; ((RectangleF)list2[i]).Top)
		{
			list1.Insert(i, sel);
			list2.Insert(i, r);
			ok = true;
			break;
		}
	}
	if (!ok)
	{
		list1.Add(sel);
		list2.Add(r);
	}
}

m = this.canvas.InvertedTransform;
int len = list1.Count;
RectangleF rs = (RectangleF)list2[0], re = (RectangleF)list2[len - 1];
float ys = rs.Top + rs.Height / 2F, ye = re.Top + re.Height / 2F;
for (int i = 1; i &lt; len - 1; i++)
{
	CanvasObject co = list1[i] as CanvasObject;
	RectangleF r = (RectangleF)list2[i];
	this.canvas.Invalidate(co);
	co.MemorizeStatus();
	co.CenterPoint = Geometry.TransformPoint(m,
		r.Left + r.Width / 2F, ys + (ye - ys) * ((float)i / (float)(len - 1F)));
	this.canvas.Invalidate(co);
}

list1.RemoveAt(len - 1);
list1.RemoveAt(0);
this.SetUndoBounds(list1.ToArray(typeof(CanvasObject)) as CanvasObject[]);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="ArrangePlugL" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 22:47:23">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/25 11:49:50" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/25 11:49:53" />
            </Arguments>
            <HAObject Type="Private" Text="m:Matrix" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/25 16:15:42" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="1061" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null || sels.Length &lt; 2) return;

ArrayList list1 = new ArrayList(), list2 = new ArrayList();
float an = this.canvas.Angle;
foreach (CanvasObject sel in sels)
{
	m = this.canvas.Transform.Clone();
	sel.Rotate(m, an);
	RectangleF r = Geometry.TransformRectangle(m, sel.Bounds);
	m.Dispose();
	bool ok = false;
	for (int i = 0; i &lt; list1.Count; i++)
	{
		if (r.Left &lt; ((RectangleF)list2[i]).Left)
		{
			list1.Insert(i, sel);
			list2.Insert(i, r);
			ok = true;
			break;
		}
	}
	if (!ok)
	{
		list1.Add(sel);
		list2.Add(r);
	}
}

m = this.canvas.InvertedTransform;
int len = list1.Count;
float x = ((RectangleF)list2[0]).Left;
for (int i = 0; i &lt; len; i++)
{
	CanvasObject co = list1[i] as CanvasObject;
	RectangleF r = (RectangleF)list2[i];
	this.canvas.Invalidate(co);
	co.MemorizeStatus();
	co.CenterPoint = Geometry.TransformPoint(m, x + r.Width / 2, r.Top + r.Height / 2F);
	this.canvas.Invalidate(co);
	x += r.Width;
}

this.SetUndoBounds(list1.ToArray(typeof(CanvasObject)) as CanvasObject[]);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="ArrangePlugR" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 22:47:49">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/25 11:49:50" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/25 11:49:53" />
            </Arguments>
            <HAObject Type="Private" Text="m:Matrix" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/25 16:20:59" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="865" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null || sels.Length &lt; 1) return;

ArrayList list1 = new ArrayList(), list2 = new ArrayList();
float an = this.canvas.Angle;
foreach (CanvasObject sel in sels)
{
	m = this.canvas.Transform.Clone();
	sel.Rotate(m, an);
	RectangleF r = Geometry.TransformRectangle(m, sel.Bounds);
	m.Dispose();
	bool ok = false;
	for (int i = 0; i &lt; list1.Count; i++)
	{
		if (r.Left &lt; ((RectangleF)list2[i]).Left)
		{
			list1.Insert(i, sel);
			list2.Insert(i, r);
			ok = true;
			break;
		}
	}
	if (!ok)
	{
		list1.Add(sel);
		list2.Add(r);
	}
}

m = this.canvas.InvertedTransform;
int len = list1.Count;
float x = ((RectangleF)list2[len - 1]).Right;
for (int i = len - 1; i &gt;= 0; i--)
{
	CanvasObject co = list1[i] as CanvasObject;
	RectangleF r = (RectangleF)list2[i];
	this.canvas.Invalidate(co);
	co.MemorizeStatus();
	co.CenterPoint = Geometry.TransformPoint(m, x - r.Width / 2, r.Top + r.Height / 2F);
	this.canvas.Invalidate(co);
	x -= r.Width;
}

this.SetUndoBounds(list1.ToArray(typeof(CanvasObject)) as CanvasObject[]);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="ArrangePlugT" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 22:47:45">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/25 11:49:50" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/25 11:49:53" />
            </Arguments>
            <HAObject Type="Private" Text="m:Matrix" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/25 16:28:43" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="850" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null || sels.Length &lt; 1) return;

ArrayList list1 = new ArrayList(), list2 = new ArrayList();
float an = this.canvas.Angle;
foreach (CanvasObject sel in sels)
{
	m = this.canvas.Transform.Clone();
	sel.Rotate(m, an);
	RectangleF r = Geometry.TransformRectangle(m, sel.Bounds);
	m.Dispose();
	bool ok = false;
	for (int i = 0; i &lt; list1.Count; i++)
	{
		if (r.Top &lt; ((RectangleF)list2[i]).Top)
		{
			list1.Insert(i, sel);
			list2.Insert(i, r);
			ok = true;
			break;
		}
	}
	if (!ok)
	{
		list1.Add(sel);
		list2.Add(r);
	}
}

m = this.canvas.InvertedTransform;
int len = list1.Count;
float y = ((RectangleF)list2[0]).Top;
for (int i = 0; i &lt; len; i++)
{
	CanvasObject co = list1[i] as CanvasObject;
	RectangleF r = (RectangleF)list2[i];
	this.canvas.Invalidate(co);
	co.MemorizeStatus();
	co.CenterPoint = Geometry.TransformPoint(m, r.Left + r.Width / 2F, y + r.Height / 2);
	this.canvas.Invalidate(co);
	y += r.Height;
}

this.SetUndoBounds(list1.ToArray(typeof(CanvasObject)) as CanvasObject[]);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="ArrangePlugB" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 22:47:40">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/25 11:49:50" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/25 11:49:53" />
            </Arguments>
            <HAObject Type="Private" Text="m:Matrix" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/25 16:28:47" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="864" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null || sels.Length &lt; 1) return;

ArrayList list1 = new ArrayList(), list2 = new ArrayList();
float an = this.canvas.Angle;
foreach (CanvasObject sel in sels)
{
	m = this.canvas.Transform.Clone();
	sel.Rotate(m, an);
	RectangleF r = Geometry.TransformRectangle(m, sel.Bounds);
	m.Dispose();
	bool ok = false;
	for (int i = 0; i &lt; list1.Count; i++)
	{
		if (r.Top &lt; ((RectangleF)list2[i]).Top)
		{
			list1.Insert(i, sel);
			list2.Insert(i, r);
			ok = true;
			break;
		}
	}
	if (!ok)
	{
		list1.Add(sel);
		list2.Add(r);
	}
}

m = this.canvas.InvertedTransform;
int len = list1.Count;
float y = ((RectangleF)list2[len - 1]).Bottom;
for (int i = len - 1; i &gt;= 0; i--)
{
	CanvasObject co = list1[i] as CanvasObject;
	RectangleF r = (RectangleF)list2[i];
	this.canvas.Invalidate(co);
	co.MemorizeStatus();
	co.CenterPoint = Geometry.TransformPoint(m, r.Left + r.Width / 2F, y - r.Height / 2);
	this.canvas.Invalidate(co);
	y -= r.Height;
}

this.SetUndoBounds(list1.ToArray(typeof(CanvasObject)) as CanvasObject[]);
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Folder" Text="編集" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/11 17:57:34">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="Undo" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 23:14:17">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 12:38:08" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/08 12:38:11" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="243" SelectionLength="0">if (!this.CanUndo) return;

Hashtable guidTable = this.canvas.GetGuidTable();
Operation[] ops = opsUndo.Pop() as Operation[];
foreach (Operation op in ops) this.Operate(op, guidTable);
this.opsRedo.Push(ops);

this.OnChanged(EventArgs.Empty);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="Redo" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 23:17:05">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 12:38:00" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/08 12:38:03" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="243" SelectionLength="0">if (!this.CanRedo) return;

Hashtable guidTable = this.canvas.GetGuidTable();
Operation[] ops = opsRedo.Pop() as Operation[];
foreach (Operation op in ops) this.Operate(op, guidTable);
this.opsUndo.Push(ops);

this.OnChanged(EventArgs.Empty);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="Cut" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/16 22:55:36">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/27 10:09:15" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/27 10:09:22" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="70" SelectionLength="0">this.Copy(this, EventArgs.Empty);
this.Delete(this, EventArgs.Empty);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="Copy" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/17 0:03:48">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/27 10:09:15" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/27 10:09:22" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="299" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null || sels.Length &lt; 1) return;

Clipboard.SetDataObject(new DataObject(this.DataFormat, this.SerializeItems(sels)), true);
if (this.Menu == null || this.Menu.mnuCanvasPaste.Enabled) return;

this.Menu.OnSetMenuEnabled(EventArgs.Empty);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="Paste" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 18:59:07">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/27 10:09:15" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/27 10:09:22" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="161" SelectionLength="0">string xml = Clipboard.GetDataObject().GetData(this.DataFormat) as string;
if (xml == null || xml.Length &lt; 1) return;

this.CreateFromXml(xml, this.clickPoint);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="Delete" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 13:42:53">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 22:58:56" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/19 22:58:59" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="262" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null) return;

this.canvas.SortByOrder(sels);
foreach (CanvasObject sel in sels)
{
	this.canvas.Items.Remove(sel);
	this.canvas.Invalidate(sel);
}
this.canvas.SelectItem(null);

this.SetUndoNew(sels);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="Group" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 23:15:29">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/26 7:54:45" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/26 7:54:47" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="143" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
this.canvas.Group(sels);
this.canvas.SelectedItems = sels;
this.Invalidate();

this.Change();
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="Ungroup" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 23:15:35">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/26 7:54:31" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/26 7:54:36" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="145" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
this.canvas.Ungroup(sels);
this.canvas.SelectedItems = sels;
this.Invalidate();

this.Change();
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="FrontMost" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 23:15:51">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 22:58:45" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/19 22:58:48" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="228" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null) return;

foreach (CanvasObject sel in sels)
{
	this.canvas.Items.Remove(sel);
	this.canvas.Items.Insert(0, sel);
	this.canvas.Invalidate(sel);
}

this.Change();
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="BackMost" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 23:15:59">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/19 22:58:56" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/19 22:58:59" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="222" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null) return;

foreach (CanvasObject sel in sels)
{
	this.canvas.Items.Remove(sel);
	this.canvas.Items.Add(sel);
	this.canvas.Invalidate(sel);
}

this.Change();
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="AlwaysFrontMost" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 13:54:57">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/12 7:17:52" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/12 7:17:54" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="194" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null) return;

foreach (CanvasObject sel in sels)
{
	sel.FrontMost = !sel.FrontMost;
	this.canvas.Invalidate(sel);
}

this.Change();
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="AlwaysBackMost" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 13:56:24">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/12 7:17:52" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/12 7:17:54" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="192" SelectionLength="0">CanvasObject[] sels = this.canvas.SelectedItems;
if (sels == null) return;

foreach (CanvasObject sel in sels)
{
	sel.BackMost = !sel.BackMost;
	this.canvas.Invalidate(sel);
}

this.Change();
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="AddVertex" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/12 11:38:13">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/12 11:06:16" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/12 11:06:18" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="328" SelectionLength="0">if (this.corner == null) return;

CanvasPolygon poly = this.corner.Target as CanvasPolygon;
if (poly == null) return;

poly.MemorizeStatus();
this.canvas.Invalidate(poly);
poly.AddVertex(this.corner.Index);
poly.InitSelection(this.corner.Selection);
this.canvas.Invalidate(poly);

this.SetUndoBounds(new CanvasObject[] {poly});
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="RemoveVertex" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/15 11:13:15">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/12 11:06:23" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/12 11:06:25" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="253" SelectionLength="0">if (this.corner == null) return;

CanvasPolygon poly = this.corner.Target as CanvasPolygon;
if (poly == null || poly.Points.Length &lt;= 2) return;

poly.MemorizeStatus();
this.canvas.Invalidate(poly);
poly.RemoveVertex(this.corner.Index, this.canvas.Angle);
poly.InitSelection(this.corner.Selection);
this.canvas.Invalidate(poly);

this.SetUndoBounds(new CanvasObject[] {poly});
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="MoveTo" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 13:57:24">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 13:45:00" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/13 13:45:04" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="93" SelectionLength="0">this.MoveItems(this.cmnPos.X, this.cmnPos.Y);
this.SetUndoBounds(this.canvas.SelectedItems);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="CopyTo" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 13:57:32">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/13 13:44:52" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/13 13:44:55" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="111" SelectionLength="0">this.CopyItems();
this.MoveItems(this.cmnPos.X, this.cmnPos.Y);
this.SetUndoDelete(this.canvas.SelectedItems);
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Folder" Text="印刷" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/06 17:31:54">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="SelectPrint" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 3:42:15">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 15:10:25" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/01 15:10:29" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="16" SelectionLength="0">this.Cancel();

this.eventStatus = "PrepareSelectPrint";
this.Cursor = Cursors.Cross;
this.SetSelBoxColor();
this.vline.Pen.Color = ImageManipulator.Swap(this.selBox.Pen.Color,
	PrimaryColors.Red, PrimaryColors.Blue, PrimaryColors.Green);
this.SetLines();
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="ResetPrint" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/06 17:31:58">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/02 9:52:00" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/02 9:52:03" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="87" SelectionLength="0">if (!this.printBox.Visible) return;

this.printBox.Visible = false;
this.Invalidate();
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="DisplayPrint" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 19:39:47">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/02 15:11:27" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/02 15:11:31" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="101" SelectionLength="0">if (!this.printBox.Visible) return;

this.SetDisplayArea(this.printBox.Bounds, this.printBox.Angle);
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Folder" Text="新規作成" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/23 15:55:31">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="NewLine" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 4:02:03">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/23 15:59:32" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/23 15:59:36" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="219" SelectionLength="0">this.canvas.SelectItem(null);
PointF pt = this.PointToCanvas(this.clickPoint);
PointF pt1 = new PointF(pt.X - 16, pt.Y - 16);
PointF pt2 = new PointF(pt.X + 16, pt.Y + 16);
this.BeginAddItem(new CanvasLines(pt1, pt2));
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="NewArrow" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 4:02:11">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/23 15:59:32" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/23 15:59:36" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="330" SelectionLength="0">this.canvas.SelectItem(null);
PointF pt = this.PointToCanvas(this.clickPoint);
PointF pt1 = new PointF(pt.X - 16, pt.Y - 16);
PointF pt2 = new PointF(pt.X + 16, pt.Y + 16);
CanvasLines cl = new CanvasLines(pt1, pt2);
cl.Pen = new Pen(Color.Black);
cl.Pen.CustomEndCap = new AdjustableArrowCap(5, 5, false);
this.BeginAddItem(cl);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="NewRectangle" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 2:29:06">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/23 15:59:32" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/23 15:59:36" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="153" SelectionLength="0">this.canvas.SelectItem(null);
PointF pt = this.PointToCanvas(this.clickPoint);
this.BeginAddItem(new CanvasRectangle(pt.X - 16F, pt.Y - 16F, 32F, 32F));
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="NewEllipse" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 2:29:14">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/23 15:59:32" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/23 15:59:36" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="151" SelectionLength="0">this.canvas.SelectItem(null);
PointF pt = this.PointToCanvas(this.clickPoint);
this.BeginAddItem(new CanvasEllipse(pt.X - 16F, pt.Y - 16F, 32F, 32F));
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="NewString" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 2:29:20">
            <Arguments>
              <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/23 15:59:32" />
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/23 15:59:36" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="135" SelectionLength="0">this.canvas.SelectItem(null);
PointF pt = this.PointToCanvas(this.clickPoint);
this.BeginAddItem(new CanvasString(pt.X, pt.Y, "文字列"));
</Source>
          </HAFunc>
        </HAFunc>
      </HAFunc>
      <HAFunc Type="Folder" Text="XML" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/07/03 2:32:57">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="CreateFromXml" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 13:56:43">
          <Arguments>
            <HAObject Type="Private" Text="xml:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/06/30 14:29:29" />
            <HAObject Type="Private" Text="pt:Point" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/30 14:29:33" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="430" SelectionLength="0">CanvasObject[] cos = this.DeserializeItems(xml);
if (cos == null) return;

PointF pt2 = this.PointToCanvas(pt);
PointF pt3 = Canvas.GetItemsCenter(cos);
float dx = pt2.X - pt3.X, dy = pt2.Y - pt3.Y;
Hashtable guidTable = this.canvas.GetGuidTable();
foreach (CanvasObject co in cos)
{
	co.CheckGuid(guidTable);
	co.Offset(dx, dy);
}
this.canvas.Items.InsertRange(0, cos);

this.canvas.SelectedItems = cos;
this.SetUndoDelete(cos);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="SerializeItem:string" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 11:35:31">
          <Arguments>
            <HAObject Type="Private" Text="co:CanvasObject" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/27 9:13:23" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="164" SelectionLength="0">StringWriter sw = new StringWriter();
XmlTextWriter xw = new XmlTextWriter(sw);
this.Serializer.Write(xw, null, co);
xw.Close();
sw.Close();

return sw.ToString();
</Source>
          <HAFunc Type="Public" Text="DeserializeItem:CanvasObject" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 19:20:19">
            <Arguments>
              <HAObject Type="Private" Text="xml:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/27 9:44:06" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="244" SelectionLength="0">ArrayList list = new ArrayList();
StringReader sr = new StringReader(xml);
XmlTextReader xr = new XmlTextReader(sr);

CanvasObject ret = null;
if (xr.Read()) ret = this.Serializer.Read(xr) as CanvasObject;

xr.Close();
sr.Close();

return ret;
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="SerializeItems:string" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/07/16 14:37:09">
          <Arguments>
            <HAObject Type="Private" Text="cos:CanvasObject[]" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/27 9:13:23" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="94" SelectionLength="0">return Canvas.SerializeItems(
	cos, this.XmlElement, this.Serializer, this.canvas.Transform);
</Source>
          <HAFunc Type="Public" Text="DeserializeItems:CanvasObject[]" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 19:20:38">
            <Arguments>
              <HAObject Type="Private" Text="xml:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/27 9:44:06" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="1059" SelectionLength="0">Matrix m = null;
ArrayList list = new ArrayList();
StringReader sr = new StringReader(xml);
XmlTextReader xr = new XmlTextReader(sr);

while (xr.Read())
{
	if (xr.Name == this.XmlElement &amp;&amp; xr.NodeType == XmlNodeType.EndElement)
	{
		break;
	}
	else if (xr.Name == "Transform" &amp;&amp; xr.NodeType == XmlNodeType.Element &amp;&amp; !xr.IsEmptyElement)
	{
		if (m != null) m.Dispose();
		m = this.Serializer.ReadMatrix(xr);
	}
	else if (xr.Name == "Items" &amp;&amp; xr.NodeType == XmlNodeType.Element &amp;&amp; !xr.IsEmptyElement)
	{
		while (xr.Read())
		{
			if (xr.Name == "Items" &amp;&amp; xr.NodeType == XmlNodeType.EndElement)
			{
				break;
			}
			else if (xr.NodeType == XmlNodeType.Element)
			{
				object obj = this.Serializer.Read(xr);
				if (obj != null &amp;&amp; obj is CanvasObject) list.Add(obj);
			}
		}
	}
}

xr.Close();
sr.Close();

float an = 0F;
if (m != null)
{
	an = Geometry.GetAngle(m);
	m.Dispose();
}
if (list.Count &lt; 1) return null;

CanvasObject[] ret = list.ToArray(typeof(CanvasObject)) as CanvasObject[];
Canvas.RotateItems(ret, this.canvas.Angle - an);
return ret;
</Source>
          </HAFunc>
        </HAFunc>
      </HAFunc>
      <HAFunc Type="Folder" Text="操作" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 15:57:56">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="Change" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 23:29:52">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0">if (this.CanUndo) this.opsUndo.Clear();
if (this.CanRedo) this.opsRedo.Clear();

this.OnChanged(EventArgs.Empty);
</Source>
          <HAFunc Type="Protected" Text="OnChanged:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 23:10:45">
            <Arguments>
              <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/06/26 13:28:33" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="49" SelectionLength="0">if (this.Changed != null) this.Changed(this, e);
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Protected" Text="SetUndo" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/07/11 17:57:12">
          <Arguments>
            <HAObject Type="Private" Text="ops:Operation[]" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/09 10:04:45" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="98" SelectionLength="0">this.opsUndo.Push(ops);
if (this.CanRedo) this.opsRedo.Clear();

this.OnChanged(EventArgs.Empty);
</Source>
          <HAFunc Type="Public" Text="SetUndoBounds" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/12 9:58:15">
            <Arguments>
              <HAObject Type="Private" Text="cos:CanvasObject[]" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/08 15:58:15" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="256" SelectionLength="0">if (cos == null || cos.Length &lt; 1) return;

Operation[] ops = new Operation[cos.Length + 1];
ops[0] = new Operation("Deselect");
int i = 1;
foreach (CanvasObject co in cos)
{
	ops[i++] = new Operation("Bounds", co.Guid, co.TagBounds);
}
this.SetUndo(ops);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="SetUndoAngle" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/11 11:28:51">
            <Arguments>
              <HAObject Type="Private" Text="cos:CanvasObject[]" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/08 16:03:56" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="260" SelectionLength="0">if (cos == null || cos.Length &lt; 1) return;

Operation[] ops = new Operation[cos.Length + 1];
ops[0] = new Operation("Deselect");
int i = 1;
foreach (CanvasObject co in cos)
{
	ops[i++] = new Operation("Angle", co.Guid, co.MemorizedAngle);
}
this.SetUndo(ops);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="SetUndoNew" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 23:30:00">
            <Arguments>
              <HAObject Type="Private" Text="cos:CanvasObject[]" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/09 9:41:13" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="263" SelectionLength="0">if (cos == null || cos.Length &lt; 1) return;

Operation[] ops = new Operation[cos.Length + 1];
ops[0] = new Operation("Deselect");
int i = 1;
foreach (CanvasObject co in cos)
{
	ops[i++] = new Operation("New", co.Guid, this.SerializeItem(co));
}
this.SetUndo(ops);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="SetUndoDelete" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 23:30:02">
            <Arguments>
              <HAObject Type="Private" Text="cos:CanvasObject[]" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/09 9:46:20" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="242" SelectionLength="0">if (cos == null || cos.Length &lt; 1) return;

Operation[] ops = new Operation[cos.Length + 1];
ops[0] = new Operation("Deselect");
int i = 1;
foreach (CanvasObject co in cos)
{
	ops[i++] = new Operation("Delete", co.Guid);
}
this.SetUndo(ops);
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="Operate:virtual" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 3:42:28">
          <Arguments>
            <HAObject Type="Private" Text="op:Operation" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/08 14:16:40" />
            <HAObject Type="Private" Text="guidTable:Hashtable" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 14:19:18" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="336" SelectionLength="0">this.Cancel();

switch (op.Name)
{
	case "Bounds":
		this.OperateBounds(op, guidTable);
		break;
	case "Angle":
		this.OperateAngle(op, guidTable);
		break;
	case "Deselect":
		this.canvas.SelectItem(null);
		break;
	case "New":
		this.OperateNew(op, guidTable);
		break;
	case "Delete":
		this.OperateDelete(op, guidTable);
		break;
}
</Source>
          <HAFunc Type="Public" Text="OperateBounds" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/12 10:04:42">
            <Arguments>
              <HAObject Type="Private" Text="op:Operation" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/08 14:16:40" />
              <HAObject Type="Private" Text="guidTable:Hashtable" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 14:19:18" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="167" SelectionLength="0">if (guidTable == null || !guidTable.Contains(op.Guid)) return;

CanvasObject co = guidTable[op.Guid] as CanvasObject;
this.canvas.Invalidate(co);
co.MemorizeStatus();
co.TagBounds = op.Tag;
op.Tag = co.TagBounds;
this.canvas.ToggledSelectItem(co);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="OperateAngle" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/11 13:03:18">
            <Arguments>
              <HAObject Type="Private" Text="op:Operation" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/08 14:16:40" />
              <HAObject Type="Private" Text="guidTable:Hashtable" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 14:19:18" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="256" SelectionLength="0">if (guidTable == null || !guidTable.Contains(op.Guid)) return;

CanvasObject co = guidTable[op.Guid] as CanvasObject;
this.canvas.Invalidate(co);
co.MemorizeStatus();
co.Angle = (float)op.Tag;
op.Tag = co.MemorizedAngle;
this.canvas.ToggledSelectItem(co);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="OperateNew" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/10 20:01:09">
            <Arguments>
              <HAObject Type="Private" Text="op:Operation" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/08 14:16:40" />
              <HAObject Type="Private" Text="guidTable:Hashtable" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 14:19:18" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="136" SelectionLength="0">CanvasObject co = this.DeserializeItem(op.Tag as string);
co.CheckGuid(guidTable);
this.canvas.Items.Insert(Math.Max(co.Order, 0), co);
this.canvas.ToggledSelectItem(co);
op.Name = "Delete";
op.Tag  = null;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="OperateDelete" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/09 22:50:48">
            <Arguments>
              <HAObject Type="Private" Text="op:Operation" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/08 14:16:40" />
              <HAObject Type="Private" Text="guidTable:Hashtable" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/08 14:19:18" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="300" SelectionLength="0">if (guidTable == null || !guidTable.Contains(op.Guid)) return;

CanvasObject co = guidTable[op.Guid] as CanvasObject;
op.Name = "New";
op.Tag  = this.SerializeItem(co);
this.canvas.Items.Remove(co);
this.canvas.Invalidate(co);
if (this.canvas.SelectedItems != null) this.canvas.SelectedItems = null;
</Source>
          </HAFunc>
        </HAFunc>
      </HAFunc>
      <HAFunc Type="Public" Text="Draw:virtual" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/08/10 17:53:44">
        <Arguments>
          <HAObject Type="Private" Text="e:PaintEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/02 9:29:54" />
        </Arguments>
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="1043" SelectionLength="0">RectangleF r = e.ClipRectangle;
Matrix old = this.Transform, m;
if (this.printBox.Visible)
{
	float zx = Math.Abs(r.Width / this.printBox.Width);
	float zy = Math.Abs(r.Height / this.printBox.Height);
	float zoom = (zx &lt; zy) ? zx : zy;
	PointF cpt1 = this.printBox.CenterPoint;
	m = new Matrix();
	m.Translate(-cpt1.X, -cpt1.Y);
	Geometry.ScaleAt(m, zoom, zoom, cpt1);
	Matrix mm = m.Clone();
	mm.Invert();
	PointF cpt2 = Geometry.TransformPoint(mm, Geometry.GetCenter(r));
	mm.Dispose();
	m.Translate(cpt2.X - cpt1.X, cpt2.Y - cpt1.Y);
	r = Geometry.TransformRectangle(m, this.printBox.Bounds);
	m.RotateAt(-this.printBox.Angle, cpt1);
}
else
{
	PointF cpt1 = this.CenterPointInCanvas;
	PointF cpt2 = this.PointToCanvas(Geometry.GetCenter(r));
	m = old.Clone();
	m.Translate(cpt2.X - cpt1.X, cpt2.Y - cpt1.Y);
}
this.Transform = m;
e.Graphics.SetClip(r);

CanvasObject[] sels = this.canvas.SelectedItems;
CanvasObject sel = this.canvas.SelectedItem;
this.canvas.SelectedItems = null;
this.DrawCanvas(e);
this.canvas.SetSelection(sels, sel);

e.Graphics.ResetClip();
this.Transform = old;
m.Dispose();
this.DrawOthers(e);
</Source>
        <HAFunc Type="Protected" Text="DrawCanvas:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/02 10:12:39">
          <Arguments>
            <HAObject Type="Private" Text="e:PaintEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/02 10:12:39" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="21" SelectionLength="0">this.canvas.Draw(e);
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="DrawOthers:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/02 10:13:10">
          <Arguments>
            <HAObject Type="Private" Text="e:PaintEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/02 10:13:10" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
        </HAFunc>
      </HAFunc>
      <HAFunc Type="Public" Text="BeginAddItem" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/14 3:42:03">
        <Arguments>
          <HAObject Type="Private" Text="co:CanvasObject" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/14 2:19:56" />
        </Arguments>
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="15" SelectionLength="0">this.Cancel();

this.eventStatus = "PrepareAddItem";
this.Cursor = Cursors.Cross;
this.SetSelBoxColor();
this.vline.Pen.Color = this.selBox.Pen.Color;
this.SetLines();
this.addItem = co;
</Source>
      </HAFunc>
    </HAFunc>
  </Body>
  <Footer>
    <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/06/19 13:14:49">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0" />
      <Source SelectionStart="0" SelectionLength="0" />
    </HAFunc>
  </Footer>
  <HAClass Link="DrawingBoxContextMenu.hacls" />
</HAClass>