<?xml version="1.0" encoding="utf-8"?>
<HAClass Type="Folder" Text="Coding:Coding" IsExpanded="false" IsSelected="false" AllowDrag="true">
  <Header>
    <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="true" AllowDrag="false">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0">ここにソースコードの注釈を書きます。
</Comment>
      <Source SelectionStart="0" SelectionLength="0">using System;
</Source>
    </HAFunc>
  </Header>
  <Body>
    <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
      <Source SelectionStart="0" SelectionLength="0" />
      <HAFunc Type="Comment" Text="LocalHeader" IsExpanded="false" IsSelected="true" AllowDrag="true">
        <Arguments />
        <Comment SelectionStart="72" SelectionLength="0">フォルダの関数欄に作成した "LocalHeader" 名の注釈は特別です。
ソース欄がフォルダ内すべてのクラスにコメントとして挿入されます。
</Comment>
        <Source SelectionStart="33" SelectionLength="0">このファイルは Coding.hacls から生成されています。
</Source>
      </HAFunc>
    </HAFunc>
  </Body>
  <Footer>
    <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0" />
      <Source SelectionStart="0" SelectionLength="0" />
    </HAFunc>
  </Footer>
  <HAClass Type="Public" Text="ParserBase" IsExpanded="false" IsSelected="false" AllowDrag="true">
    <HAObject Type="Protected" Text="reader:TextReader" IsExpanded="false" IsSelected="false" AllowDrag="true" />
    <HAObject Type="Protected" Text="source:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
    <HAObject Type="Protected" Text="lineNumber:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
    <HAObject Type="Protected" Text="pos:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
    <HAObject Type="Protected" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
    <HAObject Type="Protected" Text="spacing:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
    <HAObject Type="Protected" Text="keyWords:string[]" IsExpanded="false" IsSelected="false" AllowDrag="true" />
    <HAObject Type="Protected" Text="rtf:RtfDocument" IsExpanded="false" IsSelected="false" AllowDrag="true" />
    <HAObject Type="Protected" Text="access:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
    <HAObject Type="Folder" Text="Color" IsExpanded="true" IsSelected="false" AllowDrag="true">
      <HAObject Type="Public" Text="Color_Default:Color" IsExpanded="false" IsSelected="false" AllowDrag="true" />
      <HAObject Type="Public" Text="Color_KeyWord:Color" IsExpanded="false" IsSelected="false" AllowDrag="true" />
      <HAObject Type="Public" Text="Color_Comment:Color" IsExpanded="false" IsSelected="false" AllowDrag="true" />
      <HAObject Type="Public" Text="Color_String:Color" IsExpanded="false" IsSelected="false" AllowDrag="true" />
      <HAObject Type="Public" Text="Color_Directive:Color" IsExpanded="false" IsSelected="false" AllowDrag="true" />
    </HAObject>
    <Header>
      <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="88" SelectionLength="0">using System;
using System.Drawing;
using System.IO;
using System.Text;
using Girl.Rtf;
</Source>
      </HAFunc>
    </Header>
    <Body>
      <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="40" SelectionLength="0">&lt;summary&gt;
プルモデルによる C 型言語向けパーサのベースクラスです。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="244" SelectionLength="0">this.reader   = null;
this.keyWords = null;

this.Color_Default   = Color.Black;
this.Color_KeyWord   = Color.Blue;
this.Color_Comment   = Color.DarkGreen;
this.Color_String    = Color.Magenta;
this.Color_Directive = Color.DarkMagenta;
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="Init:virtual" IsExpanded="false" IsSelected="true" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="141" SelectionLength="0">this.source     = new StringBuilder();
this.lineNumber = 1;
this.text       = "";
this.spacing    = "";
this.rtf        = new RtfDocument();
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Read:virtual bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="137" SelectionLength="0">if (this.text.Length &lt; 1) return false;

this.rtf.AppendText(this.spacing);
this.rtf.AppendText(this.text, this.TextColor);
return true;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Close" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="142" SelectionLength="0">if (this.spacing != "")
{
	this.rtf.AppendText(this.spacing);
	if (this.spacing.EndsWith("\n")) this.rtf.AppendLine();
}

this.reader = null;
</Source>
        </HAFunc>
        <HAFunc Type="Folder" Text="Properties" IsExpanded="true" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="get_Reader:TextReader" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="21" SelectionLength="0">return this.reader;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="set_Reader:TextReader" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="36" SelectionLength="0">this.reader = value;
this.Init();
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_Source:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="32" SelectionLength="0">return this.source.ToString();
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_LineNumber:int" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="24" SelectionLength="0">return this.lineNumber;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_Pos:int" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="17" SelectionLength="0">return this.pos;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_Text:string" IsExpanded="true" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="18" SelectionLength="0">return this.text;
</Source>
            <HAFunc Type="Public" Text="get_IsKeyWord:virtual bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="139" SelectionLength="0">if (this.keyWords == null) return false;

foreach (string kw in this.KeyWords)
{
	if (this.text == kw) return true;
}
return false;
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="get_IsComment:virtual bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="15" SelectionLength="0">return false;
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="get_IsString:virtual bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="15" SelectionLength="0">return false;
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="get_IsDirective:virtual bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="15" SelectionLength="0">return false;
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="get_TextColor:virtual Color" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="269" SelectionLength="0">if (this.IsKeyWord)
{
	return this.Color_KeyWord;
}
else if (this.IsComment)
{
	return this.Color_Comment;
}
else if (this.IsString)
{
	return this.Color_String;
}
else if (this.IsDirective)
{
	return this.Color_Directive;
}
return this.Color_Default;
</Source>
            </HAFunc>
          </HAFunc>
          <HAFunc Type="Public" Text="get_Spacing:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="22" SelectionLength="0">return this.spacing;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_KeyWords:string[]" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="22" SelectionLength="0">return this.keyWords;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_Rtf:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="25" SelectionLength="0">return this.rtf.ToRtf();
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_Access:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="20" SelectionLength="0">return this.access;
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="Parse:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="35" SelectionLength="0">while (this.Read());
this.Close();
</Source>
        </HAFunc>
      </HAFunc>
    </Body>
    <Footer>
      <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
    </Footer>
  </HAClass>
  <HAClass Type="Public" Text="CParserBase:ParserBase" IsExpanded="false" IsSelected="false" AllowDrag="true">
    <HAObject Type="Protected" Text="separator:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
    <HAObject Type="Private" Text="preText:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
    <HAObject Type="Private" Text="preChar:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
    <HAObject Type="Private" Text="curChar:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
    <HAObject Type="Private" Text="nextChar:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
    <HAObject Type="Private" Text="curLineNum:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
    <HAObject Type="Private" Text="prePos:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
    <HAObject Type="Private" Text="curPos:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
    <Header>
      <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="31" SelectionLength="0">using System;
using System.IO;
</Source>
      </HAFunc>
    </Header>
    <Body>
      <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="40" SelectionLength="0">&lt;summary&gt;
プルモデルによる C 型言語向けパーサのベースクラスです。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="112" SelectionLength="0">private enum State
{
	Normal,
	Comment1,
	Comment2,
	Directive,
	String,
	StringAt,
	Char,
	Number
}
</Source>
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="0" SelectionLength="0" />
        </HAFunc>
        <HAFunc Type="Protected" Text="Init:override" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="234" SelectionLength="0">base.Init();

this.separator = ";,.(){}[]*";

this.preText    = "";
this.preChar    = -1;
this.curChar    = -1;
this.nextChar   = -1;
this.curLineNum =  1;
this.prePos     =  0;
this.curPos     =  0;
this.pos        =  0;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Read:override bool" IsExpanded="false" IsSelected="true" AllowDrag="true">
          <Arguments />
          <HAObject Type="Private" Text="ch:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="st:State" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="416" SelectionLength="0">this.preText = this.text;
this.text = this.spacing = "";
ch = -1;
st = State.Normal;

for (;;)
{
	if (this.text.Length &lt; 1)
	{
		this.lineNumber = this.curLineNum;
		this.prePos = this.pos;
		this.pos = this.curPos;
	}
	ch = ReadChar();
	if (ch == -1) break;

	if (st == State.String || st == State.StringAt
		|| st == State.Char || st == State.Comment1)
	{
	}
	else if (st == State.Comment2 || st == State.Directive)
	{
		if (ch == '\r' || ch == '\n')
		{
			this.nextChar = ch;
			break;
		}
	}
	else if (" \t\r\n".IndexOf((char)ch) &gt;= 0) 
	{
		if (this.text.Length &gt; 0)
		{
			this.nextChar = ch;
			break;
		}
		this.spacing += (char)ch;
		continue;
	}
	else if (ch == '"')
	{
		if (this.text.Length &lt; 1)
		{
			st = State.String;
		}
		else if (this.text == "@")
		{
			st = State.StringAt;
		}
		else if (st != State.String)
		{
			this.nextChar = ch;
			break;
		}
	}
	else if (ch == '\'')
	{
		if (this.text.Length &lt; 1)
		{
			st = State.Char;
		}
		else if (st != State.Char)
		{
			this.nextChar = ch;
			break;
		}
	}
	else if (ch == '.')
	{
		if (this.text.Length &gt; 0 &amp;&amp; st != State.Number)
		{
			this.nextChar = ch;
			break;
		}
	}
	else if (this.text == "/" &amp;&amp; ch == '*')
	{
	}
	else if (this.text.Length &gt; 0
		&amp;&amp; this.separator.IndexOf((char)ch) &gt;= 0)
	{
		this.nextChar = ch;
		break;
	}

	this.text += (char)ch;
	if (this.text.Length == 1) 
	{
		this.lineNumber = this.curLineNum;
		if (this.text == "#") 
		{
			st = State.Directive;
		}
		else if (this.separator.IndexOf(this.text) &gt;= 0)
		{
			this.preChar = ch;
			break;
		}
	}
	else if (this.text == "/*") 
	{
		st = State.Comment1;
	}
	else if (this.text == "//")
	{
		st = State.Comment2;
	}
	else if (this.text == "#") 
	{
		st = State.Directive;
	}
	else if (this.text.Length == 1 &amp;&amp; '0' &lt;= ch &amp;&amp; ch &lt;= '9')
	{
		st = State.Number;
	}

	if (st == State.Comment1)
	{
		if (this.preChar == '*' &amp;&amp; ch == '/') break;
	} 
	else if (st == State.String)
	{
		if (this.text.Length &gt; 1 &amp;&amp; this.preChar != '\\'
			&amp;&amp; ch == '"')
		{
			break;
		}
	}
	else if (st == State.StringAt)
	{
		if (this.text.Length &gt; 2 &amp;&amp; ch == '"') break;
	}
	else if (st == State.Char)
	{
		if (this.text.Length &gt; 1 &amp;&amp; this.preChar != '\\'
			&amp;&amp; ch == '\'')
		{
			break;
		}
	}
}

return base.Read();
</Source>
        </HAFunc>
        <HAFunc Type="Private" Text="ReadChar:int" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="376" SelectionLength="0">if (this.nextChar != -1) 
{
	this.curChar = this.nextChar;
	this.nextChar = -1;
} 
else 
{
	this.preChar = this.curChar;
	this.curChar = this.reader.Read();
	if (this.curChar != -1)
	{
		this.curPos++;
		this.source.Append((char)this.curChar);
	}
	if (this.curChar == '\r'
		|| (this.preChar != '\r' &amp;&amp; this.curChar == '\n'))
	{
		this.curLineNum++;
	}
}
return this.curChar;
</Source>
        </HAFunc>
        <HAFunc Type="Folder" Text="Properties" IsExpanded="true" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="get_IsComment:override bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="66" SelectionLength="0">return this.text.StartsWith("/*") || this.text.StartsWith("//");
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_IsString:override bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="65" SelectionLength="0">return this.text.StartsWith("\"") || this.text.StartsWith("'");
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_IsDirective:override bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="35" SelectionLength="0">return this.text.StartsWith("#");
</Source>
          </HAFunc>
        </HAFunc>
      </HAFunc>
    </Body>
    <Footer>
      <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
    </Footer>
  </HAClass>
  <HAClass Type="Public" Text="CSharpParser:CParserBase" IsExpanded="false" IsSelected="false" AllowDrag="true">
    <HAObject Type="Protected" Text="objects:ArrayList" IsExpanded="false" IsSelected="true" AllowDrag="true" />
    <Header>
      <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="40" SelectionLength="0">using System;
using System.Collections;
</Source>
      </HAFunc>
    </Header>
    <Body>
      <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="30" SelectionLength="0">&lt;summary&gt;
プルモデルによる C# のパーサです。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="0" SelectionLength="0">this.keyWords = new string[]
	{
		"abstract", "as", "base", "bool",
		"break", "byte", "case", "catch",
		"char", "checked", "class", "const",
		"continue", "decimal", "default", "delegate",
		"do", "double", "else", "enum",
		"event", "explicit", "extern", "false",
		"finally", "fixed", "float", "for",
		"foreach", "goto", "if", "implicit",
		"in", "int", "interface", "internal",
		"is", "lock", "long", "namespace",
		"new", "null", "object", "operator",
		"out", "override", "params", "private",
		"protected", "public", "readonly", "ref",
		"return", "sbyte", "sealed", "short",
		"sizeof", "stackalloc", "static", "string",
		"struct", "switch", "this", "throw",
		"true", "try", "typeof", "uint",
		"ulong", "unchecked", "unsafe", "ushort",
		"using", "virtual", "volatile", "void",
		"while"
	};
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="Init:override" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="72" SelectionLength="0">base.Init();

this.objects = new ArrayList();
this.access  = "private";
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Read:override bool" IsExpanded="false" IsSelected="true" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="206" SelectionLength="0">bool ret = base.Read();
if (this.text == "public"
	|| this.text == "protected"
	|| this.text == "private")
{
	this.access = this.text;
}
else if (this.text == "}")
{
	this.access = "private";
}
return ret;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Parse:override" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0">string text;

while (this.Read())
{
	text = this.Text;
	
	if (text == "namespace")
	{
		ASTNamespace an = new ASTNamespace();
		an.ParseDeclaration(this);
		this.objects.Add(an);
	}
	else if (text == "class")
	{
		ASTClass ac = new ASTClass();
		ac.ParseDeclaration(this);
		this.objects.Add(ac);
	}
}

this.Close();
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_Objects:ArrayList" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="21" SelectionLength="0">return this.objects;
</Source>
        </HAFunc>
      </HAFunc>
    </Body>
    <Footer>
      <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
    </Footer>
  </HAClass>
  <HAClass Type="Public" Text="ASTObject" IsExpanded="true" IsSelected="false" AllowDrag="true">
    <HAObject Type="Public" Text="Name:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
    <HAObject Type="Public" Text="Pos:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
    <HAObject Type="Public" Text="DeclarationPos:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
    <HAObject Type="Protected" Text="objects:ArrayList" IsExpanded="false" IsSelected="false" AllowDrag="true" />
    <Header>
      <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="true" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="40" SelectionLength="0">using System;
using System.Collections;
</Source>
      </HAFunc>
    </Header>
    <Body>
      <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="10" SelectionLength="0">&lt;summary&gt;
抽象構文木の要素を表します。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="28" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="84" SelectionLength="0">this.Name = "";
this.Pos = this.DeclarationPos = 0;
this.objects = new ArrayList();
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_Objects:ArrayList" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="21" SelectionLength="0">return this.objects;
</Source>
        </HAFunc>
      </HAFunc>
    </Body>
    <Footer>
      <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
    </Footer>
    <HAClass Type="Public" Text="ASTNamespace:ASTObject" IsExpanded="false" IsSelected="false" AllowDrag="true">
      <Header>
        <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="true" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="32" SelectionLength="0">using System;
using System.Text;</Source>
        </HAFunc>
      </Header>
      <Body>
        <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="39" SelectionLength="0">&lt;summary&gt;
抽象構文木での名前空間を表します。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
            <Source SelectionStart="0" SelectionLength="0" />
          </HAFunc>
          <HAFunc Type="Public" Text="ParseDeclaration" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="parser:ParserBase" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="34" SelectionLength="0">this.DeclarationPos = parser.Pos;
string text;
StringBuilder sb = new StringBuilder();

while (parser.Read())
{
	text = parser.Text;
	
	if (text == "{")
	{
		this.Name = sb.ToString();
		this.Parse(parser);
		break;
	}
	else
	{
		sb.Append(text);
	}
}
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="Parse" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="parser:ParserBase" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="48" SelectionLength="0">string text;
int level = 0;
bool first = true;

while (parser.Read())
{
	if (first)
	{
		this.Pos = parser.Pos;
		first = false;
	}
	text = parser.Text;
	
	if (text == "{")
	{
		level++;
	}
	else if (text == "}")
	{
		level--;
		if (level &lt; 0) break;
	}
	else if (text == "class")
	{
		ASTClass ac = new ASTClass();
		ac.ParseDeclaration(parser);
		this.objects.Add(ac);
	}
}
</Source>
          </HAFunc>
        </HAFunc>
      </Body>
      <Footer>
        <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
        </HAFunc>
      </Footer>
    </HAClass>
    <HAClass Type="Public" Text="ASTClass:ASTObject" IsExpanded="false" IsSelected="false" AllowDrag="true">
      <HAObject Type="Public" Text="Access:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
      <Header>
        <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="40" SelectionLength="0">using System;
using System.Collections;
</Source>
        </HAFunc>
      </Header>
      <Body>
        <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="26" SelectionLength="0">&lt;summary&gt;
抽象構文木でのクラスを表します。
&lt;/summary&gt;
</Comment>
            <Source SelectionStart="0" SelectionLength="0" />
          </HAFunc>
          <HAFunc Type="Public" Text="ParseDeclaration" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="parser:ParserBase" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="34" SelectionLength="0">this.DeclarationPos = parser.Pos;
string text;

while (parser.Read())
{
	text = parser.Text;
	if (this.Name == "") this.Name = text;
	if (text == "{")
	{
		this.Access = parser.Access;
		this.Parse(parser);
		break;
	}
}
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="Parse" IsExpanded="true" IsSelected="true" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="parser:ParserBase" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="913" SelectionLength="0">int level = 0;
bool ignore = false;
string text = parser.Text, preText;
int pos = parser.Pos, prePos;
bool first = true;
Stack region = new Stack();

while (parser.Read())
{
	if (first)
	{
		this.Pos = parser.Pos;
		first = false;
	}
	preText = text;
	prePos  = pos;
	text = parser.Text;
	pos  = parser.Pos;
	
	if (text == "{")
	{
		if (level == 0 &amp;&amp; !ignore)
		{
			this.ParseProperty(parser, region, preText, prePos);
		}
		else
		{
			level++;
		}
	}
	else if (text == "}")
	{
		level--;
		if (level &lt; 0) break;
	}
	else if (text == "=" || text == "delegate")
	{
		ignore = true;
	}
	else if (text == ";")
	{
		ignore = false;
	}
	else if (text == "(" &amp;&amp; level == 0 &amp;&amp; !ignore)
	{
		ASTMethod am = new ASTMethod();
		am.Name = preText;
		am.DeclarationPos = prePos;
		am.ParseDeclaration(parser);
		this.AddObject(region, am);
		ignore = false;
	}
	else if (text == "class" || text == "struct" || text == "enum")
	{
		ASTClass ac = new ASTClass();
		ac.ParseDeclaration(parser);
		this.objects.Add(ac);
	}
	else if (text.StartsWith("#region"))
	{
		ASTRegion ar = new ASTRegion(text, pos);
		this.AddObject(region, ar);
		region.Push(ar);
	}
	else if (text == "#endregion")
	{
		if (region.Count &gt; 0) region.Pop();
	}
}
</Source>
            <HAFunc Type="Private" Text="ParseProperty" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="parser:ParserBase" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <HAObject Type="Private" Text="region:Stack" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <HAObject Type="Private" Text="name:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <HAObject Type="Private" Text="pos:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="313" SelectionLength="0">string text = parser.Text, preText, access = parser.Access;

while (parser.Read())
{
	preText = text;
	text = parser.Text;
	
	if (text == "{")
	{
		ASTMethod am = new ASTMethod();
		am.Name = preText + "_" + name;
		am.Access = access;
		am.DeclarationPos = pos;
		am.Parse(parser);
		this.AddObject(region, am);
	}
	else if (text == "}")
	{
		break;
	}
}
</Source>
            </HAFunc>
            <HAFunc Type="Private" Text="AddObject" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="region:Stack" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <HAObject Type="Private" Text="ao:ASTObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="64" SelectionLength="0">if (region.Count &lt; 1)
{
	this.objects.Add(ao);
}
else
{
	(region.Peek() as ASTObject).Objects.Add(ao);
}
</Source>
            </HAFunc>
          </HAFunc>
        </HAFunc>
      </Body>
      <Footer>
        <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
        </HAFunc>
      </Footer>
    </HAClass>
    <HAClass Type="Public" Text="ASTMethod:ASTObject" IsExpanded="false" IsSelected="false" AllowDrag="true">
      <HAObject Type="Public" Text="Access:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
      <Header>
        <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0">using System;
</Source>
        </HAFunc>
      </Header>
      <Body>
        <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="39" SelectionLength="0">&lt;summary&gt;
抽象構文木でのメソッドを表します。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="32" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
            <Source SelectionStart="0" SelectionLength="0" />
          </HAFunc>
          <HAFunc Type="Public" Text="ParseDeclaration" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="parser:ParserBase" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="118" SelectionLength="0">this.Access = parser.Access;

while (parser.Read())
{
	if (parser.Text == "{")
	{
		this.Parse(parser);
		break;
	}
}
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="Parse" IsExpanded="false" IsSelected="true" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="parser:ParserBase" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="47" SelectionLength="0">int level = 0;
string text;
bool first = true;

while (parser.Read())
{
	if (first)
	{
		this.Pos = parser.Pos;
		first = false;
	}
	text = parser.Text;
	
	if (text == "{")
	{
		level++;
	}
	else if (text == "}")
	{
		level--;
		if (level &lt; 0) break;
	}
}
</Source>
          </HAFunc>
        </HAFunc>
      </Body>
      <Footer>
        <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
        </HAFunc>
      </Footer>
    </HAClass>
    <HAClass Type="Public" Text="ASTRegion:ASTObject" IsExpanded="false" IsSelected="false" AllowDrag="true">
      <Header>
        <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0">using System;
</Source>
        </HAFunc>
      </Header>
      <Body>
        <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="40" SelectionLength="0">&lt;summary&gt;
抽象構文木でのリージョンを表します。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="true" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="region:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="pos:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
            <Source SelectionStart="188" SelectionLength="0">int p = 8, len = region.Length;
for (; p &lt; len; p++)
{
	char ch = region[p];
	if (ch != ' ' &amp;&amp; ch != '\t') break;
}
this.Name = region.Substring(p);

this.Pos = this.DeclarationPos = pos;
</Source>
          </HAFunc>
        </HAFunc>
      </Body>
      <Footer>
        <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
        </HAFunc>
      </Footer>
    </HAClass>
  </HAClass>
</HAClass>