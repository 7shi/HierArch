<?xml version="1.0" encoding="utf-8"?>
<HAClass Type="Public" Text="ImageManipulator" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/06 13:49:25">
  <Header>
    <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/07/05 22:19:19">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0">ここにソースコードの注釈を書きます。
</Comment>
      <Source SelectionStart="39" SelectionLength="0">using System;
using System.Collections;
using System.Drawing;

namespace Girl.Drawing
{
	public enum PrimaryColors
	{
		Red, Green, Blue
	}
}
</Source>
    </HAFunc>
  </Header>
  <Body>
    <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false" LastModified="2003/07/05 22:19:46">
      <Arguments />
      <Comment SelectionStart="37" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
      <Source SelectionStart="237" SelectionLength="0">private static Point[] dirs = new Point[]
	{
		new Point( 0,  0),
		new Point( 0, -1),
		new Point( 1, -1),
		new Point( 1,  0),
		new Point( 1,  1),
		new Point( 0,  1),
		new Point(-1,  1),
		new Point(-1,  0),
		new Point(-1, -1)
	};
</Source>
      <HAFunc Type="Folder" Text="Color" IsExpanded="true" IsSelected="true" AllowDrag="true" LastModified="2003/07/06 13:49:23">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="Swap:static Color" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/06 0:54:22">
          <Arguments>
            <HAObject Type="Private" Text="c:Color" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/01 14:38:58" />
            <HAObject Type="Private" Text="r:PrimaryColors" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 14:37:30" />
            <HAObject Type="Private" Text="g:PrimaryColors" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 14:37:45" />
            <HAObject Type="Private" Text="b:PrimaryColors" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 14:37:47" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="82" SelectionLength="0">return Color.FromArgb(c.A, GetPrimary(c, r), GetPrimary(c, g), GetPrimary(c, b));
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="GetPrimary:static byte" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/06 0:54:23">
          <Arguments>
            <HAObject Type="Private" Text="c:Color" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/01 14:38:48" />
            <HAObject Type="Private" Text="p:PrimaryColors" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/01 14:38:51" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="119" SelectionLength="0">if (p == PrimaryColors.Red)
{
	return c.R;
}
else if (p == PrimaryColors.Green)
{
	return c.G;
}
else
{
	return c.B;
}
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Invert:static Color" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/06 0:54:25">
          <Arguments>
            <HAObject Type="Private" Text="c:Color" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/05 22:17:05" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="61" SelectionLength="0">return Color.FromArgb(c.A, 255 - c.R, 255 - c.G, 255 - c.B);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Mix:static Color" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/06 1:03:23">
          <Arguments>
            <HAObject Type="Private" Text="c1:Color" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/06 1:00:30" />
            <HAObject Type="Private" Text="c2:Color" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/06 1:00:32" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="104" SelectionLength="0">return Color.FromArgb(
	(c1.A + c2.A) / 2,
	(c1.R + c2.R) / 2,
	(c1.G + c2.G) / 2,
	(c1.B + c2.B) / 2);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Mix:static Color" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/06 1:02:44">
          <Arguments>
            <HAObject Type="Private" Text="c1:Color" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/06 0:55:31" />
            <HAObject Type="Private" Text="r1:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/06 0:55:38" />
            <HAObject Type="Private" Text="c2:Color" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/06 0:55:57" />
            <HAObject Type="Private" Text="r2:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/06 0:55:59" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="176" SelectionLength="0">return Color.FromArgb(
	(c1.A * r1 + c2.A * r2) / (r1 + r2),
	(c1.R * r1 + c2.R * r2) / (r1 + r2),
	(c1.G * r1 + c2.G * r2) / (r1 + r2),
	(c1.B * r1 + c2.B * r2) / (r1 + r2));
</Source>
        </HAFunc>
      </HAFunc>
      <HAFunc Type="Folder" Text="Bitmap" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/07/06 13:49:25">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="SplitBitmap:static Rectangle[]" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/06 0:54:35">
          <Arguments>
            <HAObject Type="Private" Text="img:Image" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/05 22:17:31" />
            <HAObject Type="Private" Text="back:Color" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/05 22:17:33" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="448" SelectionLength="0">Bitmap bmp = new Bitmap(img);
int w = bmp.Width, h = bmp.Height;
ArrayList list = new ArrayList();

for (int x = 0; x &lt; w; x++)
{
	for (int y = 0; y &lt; h; y++)
	{
		if (bmp.GetPixel(x, y).ToArgb() == back.ToArgb()) continue;

		Rectangle r = ChasePixel(new Rectangle(x, y, 0, 0), bmp, back, x, y);
		r.Width++;
		r.Height++;
		list.Add(r);
	}
}
bmp.Dispose();
if (list.Count &lt; 1) return null;

return list.ToArray(typeof(Rectangle)) as Rectangle[];
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="ChasePixel:static Rectangle" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/06 0:54:36">
          <Arguments>
            <HAObject Type="Private" Text="rect:Rectangle" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/05 22:17:58" />
            <HAObject Type="Private" Text="bmp:Bitmap" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/05 22:18:01" />
            <HAObject Type="Private" Text="back:Color" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/05 22:18:03" />
            <HAObject Type="Private" Text="x:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/05 22:18:05" />
            <HAObject Type="Private" Text="y:int" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/05 22:18:07" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="313" SelectionLength="0">if (x &lt; 0 || y &lt; 0 || x &gt;= bmp.Width || y &gt;= bmp.Height
	|| bmp.GetPixel(x, y).ToArgb() == back.ToArgb()) return rect;

rect = Geometry.ExpandRectangle(rect, x, y);
bmp.SetPixel(x, y, back);

for (int i = 1; i &lt;= 8; i++)
{
	Point d = dirs[i];
	rect = ChasePixel(rect, bmp, back, x + d.X, y + d.Y);
}
return rect;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="GetBitmaps:static Bitmap[]" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/06 0:54:38">
          <Arguments>
            <HAObject Type="Private" Text="img:Image" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/05 22:18:32" />
            <HAObject Type="Private" Text="rects:Rectangle[]" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/05 22:18:35" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="328" SelectionLength="0">if (rects == null) return null;

int len = rects.Length;
if (len &lt; 1) return null;

Bitmap[] ret = new Bitmap[len];
for (int i = 0; i &lt; len; i++)
{
	ret[i] = new Bitmap(rects[i].Width, rects[i].Height);
	Graphics g = Graphics.FromImage(ret[i]);
	g.DrawImage(img, 0, 0, rects[i], GraphicsUnit.Pixel);
	g.Dispose();
}
return ret;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="CompareBitmaps:static bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/06 0:54:39">
          <Arguments>
            <HAObject Type="Private" Text="bmp1:Bitmap" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/07/05 22:56:42" />
            <HAObject Type="Private" Text="bmp2:Bitmap" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/07/05 22:56:50" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="295" SelectionLength="0">int w1 = bmp1.Width, h1 = bmp1.Height;
int w2 = bmp2.Width, h2 = bmp2.Height;
if (w1 != w2 || h1 != h2) return false;

for (int y = 0; y &lt; h1; y++)
{
	for (int x = 0; x &lt; w1; x++)
	{
		if (bmp1.GetPixel(x, y).ToArgb() != bmp2.GetPixel(x, y).ToArgb())
		{
			return false;
		}
	}
}

return true;
</Source>
        </HAFunc>
      </HAFunc>
    </HAFunc>
  </Body>
  <Footer>
    <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/07/01 14:34:48">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0" />
      <Source SelectionStart="0" SelectionLength="0" />
    </HAFunc>
  </Footer>
</HAClass>