<?xml version="1.0" encoding="utf-8"?>
<HAClass Type="Folder" Text="Rtf:Rtf" IsExpanded="true" IsSelected="false" AllowDrag="true">
  <Header>
    <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="true" AllowDrag="false">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0">ここにソースコードの注釈を書きます。
</Comment>
      <Source SelectionStart="15" SelectionLength="0">using System;
</Source>
    </HAFunc>
  </Header>
  <Body>
    <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
      <Source SelectionStart="0" SelectionLength="0" />
      <HAFunc Type="Comment" Text="LocalHeader" IsExpanded="false" IsSelected="true" AllowDrag="true">
        <Arguments />
        <Comment SelectionStart="72" SelectionLength="0">フォルダの関数欄に作成した "LocalHeader" 名の注釈は特別です。
ソース欄がフォルダ内すべてのクラスにコメントとして挿入されます。
</Comment>
        <Source SelectionStart="0" SelectionLength="0">このファイルは Rtf.hacls から生成されています。
</Source>
      </HAFunc>
    </HAFunc>
  </Body>
  <Footer>
    <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0" />
      <Source SelectionStart="0" SelectionLength="0" />
    </HAFunc>
  </Footer>
  <HAClass Type="Public" Text="RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true">
    <HAObject Type="Protected" Text="name:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
    <HAObject Type="Protected" Text="rtfObjects:ArrayList" IsExpanded="false" IsSelected="true" AllowDrag="true" />
    <Header>
      <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="true" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="132" SelectionLength="0">using System;
using System.Collections;
using System.Globalization;
using System.IO;
using System.Text;
using System.Windows.Forms;
</Source>
      </HAFunc>
    </Header>
    <Body>
      <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="36" SelectionLength="0">&lt;summary&gt;
RTF の要素を保持します。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="53" SelectionLength="0">this.name = "";
this.rtfObjects = new ArrayList();
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="nm:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="53" SelectionLength="0">this.name = nm;
this.rtfObjects = new ArrayList();
</Source>
        </HAFunc>
        <HAFunc Type="Folder" Text="Properties" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="get_Name:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="19" SelectionLength="0">return this.name;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_RtfObjects:ArrayList" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="25" SelectionLength="0">return this.rtfObjects;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_IsText:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <HAObject Type="Private" Text="len:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="235" SelectionLength="0">len = this.name.Length;
if (len &lt; 1 || this.name[0] != '\\' || len &lt; 2) return true;
if (len &gt; 2 &amp;&amp; (this.name[1] == 'c' || this.name[1] == 'u')
	&amp;&amp; char.IsDigit(this.name[2])) return true;

return __CLASS._IsChar(this.name[1]);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_IsEmpty:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="54" SelectionLength="0">return this.name == "" &amp;&amp; this.rtfObjects.Count &lt; 1;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_IsFontNumber:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="95" SelectionLength="0">return this.name.Length &gt; 2
	&amp;&amp; this.name.StartsWith("\\f")
	&amp;&amp; char.IsDigit(this.name[2]);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_Text:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="0" SelectionLength="0">return this.GetText(Encoding.Default);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_Value:int" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="176" SelectionLength="0">sb = new StringBuilder();
foreach (char ch in this.name)
{
	if (char.IsDigit(ch)) sb.Append(ch);
}
if (sb.Length &lt; 1) return 0;

return Convert.ToInt32(sb.ToString());
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="GetText:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="encoding:Encoding" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <HAObject Type="Private" Text="text:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="ms:MemoryStream" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <HAObject Type="Private" Text="sr:StringReader" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="d:Decoder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="ch:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="ch2:char" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="461" SelectionLength="0">text = new StringBuilder();
ms = new MemoryStream();
sr = new StringReader(this.name);
d = encoding.GetDecoder();
while ((ch = sr.Read()) != -1)
{
	ch2 = (char)ch;
	if (ch2 == '\\')
	{
		this.ReadEscape(text, ms, sr, d);
	}
	else if (' ' &lt;= ch2 &amp;&amp; ch2 &lt; 128)
	{
		ms.WriteByte((byte)ch2);
	}
	else
	{
		this.AppendText(text, ms, d);
		text.Append(ch2);
	}
}
this.AppendText(text, ms, d);
sr.Close();
ms.Close();
return text.ToString();
</Source>
          <HAFunc Type="Private" Text="ReadEscape" IsExpanded="true" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="text:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="ms:MemoryStream" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              <HAObject Type="Private" Text="sr:StringReader" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="d:Decoder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            </Arguments>
            <HAObject Type="Private" Text="ch:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="ch2:char" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="59" SelectionLength="0">ch = sr.Read();
if (ch == -1) return;

ch2 = (char)ch;
if (ch2 == '\'')
{
	this.ReadByte(ms, sr);
}
else if (ch2 == 'u')
{
	this.AppendText(text, ms, d);
	this.ReadUnicode(text, sr);
}
else
{
	this.AppendText(text, ms, d);
	text.Append(ch2);
}
</Source>
            <HAFunc Type="Private" Text="ReadByte" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="ms:MemoryStream" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <HAObject Type="Private" Text="sr:StringReader" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              </Arguments>
              <HAObject Type="Private" Text="ch:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="hex:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="217" SelectionLength="0">ch = sr.Read();
if (ch == -1) return;

hex = ((char)ch).ToString();

ch = sr.Read();
if (ch == -1) return;

hex += (char)ch;

try
{
	ms.WriteByte(byte.Parse(hex, NumberStyles.HexNumber));
}
catch
{
}
</Source>
            </HAFunc>
            <HAFunc Type="Private" Text="ReadUnicode" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="text:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <HAObject Type="Private" Text="sr:StringReader" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              <HAObject Type="Private" Text="ch:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="ch2:char" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="241" SelectionLength="0">sb = new StringBuilder();
while ((ch = sr.Read()) != -1)
{
	ch2 = (char)ch;
	if (!char.IsDigit(ch2)) break;
	sb.Append(ch2);
}
if (sb.Length &lt; 1) return;

try
{
	text.Append((char)Convert.ToInt32(sb.ToString()));
}
catch
{
}
</Source>
            </HAFunc>
          </HAFunc>
          <HAFunc Type="Private" Text="AppendText" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="text:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="ms:MemoryStream" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="d:Decoder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <HAObject Type="Private" Text="bytes:Byte[]" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="chars:char[]" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="201" SelectionLength="0">if (ms.Length &lt; 1 ) return;

bytes = ms.ToArray();
ms.SetLength(0);

chars = new char[d.GetCharCount(bytes, 0, bytes.Length)];
d.GetChars(bytes, 0, bytes.Length, chars, 0);
text.Append(chars);
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="Parse" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="sr:StringReader" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <HAObject Type="Private" Text="ch1:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="ch:char" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="escape:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="u:bool" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="81" SelectionLength="0">sb = new StringBuilder();
escape = u = false;
while ((ch1 = sr.Read()) &gt;= 0)
{
	ch = (char)ch1;
	if (u)
	{
		if (!char.IsDigit(ch))
		{
			this.AddRtfObject(sb);
		}
		sb.Append("\\u");
		sb.Append(ch);
		u = false;
	}
	else if (escape)
	{
		bool text = __CLASS._IsText(sb);
		if (text &amp;&amp; ch == 'u')
		{
			u = true;
		}
		else
		{
			if (text &amp;&amp; !__CLASS._IsChar(ch))
			{
				this.AddRtfObject(sb);
			}
			sb.Append('\\');
			sb.Append(ch);
		}
		escape = false;
	}
	else if (ch == '}')
	{
		break;
	}
	else if (ch == '{')
	{
		this.AddRtfObject(sb);
		ro = new RtfObject();
		ro.Parse(sr);
		this.AddRtfObject(ro);
	}
	else if (ch == '\\')
	{
		if (!__CLASS._IsText(sb)) this.AddRtfObject(sb);
		escape = true;
	}
	else if (ch == ' ' &amp;&amp; !__CLASS._IsText(sb))
	{
		this.AddRtfObject(sb);
	}
	else if (ch == '\r' || ch == '\n')
	{
		this.AddRtfObject(sb);
	}
	else
	{
		sb.Append(ch);
	}
}
this.AddRtfObject(sb);
</Source>
          <HAFunc Type="Protected" Text="_IsText:static bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <HAObject Type="Private" Text="len:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="193" SelectionLength="0">len = sb.Length;
if (len &lt; 1 || sb[0] != '\\' || len &lt; 2) return true;
if (len &gt; 2 &amp;&amp; (sb[1] == 'c' || sb[1] == 'u')
	&amp;&amp; char.IsDigit(sb[2])) return true;

return __CLASS._IsChar(sb[1]);
</Source>
          </HAFunc>
          <HAFunc Type="Protected" Text="_IsChar:static bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="ch:char" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="60" SelectionLength="0">return ch == '\\' || ch == '{' || ch == '}' || ch == '\'';
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="AddRtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="name:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="36" SelectionLength="0">this.AddRtfObject(new RtfObject(name));
</Source>
          </HAFunc>
          <HAFunc Type="Protected" Text="AddRtfObject:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <HAObject Type="Private" Text="len:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="ret:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="227" SelectionLength="0">len = sb.Length;
if (len &lt; 1) return null;

if (this.name == "")
{
	this.name = sb.ToString();
	ret = this;
}
else
{
	ret = new RtfObject(sb.ToString());
	this.AddRtfObject(ret);
}
sb.Remove(0, len);
return ret;
</Source>
          </HAFunc>
          <HAFunc Type="Protected" Text="AddRtfObject:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="26" SelectionLength="0">this.rtfObjects.Add(ro);
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="ParseNode" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="node:TreeNode" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="136" SelectionLength="0">this.name = node.Text;

foreach (TreeNode n in node.Nodes)
{
	ro = new RtfObject();
	ro.ParseNode(n);
	this.AddRtfObject(ro);
}
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="GenerateRtf" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="332" SelectionLength="0">if (this.IsEmpty) return;

if (this.rtfObjects.Count &lt; 1)
{
	sb.Append(this.name);
	if (this.name == "\\par") sb.Append("\r\n");
	return;
}

sb.Append('{');
sb.Append(this.name);

this.GenerateRtfChild(sb);

sb.Append('}');
if (this.name == "\\colortbl" || this.name == "\\fonttbl" || this.name == "\\rtf1")
{
	sb.Append("\r\n");
}
</Source>
          <HAFunc Type="Protected" Text="GenerateRtfChild:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <HAObject Type="Private" Text="prev:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="130" SelectionLength="0">prev = null;
foreach (object obj in this.rtfObjects)
{
	ro = obj as RtfObject;
	if (sb.Length &gt; 0 &amp;&amp; sb[sb.Length - 1] != '\n'
		&amp;&amp; !ro.Name.StartsWith("\\")
		&amp;&amp; (prev == null || !prev.IsText))
	{
		sb.Append(' ');
	}
	ro.GenerateRtf(sb);
	prev = ro;
}
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="DisplayTreeView" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="treeView:TreeView" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="parent:TreeNode" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <HAObject Type="Private" Text="n:TreeNode" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="59" SelectionLength="0">if (this.IsEmpty) return;

n = new TreeNode(this.name);
if (parent == null)
{
	treeView.Nodes.Add(n);
}
else
{
	parent.Nodes.Add(n);
}

this.DisplayTreeViewChild(treeView, n);
</Source>
          <HAFunc Type="Protected" Text="DisplayTreeViewChild:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="treeView:TreeView" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="node:TreeNode" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="101" SelectionLength="0">foreach (object obj in this.rtfObjects)
{
	(obj as RtfObject).DisplayTreeView(treeView, node);
}
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="Exists:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="target:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="17" SelectionLength="0">if (this.name == target) return true;

foreach (object obj in this.rtfObjects)
{
	if ((obj as RtfObject).Exists(target)) return true;
}

return false;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Remove" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="target:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <HAObject Type="Private" Text="ros:ArrayList" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="194" SelectionLength="0">ros = new ArrayList();
foreach (object obj in this.rtfObjects)
{
	ro = obj as RtfObject;
	if (ro.name == target) continue;
	
	ros.Add(ro);
	ro.Remove(target);
}
this.rtfObjects = ros;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="ConvertText:static string" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="274" SelectionLength="0">sb = new StringBuilder();
foreach (char ch in text)
{
	if (ch == '\\' || ch == '{' || ch == '}')
	{
		sb.Append('\\');
	}
	if (' ' &lt;= ch &amp;&amp; ch &lt; 128)
	{
		sb.Append(ch);
	}
	else
	{
		sb.Append(string.Format("\\u{0}?", (int)ch));
	}
}
return sb.ToString();
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="ConvertLocalText:static string" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="e:Encoder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="chars:char[]" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="bytes:byte[]" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="ch:char" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="469" SelectionLength="0">sb = new StringBuilder();
e = Encoding.Default.GetEncoder();
chars = text.ToCharArray();
bytes = new byte[e.GetByteCount(chars, 0, text.Length, false)];
e.GetBytes(chars, 0, text.Length, bytes, 0, false);
foreach (byte b in bytes)
{
	ch = (char)b;
	if (ch == '\\' || ch == '{' || ch == '}')
	{
		sb.Append('\\');
	}
	if (' ' &lt;= ch &amp;&amp; ch &lt; 128)
	{
		sb.Append(ch);
	}
	else
	{
		sb.Append(string.Format("\\'{0:x2}", b));
	}
}
return sb.ToString();
</Source>
        </HAFunc>
      </HAFunc>
    </Body>
    <Footer>
      <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
    </Footer>
  </HAClass>
  <HAClass Type="Public" Text="RtfDocument:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true">
    <HAObject Type="Private" Text="fontTable:RtfFontTable" IsExpanded="false" IsSelected="false" AllowDrag="true" />
    <HAObject Type="Private" Text="colorTable:RtfColorTable" IsExpanded="false" IsSelected="false" AllowDrag="true" />
    <HAObject Type="Private" Text="document:ArrayList" IsExpanded="false" IsSelected="true" AllowDrag="true" />
    <Header>
      <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="295" SelectionLength="0">using System;
using System.Collections;
using System.Drawing;
using System.IO;
using System.Text;
using System.Windows.Forms;
using Girl.Text;

namespace Girl.Rtf
{
	public struct RtfContext
	{
		public int Font, FontSize, Color;
		public bool Bold, Italic, Underline;
	
		public void Read(RtfObject ro)
		{
			switch (ro.Name)
			{
				case "\\b":
					this.Bold = true;
					return;
				case "\\b0":
					this.Bold = false;
					return;
				case "\\i":
					this.Italic = true;
					return;
				case "\\i0":
					this.Italic = false;
					return;
				case "\\ul":
					this.Underline = true;
					return;
				case "\\ulnone":
					this.Underline = false;
					return;
			}
			
			if (ro.Name.StartsWith("\\fs"))
			{
				this.FontSize = ro.Value;
			}
			else if (ro.Name.StartsWith("\\f"))
			{
				this.Font = ro.Value;
			}
			else if (ro.Name.StartsWith("\\cf"))
			{
				this.Color = ro.Value;
			}
		}
	}
}
</Source>
      </HAFunc>
    </Header>
    <Body>
      <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="39" SelectionLength="0">&lt;summary&gt;
RTF の要素を保持します。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="35" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="118" SelectionLength="0">this.fontTable   = new RtfFontTable();
this.colorTable  = new RtfColorTable();
this.document    = new ArrayList();
</Source>
        </HAFunc>
        <HAFunc Type="Folder" Text="Properties" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="get_FontTable:RtfFontTable" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="24" SelectionLength="0">return this.fontTable;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_ColorTable:RtfColorTable" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="25" SelectionLength="0">return this.colorTable;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_Document:ArrayList" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="23" SelectionLength="0">return this.document;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_LastContext:RtfContext" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <HAObject Type="Private" Text="ret:RtfContext" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="113" SelectionLength="0">ret = new RtfContext();
foreach (object obj in this.document)
{
	ret.Read(obj as RtfObject);
}
return ret;
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="Parse:static RtfDocument" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="rtf:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <HAObject Type="Private" Text="ret:RtfDocument" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <HAObject Type="Private" Text="sr:StringReader" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="ch1:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="ch:char" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="177" SelectionLength="0">ret = new RtfDocument();
sr = new StringReader(rtf);
while ((ch1 = sr.Read()) &gt;= 0)
{
	ch = (char)ch1;
	if (ch == '{')
	{
		ret.Parse(sr);
		break;
	}
}
return ret;
</Source>
          <HAFunc Type="Protected" Text="AddRtfObject:override" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="314" SelectionLength="0">if (ro.Name == "\\fonttbl")
{
	this.fontTable.SetObject(ro);
}
else if (ro.Name == "\\colortbl")
{
	this.colorTable.SetObject(ro);
}
else if (this.document.Count &gt; 0
	|| ro.Name.StartsWith("\\viewkind")
	|| ro.Name.StartsWith("\\uc"))
{
	this.document.Add(ro);
}
else
{
	base.AddRtfObject(ro);
}
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="Parse:static RtfDocument" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="node:TreeNode" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <HAObject Type="Private" Text="ret:RtfDocument" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="61" SelectionLength="0">ret = new RtfDocument();
ret.ParseNode(node);
return ret;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="ToRtf:string" IsExpanded="false" IsSelected="true" AllowDrag="true">
          <Arguments />
          <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="70" SelectionLength="0">sb = new StringBuilder();
this.GenerateRtf(sb);
return sb.ToString();
</Source>
          <HAFunc Type="Protected" Text="GenerateRtfChild:override" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <HAObject Type="Private" Text="prev:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="279" SelectionLength="0">base.GenerateRtfChild(sb);

this.fontTable .GenerateRtf(sb);
this.colorTable.GenerateRtf(sb);

if (this.document.Count &lt; 1)
{
	sb.Append(' ');
}
prev = null;
foreach (object obj in this.document)
{
	ro = obj as RtfObject;
	if (sb.Length &gt; 0 &amp;&amp; sb[sb.Length - 1] != '\n'
		&amp;&amp; !ro.Name.StartsWith("\\")
		&amp;&amp; (prev == null || !prev.IsText))
	{
		sb.Append(' ');
	}
	ro.GenerateRtf(sb);
	prev = ro;
}
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="ToString:override string" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <HAObject Type="Private" Text="ret:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="rc:RtfContext" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="rf:RtfFont" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="360" SelectionLength="0">ret = new StringBuilder();
rc = new RtfContext();
foreach (object obj in this.document)
{
	ro = obj as RtfObject;
	rc.Read(ro);
	if (ro.IsText)
	{
		rf = this.fontTable.Fonts[rc.Font];
		ret.Append(ro.GetText(
			CharSetEncoding.GetEncoding(rf.CharSet)));
	}
	else if (ro.Name == "\\par")
	{
		ret.Append("\r\n");
	}
}
return ret.ToString();
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="DisplayTreeViewChild:override" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="treeView:TreeView" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="node:TreeNode" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="97" SelectionLength="0">base.DisplayTreeViewChild(treeView, node);

this. fontTable.DisplayTreeView(treeView, node);
this.colorTable.DisplayTreeView(treeView, node);

foreach (object obj in this.document)
{
	(obj as RtfObject).DisplayTreeView(treeView, node);
}
</Source>
        </HAFunc>
        <HAFunc Type="Folder" Text="Font" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="set_Font:Font" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="58" SelectionLength="0">this.FontName = value.Name;
this.FontSize = value.Size;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_FontName:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <HAObject Type="Private" Text="fn:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="v:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="217" SelectionLength="0">fn = "";
foreach (object obj in this.document)
{
	ro = obj as RtfObject;
	if (ro.IsFontNumber)
	{
		v = this.fontTable.Fonts[ro.Value].Name;
		if (fn != "" &amp;&amp; fn != v) return "";
		fn = v;
	}
}
return fn;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="set_FontName:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <HAObject Type="Private" Text="ros:ArrayList" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="rf:RtfFont" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="272" SelectionLength="0">ros = new ArrayList();
foreach (object obj in this.document)
{
	ro = obj as RtfObject;
	if (ro.IsFontNumber)
	{
		rf = new RtfFont(value);
		ro = new RtfObject(string.Format(
			"\\f{0}", this.fontTable.GetIndex(rf)));
	}
	ros.Add(ro);
}
this.document = ros;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_FontSize:float" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <HAObject Type="Private" Text="ret:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="v:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="215" SelectionLength="0">ret = 0;
foreach (object obj in this.document)
{
	ro = obj as RtfObject;
	if (ro.Name.StartsWith("\\fs"))
	{
		v = ro.Value;
		if (ret &gt; 0 &amp;&amp; ret != v) return 0;
		ret = v;
	}
}
return ((float)ret) / 2;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="set_FontSize:float" IsExpanded="true" IsSelected="false" AllowDrag="true">
            <Arguments />
            <HAObject Type="Private" Text="len:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="257" SelectionLength="0">this.RemoveFontSize();

len = this.document.Count;
for (int i = 0; i &lt; len; i++)
{
	ro = this.document[i] as RtfObject;
	if (ro.IsText)
	{
		this.document.Insert(i, new RtfObject(
			string.Format("\\fs{0}", (int)(value * 2))));
		return;
	}
}
</Source>
            <HAFunc Type="Public" Text="RemoveFontSize" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments />
              <HAObject Type="Private" Text="ros:ArrayList" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="0" SelectionLength="178">ros = new ArrayList();
foreach (object obj in this.document)
{
	ro = obj as RtfObject;
	if (ro.Name.StartsWith("\\fs")) continue;
	
	ros.Add(ro);
}
this.document = ros;
</Source>
            </HAFunc>
          </HAFunc>
          <HAFunc Type="Public" Text="set_CurrentFont:Font" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="48" SelectionLength="0">this.CurrentFontName = value.Name;
this.CurrentFontSize = value.Size;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_CurrentFontName:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="58" SelectionLength="0">return this.fontTable.Fonts[this.LastContext.Font].Name;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="set_CurrentFontName:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="92" SelectionLength="0">this.AddDocument(string.Format(
	"\\f{0}", this.fontTable.GetIndex(new RtfFont(value))));
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_CurrentFontSize:float" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="48" SelectionLength="0">return ((float)this.LastContext.FontSize) / 2;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="set_CurrentFontSize:float" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="0" SelectionLength="63">this.AddDocument(string.Format("\\fs{0}", (int)(value * 2)));
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Folder" Text="Style" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="ExistsInDocument:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="target:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="116" SelectionLength="0">foreach (object obj in this.document)
{
	if ((obj as RtfObject).Exists(target)) return true;
}

return false;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="RemoveFromDocument" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="target:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <HAObject Type="Private" Text="ros:ArrayList" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="190" SelectionLength="0">ros = new ArrayList();
foreach (object obj in this.document)
{
	ro = obj as RtfObject;
	if (ro.Name == target) continue;
	
	ros.Add(ro);
	ro.Remove(target);
}
this.document = ros;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_IsBold:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="38" SelectionLength="0">return this.ExistsInDocument("\\b");
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_IsItalic:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="38" SelectionLength="0">return this.ExistsInDocument("\\i");
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_IsUnderline:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="39" SelectionLength="0">return this.ExistsInDocument("\\ul");
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="set_IsBold:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="101" SelectionLength="0">this.RemoveFromDocument("\\b");
this.RemoveFromDocument("\\b0");
if (value) this.AddStyle("\\b");
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="set_IsItalic:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="96" SelectionLength="0">this.RemoveFromDocument("\\i");
this.RemoveFromDocument("\\i0");
if (value) this.AddStyle("\\i");
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="set_IsUnderline:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="107" SelectionLength="0">this.RemoveFromDocument("\\ul");
this.RemoveFromDocument("\\ulnone");
if (value) this.AddStyle("\\ul");
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="AddStyle" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="style:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <HAObject Type="Private" Text="len:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="218" SelectionLength="0">len = this.document.Count;
for (int i = 0; i &lt; len; i++)
{
	ro = this.document[i] as RtfObject;
	if (ro.Name.StartsWith("\\f") || ro.IsText)
	{
		this.document.Insert(i, new RtfObject(style));
		return;
	}
}
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Folder" Text="Text Manipulation" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="SetDocument" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="343" SelectionLength="0">if (this.name == "") this.name = "\\rtf1";
if (this.rtfObjects.Count &lt; 1)
{
	this.AddRtfObject(new RtfObject("\\ansi"));
	this.AddRtfObject(new RtfObject("\\deff0"));
}
if (this.document.Count &lt; 1)
{
	// 無限ループになるので this.AddDocument() は使わない
	this.document.Add(new RtfObject("\\uc1"));
	this.document.Add(new RtfObject("\\pard"));
}
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="AddDocument" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="name:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="62" SelectionLength="0">this.SetDocument();
this.document.Add(new RtfObject(name));
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="AppendText" IsExpanded="true" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="prev:char" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="461" SelectionLength="0">if (text.Length &lt; 1) return;

sb = new StringBuilder();
prev = '\0';
foreach (char ch in text)
{
	if (ch == '\r' || (prev != '\r' &amp;&amp; ch == '\n'))
	{
		if (sb.Length &gt; 0)
		{
			this.AddDocument(
				RtfObject.ConvertText(sb.ToString()));
			sb.Remove(0, sb.Length);
		}
		this.AppendLine();
	}
	else if (ch != '\n')
	{
		sb.Append(ch);		
	}
	prev = ch;
}
if (sb.Length &gt; 0)
{
	this.AddDocument(RtfObject.ConvertText(sb.ToString()));
}
</Source>
            <HAFunc Type="Public" Text="AppendText" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <HAObject Type="Private" Text="color:Color" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <HAObject Type="Private" Text="c:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="32" SelectionLength="0">if (text.Length &lt; 1) return;

c = this.colorTable.GetIndex(color);
if (c != 0) this.AddDocument(string.Format("\\cf{0}", c));
this.AppendText(text);
if (c != 0) this.AddDocument("\\cf0");
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="AppendText" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <HAObject Type="Private" Text="fontStyle:FontStyle" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="32" SelectionLength="0">if (text.Length &lt; 1) return;

if ((fontStyle &amp; FontStyle.Bold) == FontStyle.Bold)
{
	this.AddDocument("\\b");
}
if ((fontStyle &amp; FontStyle.Italic) == FontStyle.Italic)
{
	this.AddDocument("\\i");
}
if ((fontStyle &amp; FontStyle.Underline) == FontStyle.Underline)
{
	this.AddDocument("\\ul");
}

this.AppendText(text);

if ((fontStyle &amp; FontStyle.Underline) == FontStyle.Underline)
{
	this.AddDocument("\\ulnone");
}
if ((fontStyle &amp; FontStyle.Italic) == FontStyle.Italic)
{
	this.AddDocument("\\i0");
}
if ((fontStyle &amp; FontStyle.Bold) == FontStyle.Bold)
{
	this.AddDocument("\\b0");
}
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="AppendText" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <HAObject Type="Private" Text="color:Color" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <HAObject Type="Private" Text="fontStyle:FontStyle" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              </Arguments>
              <HAObject Type="Private" Text="c:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="32" SelectionLength="0">if (text.Length &lt; 1) return;

c = this.colorTable.GetIndex(color);
if (c != 0) this.AddDocument(string.Format("\\cf{0}", c));
this.AppendText(text, fontStyle);
if (c != 0) this.AddDocument("\\cf0");
</Source>
            </HAFunc>
          </HAFunc>
          <HAFunc Type="Public" Text="AppendLine" IsExpanded="true" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="28" SelectionLength="0">this.AddDocument("\\par");
</Source>
            <HAFunc Type="Public" Text="AppendLine" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="44" SelectionLength="0">this.AppendText(text);
this.AppendLine();
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="AppendLine" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <HAObject Type="Private" Text="color:Color" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="51" SelectionLength="0">this.AppendText(text, color);
this.AppendLine();
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="AppendLine" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <HAObject Type="Private" Text="fontStyle:FontStyle" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="55" SelectionLength="0">this.AppendText(text, fontStyle);
this.AppendLine();
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="AppendLine" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <HAObject Type="Private" Text="color:Color" IsExpanded="false" IsSelected="true" AllowDrag="true" />
                <HAObject Type="Private" Text="fontStyle:FontStyle" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="62" SelectionLength="0">this.AppendText(text, color, fontStyle);
this.AppendLine();
</Source>
            </HAFunc>
          </HAFunc>
        </HAFunc>
      </HAFunc>
    </Body>
    <Footer>
      <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
    </Footer>
  </HAClass>
  <HAClass Type="Public" Text="RtfFontTable:RtfObject" IsExpanded="true" IsSelected="false" AllowDrag="true">
    <HAObject Type="Public" Text="fonts:RtfFont[]" IsExpanded="false" IsSelected="true" AllowDrag="true" />
    <Header>
      <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="15" SelectionLength="20">using System;
using System.Text;
</Source>
      </HAFunc>
    </Header>
    <Body>
      <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="47" SelectionLength="0">&lt;summary&gt;
RTF の \fonttbl を管理します。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="20" SelectionLength="0">this.fonts = null;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="SetObject" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="76" SelectionLength="0">this.fonts = null;
this.name = ro.Name;
this.rtfObjects = ro.RtfObjects;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_Fonts:RtfFont[]" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <HAObject Type="Private" Text="i:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="244" SelectionLength="0">if (this.fonts != null) return this.fonts;

this.fonts = new RtfFont[this.rtfObjects.Count];

i = 0;
foreach (RtfObject ro in this.rtfObjects)
{
	this.fonts[i] = new RtfFont();
	this.fonts[i].SetFont(ro);
	i++;
}
return this.fonts;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_TableText:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="67" SelectionLength="0">sb = new StringBuilder();
this.Write(sb);
return sb.ToString();
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Write" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="58" SelectionLength="0">foreach (RtfFont rf in this.Fonts)
{
	rf.Write(sb);
}
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="GetIndex:int" IsExpanded="false" IsSelected="true" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="rf:RtfFont" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <HAObject Type="Private" Text="ret:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="450" SelectionLength="0">ret = 0;
foreach (RtfFont rf2 in this.Fonts)
{
	if (rf2.Equals(rf)) return ret;
	ret++;
}

this.fonts = null;
if (this.name == "") this.name = "\\fonttbl";
ro = new RtfObject(string.Format("\\f{0}", ret));
ro.AddRtfObject(string.Format("\\f{0}"       , rf.Family ));
if (rf.CharSet &gt;= 0)
{
	ro.AddRtfObject(string.Format("\\fcharset{0}", rf.CharSet));
}
ro.AddRtfObject(string.Format("{0};"         , rf.Name   ));
this.AddRtfObject(ro);
return ret;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Contains:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="rf:RtfFont" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="33" SelectionLength="0">return this.GetIndex(rf) != -1;
</Source>
        </HAFunc>
      </HAFunc>
    </Body>
    <Footer>
      <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
    </Footer>
    <HAClass Type="Public" Text="RtfFont" IsExpanded="false" IsSelected="false" AllowDrag="true">
      <HAObject Type="Public" Text="Name:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
      <HAObject Type="Public" Text="Family:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
      <HAObject Type="Public" Text="CharSet:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
      <Header>
        <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="58" SelectionLength="0">using System;
using System.Drawing;
using System.Text;
</Source>
        </HAFunc>
      </Header>
      <Body>
        <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="40" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Private" Text="Init" IsExpanded="false" IsSelected="true" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="79" SelectionLength="0">this.Name = this.Family = "";
this.CharSet = (int)Girl.Text.CharSet.Default;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
            <Source SelectionStart="14" SelectionLength="0">this.Init();
</Source>
            <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="font:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="21" SelectionLength="0">this.SetFont(font);
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="name:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="87" SelectionLength="0">this.Init();

this.Name   = RtfObject.ConvertLocalText(name);
this.Family = "nil";
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="name:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <HAObject Type="Private" Text="family:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="88" SelectionLength="0">this.Init();

this.Name   = RtfObject.ConvertLocalText(name);
this.Family = family;
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="name:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <HAObject Type="Private" Text="family:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
                <HAObject Type="Private" Text="charSet:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="99" SelectionLength="0">this.Name    = RtfObject.ConvertLocalText(name);
this.Family  = family;
this.CharSet = charSet;
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="f:Font" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="126" SelectionLength="0">this.Init();

this.Name    = RtfObject.ConvertLocalText(f.Name);
this.Family  = "nil";
this.CharSet = (int)f.GdiCharSet;
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
              <Arguments>
                <HAObject Type="Private" Text="font:RtfFont" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="86" SelectionLength="0">this.Name    = font.Name;
this.Family  = font.Family;
this.CharSet = font.CharSet;
</Source>
            </HAFunc>
          </HAFunc>
          <HAFunc Type="Public" Text="SetFont" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="font:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="467" SelectionLength="0">this.Init();
if (font.RtfObjects.Count &lt; 1) return;

foreach (object obj in font.RtfObjects)
{
	ro = obj as RtfObject;
	if (ro.Name.StartsWith(@"\fcharset"))
	{
		try
		{
			this.CharSet = Convert.ToInt32(ro.Name.Substring(9));
		}
		catch
		{
		}
	}
	else if (ro.IsText &amp;&amp; ro.Name.EndsWith(";"))
	{
		string s = ro.Text;
		this.Name = s.Substring(0, s.Length - 1);
	}
	else if (ro.Name.StartsWith("\\f"))
	{
		this.Family = ro.Name.Substring(2);
	}
}
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="Write" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="38" SelectionLength="0">sb.Append(this.ToString() + "\r\n");
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="ToString:override string" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="80" SelectionLength="0">return string.Format("{0}, {1}, {2}",
	this.Name, this.Family, this.CharSet);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="GetHashCode:override int" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="39" SelectionLength="0">return this.ToString().GetHashCode();
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="Equals:override bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="obj:object" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <HAObject Type="Private" Text="rf:RtfFont" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="147" SelectionLength="0">rf = obj as RtfFont;
if (rf == null) return false;

return this.Name == rf.Name
	&amp;&amp; this.Family == rf.Family
	&amp;&amp; this.CharSet == rf.CharSet;
</Source>
          </HAFunc>
        </HAFunc>
      </Body>
      <Footer>
        <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
        </HAFunc>
      </Footer>
    </HAClass>
  </HAClass>
  <HAClass Type="Public" Text="RtfColorTable:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true">
    <HAObject Type="Public" Text="colors:Color[]" IsExpanded="false" IsSelected="true" AllowDrag="true" />
    <Header>
      <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="58" SelectionLength="0">using System;
using System.Drawing;
using System.Text;
</Source>
      </HAFunc>
    </Header>
    <Body>
      <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="48" SelectionLength="0">&lt;summary&gt;
RTF の \colortbl を管理します。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="21" SelectionLength="0">this.colors = null;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="SetObject" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="19" SelectionLength="0">this.colors = null;
this.name = ro.Name;
this.rtfObjects = ro.RtfObjects;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_Colors:Color[]" IsExpanded="true" IsSelected="false" AllowDrag="true">
          <Arguments />
          <HAObject Type="Private" Text="v:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <HAObject Type="Private" Text="r:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="g:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="b:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="i:int" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="446" SelectionLength="0">if (this.colors != null) return this.colors;

this.colors = new Color[this.ColorCount];
r = g = b = i = 0;
foreach (RtfObject ro in this.rtfObjects)
{
	v = ro.Name;
	if (v.StartsWith("\\red"))
	{
		r = ro.Value;
	}
	else if (v.StartsWith("\\green"))
	{
		g = ro.Value;
	}
	else if (v.StartsWith("\\blue"))
	{
		b = ro.Value;
	}
	if (v.EndsWith(";"))
	{
		this.colors[i] = Color.FromArgb(r, g, b);
		i++;
	}
}
if (i == 0) this.colors[0] = Color.FromArgb(0);
return this.colors;
</Source>
          <HAFunc Type="Public" Text="get_ColorCount:int" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments />
            <HAObject Type="Private" Text="ret:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="190" SelectionLength="0">if (this.colors != null) return this.colors.GetLength(0);

ret = 0;
foreach (RtfObject ro in this.rtfObjects)
{
	if (ro.Name.EndsWith(";")) ret++;
}
if (ret &lt; 1) ret++;
return ret;
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="get_TableText:string" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments />
          <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="154" SelectionLength="0">sb = new StringBuilder();
foreach (Color c in this.Colors)
{
	sb.Append(string.Format("{0}, {1}, {2}\r\n", c.R, c.G, c.B));
}
return sb.ToString();
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="GetIndex:int" IsExpanded="false" IsSelected="true" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="color:Color" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <HAObject Type="Private" Text="ret:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="483" SelectionLength="0">ret = 0;
foreach (Color cc in this.Colors)
{
	if (cc.R == color.R
		&amp;&amp; cc.G == color.G
		&amp;&amp; cc.B == color.B)
	{
		return ret;
	}
	ret++;
}

this.colors = null;
if (this.name == "") this.name = "\\colortbl";
if (this.rtfObjects.Count &lt; 1)
{
	this.AddRtfObject(";");
	ret = 1;
}
this.AddRtfObject(string.Format("\\red{0}"  , color.R));
this.AddRtfObject(string.Format("\\green{0}", color.G));
this.AddRtfObject(string.Format("\\blue{0};", color.B));
return ret;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Contains:bool" IsExpanded="false" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="c:Color" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="32" SelectionLength="0">return this.GetIndex(c) != -1;
</Source>
        </HAFunc>
      </HAFunc>
    </Body>
    <Footer>
      <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
    </Footer>
  </HAClass>
  <HAClass Type="Public" Text="RtfHtmlConverter" IsExpanded="false" IsSelected="true" AllowDrag="true">
    <Header>
      <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="76" SelectionLength="0">using System;
using System.Collections;
using System.Text;
using Girl.Text;
</Source>
      </HAFunc>
    </Header>
    <Body>
      <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="42" SelectionLength="0">&lt;summary&gt;
RTF と HTML を相互変換します。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="Convert:static string" IsExpanded="true" IsSelected="false" AllowDrag="true">
          <Arguments>
            <HAObject Type="Private" Text="rd:RtfDocument" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          </Arguments>
          <HAObject Type="Private" Text="ret:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="rc1:RtfContext" IsExpanded="true" IsSelected="false" AllowDrag="true">
            <HAObject Type="Private" Text="rc2:RtfContext" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          </HAObject>
          <HAObject Type="Private" Text="ro:RtfObject" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="rf:RtfFont" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="stack1:Stack" IsExpanded="false" IsSelected="false" AllowDrag="true" />
          <HAObject Type="Private" Text="stack2:Stack" IsExpanded="false" IsSelected="true" AllowDrag="true" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="601" SelectionLength="0">ret = new StringBuilder();
rc1 = new RtfContext();
rc2 = new RtfContext();
stack1 = new Stack();
stack2 = new Stack();
foreach (object obj in rd.Document)
{
	ro = obj as RtfObject;
	rc2 = rc1;
	rc1.Read(ro);
	__CLASS.CheckContext(stack1, rc1, rc2);
	if (ro.IsText)
	{
		__CLASS.WriteStack(ret, stack1, stack2);
		rf = rd.FontTable.Fonts[rc1.Font];
		ret.Append(ro.GetText(
			CharSetEncoding.GetEncoding(rf.CharSet)));
	}
	else if (ro.Name == "\\par")
	{
		__CLASS.WriteStack(ret, stack1, stack2);
		ret.Append("&lt;br&gt;\r\n");
	}
}
__CLASS.WritePop(ret, stack2, null);  // スタックを解消
return ret.ToString();
</Source>
          <HAFunc Type="Private" Text="CheckContext:static" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="stack1:Stack" IsExpanded="false" IsSelected="true" AllowDrag="true" />
              <HAObject Type="Private" Text="rc1:RtfContext" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="rc2:RtfContext" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="121" SelectionLength="0">if (rc1.Bold != rc2.Bold)
{
	if (rc1.Bold)
	{
		stack1.Push("b");
	}
	else
	{
		__CLASS.WritePop(null, stack1, "b");
	}
}
if (rc1.Italic != rc2.Italic)
{
	if (rc1.Italic)
	{
		stack1.Push("i");
	}
	else
	{
		__CLASS.WritePop(null, stack1, "i");
	}
}
</Source>
          </HAFunc>
          <HAFunc Type="Private" Text="WriteStack:static" IsExpanded="false" IsSelected="true" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="stack1:Stack" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="stack2:Stack" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <HAObject Type="Private" Text="st1:object[]" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="st2:object[]" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <HAObject Type="Private" Text="common:int" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="0" SelectionLength="0">// 配列が Push 順ではなく Pop された順番（逆向き）になるのに注意！
st1 = stack1.ToArray();
st2 = stack2.ToArray();

// 共通部分を調べて無視する
int len1 = stack1.Count;
int len2 = stack2.Count;
int lenm = Math.Min(len1, len2);
for (common = 0; common &lt; lenm; common++)
{
	// 配列が逆向きなのに注意！
	if (!st1[len1 - common - 1].Equals(st2[len2 - common - 1])) break;
}

// スタックを解消する
while (stack2.Count &gt; common)
{
	sb.AppendFormat("&lt;/{0}&gt;", stack2.Pop());
}

// スタックを積む
for (int i = common; i &lt; len1; i++)
{
	string s = st1[len1 - i - 1] as string;
	sb.AppendFormat("&lt;{0}&gt;", s);
	stack2.Push(s);
}

// stack2 は stack1 と同じ内容になる
</Source>
          </HAFunc>
          <HAFunc Type="Private" Text="WritePop:static" IsExpanded="false" IsSelected="false" AllowDrag="true">
            <Arguments>
              <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="stack:Stack" IsExpanded="false" IsSelected="false" AllowDrag="true" />
              <HAObject Type="Private" Text="tag:string" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            </Arguments>
            <HAObject Type="Private" Text="st:Stack" IsExpanded="false" IsSelected="true" AllowDrag="true" />
            <HAObject Type="Private" Text="ss:string" IsExpanded="false" IsSelected="false" AllowDrag="true" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="332" SelectionLength="0">st = new Stack();
while (stack.Count &gt; 0)
{
	ss = stack.Pop() as string;
	if (sb != null) sb.AppendFormat("&lt;/{0}&gt;", ss);
	if (ss == tag) break;
	
	st.Push(ss);
}
if (tag == null) return;  // スタック解消に使うため

// スタックを積み直す
while (st.Count &gt; 0)
{
	ss = st.Pop() as string;
	if (sb != null) sb.AppendFormat("&lt;{0}&gt;", ss);
	stack.Push(ss);
}
</Source>
          </HAFunc>
        </HAFunc>
      </HAFunc>
    </Body>
    <Footer>
      <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
    </Footer>
  </HAClass>
</HAClass>