<?xml version="1.0" encoding="utf-8"?>
<HAClass Type="Folder" Text="Tree" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
  <Header>
    <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="true" AllowDrag="false" LastModified="2003/02/16 4:18:45">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0">ここにソースコードの注釈を書きます。
</Comment>
      <Source SelectionStart="0" SelectionLength="0">using System;
</Source>
    </HAFunc>
  </Header>
  <Body>
    <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 4:18:45">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
      <Source SelectionStart="0" SelectionLength="0" />
      <HAFunc Type="Comment" Text="LocalHeader" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45">
        <Arguments />
        <Comment SelectionStart="72" SelectionLength="0">フォルダの関数欄に作成した "LocalHeader" 名の注釈は特別です。
ソース欄がフォルダ内すべてのクラスにコメントとして挿入されます。
</Comment>
        <Source SelectionStart="75" SelectionLength="0">このファイルは ..\..\HierArch.haprj から自動生成されています。
編集は必ずそちらを通すようにして、直接書き換えないでください。
</Source>
      </HAFunc>
    </HAFunc>
  </Body>
  <Footer>
    <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 4:18:45">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0" />
      <Source SelectionStart="0" SelectionLength="0" />
    </HAFunc>
  </Footer>
  <HAClass Type="Public" Text="HATreeNode:DnDTreeNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/21 15:41:38">
    <HAObject Type="Public" Text="m_Type:HAType" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:49:28" />
    <HAObject Type="Public" Text="m_IsExpanded:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:49:35" />
    <HAObject Type="Public" Text="m_IsSelected:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:49:40" />
    <HAObject Type="Protected" Text="link:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:49:46" />
    <HAObject Type="Public" Text="Server:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:49:50" />
    <HAObject Type="Public" Text="LastModified:DateTime" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 19:50:14" />
    <Header>
      <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 20:06:39">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="71" SelectionLength="0">using System;
using System.Drawing;
using System.IO;
using System.Text;
using System.Windows.Forms;
using System.Xml;
using Girl.Windows.Forms;
</Source>
      </HAFunc>
    </Header>
    <Body>
      <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 19:51:15">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="Init:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:50:43">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="212" SelectionLength="0">this.Type = HAType.Public;
this.m_IsExpanded = false;
this.m_IsSelected = false;
this.link = string.Empty;
this.Server = "";
this.LastModified = DateTime.Now;
while (this.Nodes.Count &gt; 0) this.Nodes[0].Remove();
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:50:56">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="13" SelectionLength="0">this.Init();
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:51:50">
          <Arguments>
            <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 19:51:50" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="31" SelectionLength="0">this.Text = text;
this.Init();
</Source>
        </HAFunc>
        <HAFunc Type="Folder" Text="Properties" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:53:42">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="get_XmlName:virtual string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:53:44">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="17" SelectionLength="0">return "HATree";
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_NewNode:virtual HATreeNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:53:46">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="25" SelectionLength="0">return new HATreeNode();
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_Type:HAType" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:53:48">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="20" SelectionLength="0">return this.m_Type;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="set_Type:HAType" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:53:49">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="37" SelectionLength="0">this.m_Type = value;
this.SetIcon();
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_IsObject:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:53:50">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="109" SelectionLength="0">return (this.m_Type == HAType.Public
	|| this.m_Type == HAType.Protected
	|| this.m_Type == HAType.Private);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_IsText:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:53:52">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="189" SelectionLength="0">switch (this.m_Type)
{
	case HAType.Text:
	case HAType.TextBlue:
	case HAType.TextBrown:
	case HAType.TextGray:
	case HAType.TextGreen:
	case HAType.TextRed:
		return true;
}
return false;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_IsFolder:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:54:07">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="106" SelectionLength="0">return (this.IsRealFolder
	|| this.m_Type == HAType.FolderGray || this.m_Type == HAType.FolderGray_Open);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_IsRealFolder:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:54:21">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="323" SelectionLength="0">switch (this.m_Type)
{
	case HAType.Folder:
	case HAType.Folder_Open:
	case HAType.FolderBlue:
	case HAType.FolderBule_Open:
	case HAType.FolderBrown:
	case HAType.FolderBrown_Open:
	case HAType.FolderGreen:
	case HAType.FolderGreen_Open:
	case HAType.FolderRed:
	case HAType.FolderRed_Open:
		return true;
}
return false;
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="SetIcon:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:54:38">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="194" SelectionLength="0">int t = (int)this.m_Type;
if (this.IsFolder)
{
	if (m_Type.ToString().EndsWith("_Open")) t--;
	if (this.Nodes.Count &gt; 0 &amp;&amp; this.IsExpanded) t++;
}
this.SelectedImageIndex = this.ImageIndex = t;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Clone:override object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:54:52">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="261" SelectionLength="0">HATreeNode ret = (HATreeNode)base.Clone();
ret.Type         = this.Type;
ret.m_IsExpanded = this.m_IsExpanded;
ret.m_IsSelected = this.m_IsSelected;
ret.link         = this.link;
ret.Server       = this.Server;
ret.LastModified = this.LastModified;
return ret;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="StoreState" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:55:03">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="166" SelectionLength="0">this.m_IsExpanded = this.IsExpanded;
this.m_IsSelected = this.IsSelected;

foreach (TreeNode n in this.Nodes)
{
	if (n is HATreeNode) ((HATreeNode)n).StoreState();
}
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="ApplyState" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:55:13">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="336" SelectionLength="0">if (this.m_IsExpanded) this.Expand();
if (this.m_IsSelected) this.TreeView.SelectedNode = this;
if (this.link == string.Empty)
{
	this.NodeFont = null;
}
else if (this.TreeView != null)
{
	this.NodeFont = (this.TreeView as HAClass).LinkFont;
}

foreach (TreeNode n in this.Nodes)
{
	if (n is HATreeNode) ((HATreeNode)n).ApplyState();
}
</Source>
        </HAFunc>
        <HAFunc Type="Folder" Text="XML" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:55:24">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="ToXml:override" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:55:56">
            <Arguments>
              <HAObject Type="Private" Text="xw:XmlTextWriter" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 19:55:39" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="1061" SelectionLength="0">XmlTextWriter xw2;
if (this.link == string.Empty)
{
	xw2 = xw;
}
else if (xw.BaseStream is FileStream)
{
	try
	{
		Uri uri1 = new Uri((xw.BaseStream as FileStream).Name);
		Uri uri2 = new Uri(this.link);

		xw2 = new XmlTextWriter(this.link, Encoding.UTF8);
		xw2.Formatting = Formatting.Indented;
		xw2.WriteStartDocument();

		xw.WriteStartElement(this.XmlName);
		xw.WriteAttributeString("Link"  , uri1.MakeRelative(uri2));
		xw.WriteAttributeString("Server", this.Server);
		xw.WriteEndElement();
	}
	catch
	{
		xw2 = xw;
	}
}
else if (File.Exists(this.link))
{
	// ドラッグ＆ドロップによるリンクの再現
	xw2 = null;
	xw.WriteStartElement(this.XmlName);
	xw.WriteAttributeString("Link"  , this.link);
	xw.WriteAttributeString("Server", this.Server);
	xw.WriteEndElement();
}
else
{
	xw2 = xw;
}

if (xw2 != null)
{
	xw2.WriteStartElement(this.XmlName);

	this.WriteXml(xw2);

	DnDTreeNode dn;
	foreach(TreeNode n in Nodes)
	{
		dn = (DnDTreeNode)n;
		if (dn != null) dn.ToXml(xw2);
	}

	xw2.WriteEndElement();

	if (xw2 != xw)
	{
		xw2.WriteEndDocument();
		xw2.Close();
	}
}
</Source>
            <HAFunc Type="Public" Text="WriteXml:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:56:40">
              <Arguments>
                <HAObject Type="Private" Text="xw:XmlTextWriter" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 19:56:16" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="399" SelectionLength="0">xw.WriteAttributeString("Type", Type.ToString());
xw.WriteAttributeString("Text", this.Text);
xw.WriteAttributeString("IsExpanded", XmlConvert.ToString(this.m_IsExpanded));
xw.WriteAttributeString("IsSelected", XmlConvert.ToString(this.m_IsSelected));
xw.WriteAttributeString("AllowDrag" , XmlConvert.ToString(this.AllowDrag));
xw.WriteAttributeString("LastModified", this.LastModified.ToString());
</Source>
            </HAFunc>
          </HAFunc>
          <HAFunc Type="Public" Text="FromXml:override" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:57:00">
            <Arguments>
              <HAObject Type="Private" Text="xr:XmlTextReader" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 19:56:46" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="1155" SelectionLength="0">if (xr.Name != this.XmlName || xr.NodeType != XmlNodeType.Element) return;

XmlTextReader xr2;
string link = xr.GetAttribute("Link");
if (link == null || link.Length &lt; 1)
{
	xr2 = xr;
}
else
{
	try
	{
		if (!this.IsValidLink(link)) throw new Exception();

		string uri = xr.BaseURI;
		if (uri != null &amp;&amp; uri.Length &gt; 0)
		{
			link = new Uri(new Uri(uri), link).LocalPath;
			if (!this.IsValidLink(link)) throw new Exception();
		}
		this.link = link;
		this.Server = xr.GetAttribute("Server");
		if (this.Server == null || this.Server.Length &lt; 1) this.Server = "";
		this.ApplyState();

		xr2 = new XmlTextReader(link);
		while (xr2.Read() &amp;&amp; xr2.Name != this.XmlName);
	}
	catch
	{
		this.Type = HAType.Comment;
		this.Text = "リンク失敗";
		return;
	}
}

this.ReadXml(xr2);
if (xr2.IsEmptyElement) return;

HATreeNode n;
while (xr2.Read())
{
	if (xr2.Name == this.XmlName &amp;&amp; xr2.NodeType == XmlNodeType.Element)
	{
		n = this.NewNode;
		Nodes.Add(n);
		n.FromXml(xr2);
	}
	else if (xr2.Name == this.XmlName &amp;&amp; xr2.NodeType == XmlNodeType.EndElement)
	{
		break;
	}
	else
	{
		ReadXmlNode(xr2);
	}
}

if (m_IsExpanded) Expand();

if (xr2 != xr) xr2.Close();
</Source>
            <HAFunc Type="Public" Text="ReadXml:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:57:21">
              <Arguments>
                <HAObject Type="Private" Text="xr:XmlTextReader" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 19:57:10" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="504" SelectionLength="0">this.Type = (HAType)HAType.Parse(typeof(HAType), xr.GetAttribute("Type"));
this.Text = xr.GetAttribute("Text");
this.m_IsExpanded = XmlConvert.ToBoolean(xr.GetAttribute("IsExpanded"));
this.m_IsSelected = XmlConvert.ToBoolean(xr.GetAttribute("IsSelected"));
this.AllowDrag    = XmlConvert.ToBoolean(xr.GetAttribute("AllowDrag"));

string lastModified = xr.GetAttribute("LastModified");
this.LastModified = (lastModified != null &amp;&amp; lastModified.Length &gt; 0)
	? DateTime.Parse(lastModified) : DateTime.Now;
</Source>
            </HAFunc>
            <HAFunc Type="Public" Text="ReadXmlNode:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:57:32">
              <Arguments>
                <HAObject Type="Private" Text="xr:XmlTextReader" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 19:57:32" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="0" SelectionLength="0" />
            </HAFunc>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Folder" Text="Link" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:57:48">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="get_Link:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:58:06">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="18" SelectionLength="0">return this.link;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="set_Link:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 20:14:47">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="542" SelectionLength="0">if (value == null)
{
	this.link = string.Empty;
}
else if (!this.IsValidLink(value))
{
	MessageBox.Show("リンク先が重複しています。:\r\n\r\n" + value,
		"エラー", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
}
else if (value != this.link)
{
	if (File.Exists(value))
	{
		string server = this.Server;
		this.Init();
		XmlTextReader xr = new XmlTextReader(value);
		while (xr.Read() &amp;&amp; xr.Name != this.XmlName);
		this.FromXml(xr);
		xr.Close();
		this.Server = server;
		this.OnRefreshNode(EventArgs.Empty);
	}
	this.link = value;
	this.ApplyState();
}
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_TargetFileName:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:58:36">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="154" SelectionLength="0">if (this.link != string.Empty) return this.link;

HATreeNode p = this.Parent as HATreeNode;
if (p != null) return p.TargetFileName;

return string.Empty;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="IsValidLink:bool" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:59:16">
            <Arguments>
              <HAObject Type="Private" Text="link:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 19:58:50" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="250" SelectionLength="0">HATreeNode p = this.Parent as HATreeNode;
if (p != null &amp;&amp; !p.CheckParentLink(link)) return false;

// foreach (TreeNode n in this.Nodes)
// {
// 	HATreeNode nn = n as HATreeNode;
// 	if (!nn.CheckChildrenLink(link)) return false;
// }

return true;
</Source>
            <HAFunc Type="Private" Text="CheckParentLink:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 20:08:28">
              <Arguments>
                <HAObject Type="Private" Text="link:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 19:59:32" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="141" SelectionLength="0">if (this.link == link) return false;

HATreeNode p = this.Parent as HATreeNode;
if (p != null) return p.CheckParentLink(link);

return true;
</Source>
            </HAFunc>
            <HAFunc Type="Private" Text="CheckChildrenLink:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 20:08:08">
              <Arguments>
                <HAObject Type="Private" Text="link:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 19:59:32" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="0" SelectionLength="0">if (this.link == link) return false;

foreach (TreeNode n in this.Nodes)
{
	HATreeNode nn = n as HATreeNode;
	if (!nn.CheckChildrenLink(link)) return false;
}

return true;
</Source>
            </HAFunc>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Folder" Text="同期" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 19:59:49">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="Synchronize:bool" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/21 15:39:36">
            <Arguments>
              <HAObject Type="Private" Text="manager:HAUploaderManager" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 20:00:12" />
              <HAObject Type="Private" Text="output:LinkRichTextBox" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 20:00:19" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="0" SelectionLength="0">this.ForeColor = this.TreeView.ForeColor;
if (!this.SynchronizeThis(manager, output)) return false;

foreach (TreeNode n in this.Nodes)
{
	if (!(n as HAClassNode).Synchronize(manager, output)) return false;
}

return true;
</Source>
            <HAFunc Type="Private" Text="SynchronizeThis:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 20:02:17">
              <Arguments>
                <HAObject Type="Private" Text="manager:HAUploaderManager" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 20:01:19" />
                <HAObject Type="Private" Text="output:LinkRichTextBox" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 20:01:25" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="221" SelectionLength="0">if (this.Server == "") return true;

output.AppendLine(string.Format("{0}: {1}", this.Text, this.Server));
if (this.link.Length &lt; 1)
{
	output.AppendLine("リンクが設定されていません。", Color.Red);
	output.ShowLast();
	return false;
}

HAUploaderInfo inf = manager.GetInfo(this.Server);
if (inf.Files == null)
{
	output.AppendLine("サーバに接続しています...");
	output.ShowLast();
	string res = inf.Dir();
	if (res != null)
	{
		output.AppendLine(string.Format("エラー: {0}", res), Color.Red);
		output.ShowLast();
		return false;
	}
}

string target = Path.GetFileName(this.link);
HAUploaderFileInfo fi;
FileInfo fi2 = new FileInfo(this.link);
bool existsL = fi2.Exists;
bool existsS = inf.Files.Contains(target);
if (!existsL)
{
	output.AppendLine(string.Format("{0}: ファイルがローカルに存在しません。", this.link));
}
if (!existsS)
{
	output.AppendLine(string.Format("{0}: ファイルがサーバに存在しません。", target));
	if (!existsL)
	{
		output.AppendLine("エラー: リンクが解決できません。", Color.Red);
		output.ShowLast();
		return false;
	}
	fi = new HAUploaderFileInfo(inf, this.link);
	return this.Upload(fi, output);
}

fi = inf.Files[target] as HAUploaderFileInfo;
byte[] data = null;
if (!existsL &amp;&amp; existsS)
{
	return this.Download(fi, fi2, output, data);
}

if (fi.Length == fi2.Length)
{
	// ファイルサイズが同じため内容を比較
	output.AppendLine(string.Format("{0}: 内容を比較しています...", target));
	output.ShowLast();
	data = fi.DownloadData();
	if (data == null)
	{
		output.AppendLine("エラー: ダウンロードに失敗しました。", Color.Red);
		output.ShowLast();
		return false;
	}
	bool same = true;
	try
	{
		FileStream fs = fi2.OpenRead();
		foreach (byte b in data)
		{
			int b2 = fs.ReadByte();
			if (b2 != (int)b)
			{
				same = false;
				break;
			}
		}
		fs.Close();
	}
	catch (Exception ex)
	{
		output.AppendLine("エラー: " + ex.ToString(), Color.Red);
		output.ShowLast();
		return false;
	}
	if (same)
	{
		output.AppendLine("最新です。");
		output.ShowLast();
		return true;
	}
}

// 同期
string msg = string.Format("ローカル: {0}\r\nサーバ: {1}", fi2.LastWriteTime, fi.LastWriteTime);
DialogResult dr;
if (fi.LastWriteTime &lt;= fi2.LastWriteTime)
{
	// ローカルの方が新しい
	dr = this.Ask("アップロードしますか？\r\n\r\n" + msg, target);
	if (dr == DialogResult.Cancel)
	{
		return false;
	}
	else if (dr == DialogResult.Yes)
	{
		return this.Upload(fi, output);
	}
	return true;
}

dr = this.Ask("ダウンロードしますか？\r\n\r\n" + msg, target);
if (dr == DialogResult.Cancel)
{
	return false;
}
else if (dr == DialogResult.No)
{
	return true;
}

// ダウンロード
return this.Download(fi, fi2, output, data);
</Source>
            </HAFunc>
            <HAFunc Type="Private" Text="Upload:bool" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/21 15:41:38">
              <Arguments>
                <HAObject Type="Private" Text="fileInfo:HAUploaderFileInfo" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 20:02:40" />
                <HAObject Type="Private" Text="output:LinkRichTextBox" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 20:02:48" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="316" SelectionLength="0">output.AppendLine(fileInfo.Name + ": アップロードしています...");
output.ShowLast();
string res = fileInfo.Upload(this.link);
if (res != null)
{
	output.AppendLine(string.Format("エラー: {0}", res), Color.Red);
	output.ShowLast();
	return false;
}

fileInfo.LastWriteTime = DateTime.Now;
this.ForeColor = Color.Blue;
return true;
</Source>
            </HAFunc>
            <HAFunc Type="Private" Text="Download:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/21 15:41:16">
              <Arguments>
                <HAObject Type="Private" Text="fi:HAUploaderFileInfo" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 20:03:05" />
                <HAObject Type="Private" Text="fi2:FileInfo" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 20:03:10" />
                <HAObject Type="Private" Text="output:LinkRichTextBox" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 20:03:14" />
                <HAObject Type="Private" Text="data:byte[]" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 20:03:19" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="921" SelectionLength="0">if (data == null)
{
	output.AppendLine(fi.Name + ": ダウンロードしています...");
	output.ShowLast();
	data = fi.DownloadData();
	if (data == null)
	{
		output.AppendLine("エラー: ダウンロードに失敗しました。", Color.Red);
		output.ShowLast();
		return false;
	}
}

output.AppendLine(fi.Name + ": 書き込んでいます...");
output.ShowLast();
try
{
	DirectoryInfo di = fi2.Directory;
	if (!di.Exists) di.Create();
	FileStream fs = fi2.OpenWrite();
	fs.Write(data, 0, data.Length);
	fs.Close();

	string link = this.link;
	string server = this.Server;
	this.Init();
	fs = fi2.OpenRead();
	XmlTextReader xr = new XmlTextReader(fs);
	while (xr.Read() &amp;&amp; xr.Name != this.XmlName);
	this.FromXml(xr);
	xr.Close();
	fs.Close();
	this.Link = link;
	this.Server = server;
	this.OnRefreshNode(EventArgs.Empty);
}
catch (Exception ex)
{
	output.AppendLine("エラー: " + ex.ToString(), Color.Red);
	output.ShowLast();
	return false;
}

this.ForeColor = Color.Red;
return true;
</Source>
            </HAFunc>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Protected" Text="Ask:DialogResult" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 20:04:08">
          <Arguments>
            <HAObject Type="Private" Text="question:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 20:03:55" />
            <HAObject Type="Private" Text="caption:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 20:03:59" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="209" SelectionLength="0">Cursor cur = Cursor.Current;
Cursor.Current = Cursors.Default;
DialogResult ret = MessageBox.Show(question, caption,
	MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question);
Cursor.Current = cur;
return ret;
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="OnRefreshNode:virtual" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 20:15:52">
          <Arguments>
            <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 20:12:00" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="80" SelectionLength="0">HATree tv = this.TreeView as HATree;
if (tv != null) tv.OnRefreshNode(this, e);
</Source>
        </HAFunc>
      </HAFunc>
    </Body>
    <Footer>
      <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 19:47:57">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
    </Footer>
  </HAClass>
  <HAClass Type="Public" Text="HAClass:HATree" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 20:19:59">
    <HAObject Type="Private" Text="contextMenu1:ContextMenu" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:59">
      <HAObject Type="Private" Text="mnuType:MenuItem" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:59" />
    </HAObject>
    <HAObject Type="Public" Text="MemberTreeView:HAMember" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:59" />
    <HAObject Type="Public" Text="FuncTreeView:HAFunc" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:59" />
    <HAObject Type="Private" Text="TargetNode:HAClassNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:59" />
    <HAObject Type="Public" Text="LinkFont:Font" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:59" />
    <HAObject Type="Public" Text="Property:PropertyGrid" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 13:21:59" />
    <Header>
      <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 13:21:59">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="189" SelectionLength="0">using System;
using System.Collections;
using System.Drawing;
using System.IO;
using System.Text;
using System.Windows.Forms;
using System.Xml;
using Girl.Coding;
using Girl.Windows.Forms;
</Source>
      </HAFunc>
    </Header>
    <Body>
      <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 13:21:59">
        <Arguments />
        <Comment SelectionStart="37" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:59">
          <Arguments />
          <Comment SelectionStart="32" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="321" SelectionLength="0">this.dataFormat = "HierArch Class Data";

this.MemberTreeView = null;
this.FuncTreeView   = null;
this.TargetNode     = null;
this.Property       = null;

this.AllowDrop = true;
this.ContextMenu = this.contextMenu1 = new ContextMenu();
this.HideSelection = false;
this.LabelEdit = true;
this.ImageList = this.imageList1;

this.mnuAccess     .Text = "クラス(&amp;C)";
this.mnuFolderRed  .Text = "GUI 実行ファイル(&amp;W)";
this.mnuFolderBlue .Text = "CUI 実行ファイル(&amp;E)";
this.mnuFolderGreen.Text = "ライブラリ(&amp;L)";
this.mnuFolderBrown.Text = "モジュール(&amp;M)";
this.mnuFolderGray .Text = "仮想フォルダ(&amp;V)";

this.contextMenu1.MenuItems.AddRange(new MenuItem[]
	{
		mnuType = new MenuItem("種類変更(&amp;T)", new MenuItem[]
			{
				this.mnuAccess,
				this.mnuFolder,
				this.mnuText,
				this.mnuEtc
			}),
		new MenuItem("-"),
		this.mnuChild,
		this.mnuAppend,
		this.mnuInsert,
		new MenuItem("-"),
		this.mnuDelete,
		this.mnuRename,
	});

this.LinkFont = new Font(this.Font, FontStyle.Italic);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="OnChanged:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:59">
          <Arguments>
            <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:59" />
            <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 13:21:59" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="188" SelectionLength="0">if (this.IgnoreChanged) return;

base.OnChanged(sender, e);
if (this.TargetNode != null) this.TargetNode.LastModified = DateTime.Now;
if (this.Property   != null) this.Property.Refresh();
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="OnNodeTypeChanged:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:59">
          <Arguments>
            <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="34" SelectionLength="0">this.StoreData();
this.SetView();
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="OnRefreshNode:override" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 20:19:59">
          <Arguments>
            <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 20:17:02" />
            <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 20:17:05" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="87" SelectionLength="0">base.OnRefreshNode(sender, e);
if (sender != this.TargetNode) return;

this.SetView();
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="StartDrag:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:59">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="50" SelectionLength="0">this.Focus();
this.StoreData();
base.StartDrag();
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="SetState:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:59">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="206" SelectionLength="0">if (this.Nodes.Count &lt; 1 &amp;&amp; this.TargetNode != null)
{
	this.TargetNode = null;
	this.SetView();
}

HAClassNode n = this.SelectedNode as HAClassNode;
mnuType.Enabled = mnuDelete.Enabled = mnuRename.Enabled
	= (n != null &amp;&amp; n.AllowDrag);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="InitNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:59">
          <Arguments>
            <HAObject Type="Private" Text="n:HAClassNode" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 13:09:19" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="743" SelectionLength="0">n.Header = new HAFuncNode("ヘッダ");
n.Header.Type = HAType.Text;
n.Header.m_IsSelected = true;
n.Header.AllowDrag = false;
n.Header.Comment = "ここにソースコードの注釈を書きます。\r\n";
n.Header.Source  = "using System;\r\n";

n.Body = new HAFuncNode("本体");
n.Body.Type = HAType.Class;
n.Body.m_IsExpanded = true;
n.Body.AllowDrag = false;
n.Body.Comment = "&lt;summary&gt;\r\nここにクラスの説明を書きます。\r\n&lt;/summary&gt;\r\n";

HAFuncNode cst = new HAFuncNode("__" + "CLASS");
cst.Comment = "&lt;summary&gt;\r\nコンストラクタです。\r\n&lt;/summary&gt;\r\n";
n.Body.Nodes.Add(cst);

HAFuncNode dst = new HAFuncNode("~__" + "CLASS");
dst.Comment = "&lt;summary&gt;\r\nデストラクタです。\r\n&lt;/summary&gt;\r\n";
n.Body.Nodes.Add(dst);

n.Footer = new HAFuncNode("フッタ");
n.Footer.Type = HAType.Text;
n.Footer.AllowDrag = false;
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="get_NewNode:override HATreeNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:59">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="77" SelectionLength="0">HAClassNode ret = new HAClassNode("新しいクラス");
this.InitNode(ret);
return ret;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="StoreData" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:59">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="690" SelectionLength="0">if (this.TargetNode == null || this.FuncTreeView == null) return;

this.StoreState();

this.FuncTreeView  .StoreData();
this.MemberTreeView.StoreState();
this.TargetNode.Members  .Clear();
foreach (TreeNode n in this.MemberTreeView.Nodes)
{
	if (n is HAMemberNode) this.TargetNode.Members.Add(n.Clone());
}

this.TargetNode.Header = this.FuncTreeView.Header.Clone() as HAFuncNode;
this.TargetNode.Body   = this.FuncTreeView.Body  .Clone() as HAFuncNode;
if (this.FuncTreeView.Body.TreeView == null)
{
	foreach (TreeNode n in this.FuncTreeView.Nodes)
	{
		this.TargetNode.Body.Nodes.Add(n.Clone() as HAFuncNode);
	}
}
this.TargetNode.Footer = this.FuncTreeView.Footer.Clone() as HAFuncNode;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="SetView" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:59">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="129" SelectionLength="0">Cursor curOrig = Cursor.Current;
Cursor.Current = Cursors.WaitCursor;
bool flag = this.IgnoreChanged;
this.IgnoreChanged = true;

if (this.TargetNode != null)
{
	if (this.MemberTreeView != null) this.MemberTreeView.SetView(this.TargetNode.Members);
	if (this.FuncTreeView   != null)
	{
		this.FuncTreeView.OwnerClass = this.TargetNode;
		this.FuncTreeView.SetView(this.TargetNode);
	}
	if (this.Property != null)
	{
		this.Property.SelectedObject = this.TargetNode.Property;
	}
}
else
{
	if (this.MemberTreeView != null) this.MemberTreeView.SetView(null);
	if (this.FuncTreeView   != null)
	{
		this.FuncTreeView.OwnerClass = null;
		this.FuncTreeView.SetView(null);
	}
	if (this.Property != null)
	{
		this.Property.SelectedObject = null;
	}
}
this.SetState();

this.IgnoreChanged = flag;
Cursor.Current = curOrig;
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="OnAfterSelect:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:59">
          <Arguments>
            <HAObject Type="Private" Text="e:TreeViewEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="169" SelectionLength="0">base.OnAfterSelect(e);
if (this.IgnoreChanged) return;

this.StoreData();
if (this.TargetNode == e.Node) return;

this.TargetNode = (HAClassNode)e.Node;
this.SetView();
</Source>
        </HAFunc>
        <HAFunc Type="Folder" Text="XML" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:59">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="FromXml:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:59">
            <Arguments>
              <HAObject Type="Private" Text="xr:XmlTextReader" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
              <HAObject Type="Private" Text="nc:TreeNodeCollection" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
              <HAObject Type="Private" Text="index:int" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="333" SelectionLength="0">DnDTreeNode dn;
bool first = true;
while (xr.Read())
{
	if (xr.Name == "HAClass" &amp;&amp; xr.NodeType == XmlNodeType.Element)
	{
		dn = new HAClassNode();
		nc.Insert(index, dn);
		dn.FromXml(xr);
		index++;
		if (first)
		{
			dn.EnsureVisible();
			SelectedNode = dn;
			first = false;
			this.OnChanged(this, new EventArgs());
		}
	}
}
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Folder" Text="Generation" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:59">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="Generate" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:59">
            <Arguments>
              <HAObject Type="Private" Text="path:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="98" SelectionLength="0">this.StoreData();
foreach (TreeNode n in this.Nodes)
{
	(n as HAClassNode).Generate(path);
}
</Source>
          </HAFunc>
        </HAFunc>
      </HAFunc>
    </Body>
    <Footer>
      <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 13:21:59">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
    </Footer>
  </HAClass>
  <HAClass Type="Public" Text="HAClassNode:HATreeNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 17:32:14">
    <HAObject Type="Public" Text="Members:ArrayList" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:59" />
    <HAObject Type="Public" Text="Header:HAFuncNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:59" />
    <HAObject Type="Public" Text="Body:HAFuncNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:59" />
    <HAObject Type="Public" Text="Footer:HAFuncNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:59" />
    <HAObject Type="Public" Text="Property:HAClassProperty" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 13:14:59" />
    <Header>
      <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 13:14:59">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="214" SelectionLength="0">using System;
using System.Collections;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Text;
using System.Windows.Forms;
using System.Xml;
using Girl.Coding;
using Girl.Windows.Forms;
</Source>
      </HAFunc>
    </Header>
    <Body>
      <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 16:07:22">
        <Arguments />
        <Comment SelectionStart="37" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="35" SelectionLength="0">public const string ext = "hacls";
</Source>
        <HAFunc Type="Public" Text="Init:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 17:32:14">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="197" SelectionLength="0">base.Init();

this.Members   = new ArrayList();
this.Header    = new HAFuncNode();
this.Body      = new HAFuncNode();
this.Footer    = new HAFuncNode();
this.Property  = new HAClassProperty(this);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:59">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="0" SelectionLength="0" />
        </HAFunc>
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:59">
          <Arguments>
            <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="18" SelectionLength="0">this.Text = text;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_XmlName:override string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:59">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="18" SelectionLength="0">return "HAClass";
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_NewNode:override HATreeNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:59">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="26" SelectionLength="0">return new HAClassNode();
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_Namespace:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:59">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="273" SelectionLength="0">ObjectParser op = new ObjectParser(this.Text);
string ns = (this.IsFolder) ? op.Type : "";
if (ns.IndexOf('.') &gt;= 0 || this.Parent == null) return ns;

string pns = (this.Parent as HAClassNode).Namespace;
if (pns != "") return (ns != "") ? pns + "." + ns : pns;
return ns;
</Source>
        </HAFunc>
        <HAFunc Type="Folder" Text="XML" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:59">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="WriteXml:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:59">
            <Arguments>
              <HAObject Type="Private" Text="xw:XmlTextWriter" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 13:14:56" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="348" SelectionLength="0">base.WriteXml(xw);

foreach (Object obj in this.Members)
{
	if (obj is HAMemberNode) ((HAMemberNode)obj).ToXml(xw);
}

xw.WriteStartElement("Header");
this.Header.ToXml(xw);
xw.WriteEndElement();

xw.WriteStartElement("Body");
this.Body.ToXml(xw);
xw.WriteEndElement();

xw.WriteStartElement("Footer");
this.Footer.ToXml(xw);
xw.WriteEndElement();
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="ReadXmlNode:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:59">
            <Arguments>
              <HAObject Type="Private" Text="xr:XmlTextReader" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 13:14:55" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="868" SelectionLength="0">if (xr.Name == "HAObject" &amp;&amp; xr.NodeType == XmlNodeType.Element)
{
	HAMemberNode n = new HAMemberNode();
	Members.Add(n);
	n.FromXml(xr);
}
else if (xr.Name == "Header" &amp;&amp; xr.NodeType == XmlNodeType.Element &amp;&amp; !xr.IsEmptyElement)
{
	while (xr.Read() &amp;&amp; xr.NodeType == XmlNodeType.Whitespace);
	if (xr.Name == "HAFunc" &amp;&amp; xr.NodeType == XmlNodeType.Element) this.Header.FromXml(xr);
}
else if (xr.Name == "Body" &amp;&amp; xr.NodeType == XmlNodeType.Element &amp;&amp; !xr.IsEmptyElement)
{
	while (xr.Read() &amp;&amp; xr.NodeType == XmlNodeType.Whitespace);
	if (xr.Name == "HAFunc" &amp;&amp; xr.NodeType == XmlNodeType.Element) this.Body.FromXml(xr);
}
else if (xr.Name == "Footer" &amp;&amp; xr.NodeType == XmlNodeType.Element &amp;&amp; !xr.IsEmptyElement)
{
	while (xr.Read() &amp;&amp; xr.NodeType == XmlNodeType.Whitespace);
	if (xr.Name == "HAFunc" &amp;&amp; xr.NodeType == XmlNodeType.Element) this.Footer.FromXml(xr);
}
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="FromHds" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:59">
            <Arguments>
              <HAObject Type="Private" Text="xr:XmlTextReader" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="370" SelectionLength="0">this.Type = HAType.Text;
if (xr.Name != "hds" || xr.NodeType != XmlNodeType.Element || xr.IsEmptyElement) return;

HAFuncNode n;
while (xr.Read())
{
	if (xr.Name == "node" &amp;&amp; xr.NodeType == XmlNodeType.Element)
	{
		n = new HAFuncNode();
		this.Body.Nodes.Add(n);
		n.FromHds(xr);
	}
	else if (xr.Name == "hds" &amp;&amp; xr.NodeType == XmlNodeType.EndElement)
	{
		break;
	}
}
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Folder" Text="Generation" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:59">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="Generate" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 13:14:59">
            <Arguments>
              <HAObject Type="Private" Text="path:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="561" SelectionLength="0">HAType t = this.Type;
string target = path;
if (!target.EndsWith(@"\")) target += @"\";
target += new ObjectParser(this.Text).Name;

if (t == HAType.Comment)
{
	return;
}
else if (this.IsRealFolder)
{
	if (!new DirectoryInfo(target).Exists)
	{
		try
		{
			Directory.CreateDirectory(target);
		}
		catch
		{
			return;
		}
	}
	path = target;
	foreach (TreeNode n in this.Body.Nodes)
	{
		(n as HAFuncNode).GenerateFolder(path);
	}
}
else if (this.IsObject)
{
	this.GenerateClass(target + ".cs");
}
else if (this.IsText)
{
	this.GenerateText(target + ".txt");
}

foreach (TreeNode n in this.Nodes)
{
	(n as HAClassNode).Generate(path);
}</Source>
          </HAFunc>
          <HAFunc Type="Private" Text="GenerateClass" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:59">
            <Arguments>
              <HAObject Type="Private" Text="target:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 13:05:14" />
            </Arguments>
            <HAObject Type="Private" Text="fs:FileStream" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:05:14" />
            <HAObject Type="Private" Text="cw:CodeWriter" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 13:05:14" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="938" SelectionLength="0">try
{
	fs = new FileStream(target, FileMode.Create);
}
catch
{
	return;
}

cw = new CodeWriter(fs, Encoding.UTF8);
ObjectParser op = new ObjectParser(this.Text);
cw.ClassName = op.Name;

// Header
this.WriteHeader(cw);
this.WriteLocalHeader(cw);
if (this.Header.Comment != "")
{
	cw.WriteBlankLine();
	cw.WriteCodes("// ", this.Header.Comment);
}
if (this.Header.Source != "")
{
	cw.WriteBlankLine();
	cw.WriteCodes(this.Header.Source);
}

// Namespace
string ns = this.Namespace;
if (ns != "")
{
	cw.WriteBlankLine();
	cw.WriteStartBlock("namespace " + ns);
}

// Body
cw.WriteBlankLine();
if (this.Body.Comment != "") cw.WriteCodes("/// ", this.Body.Comment);
string classdecl = this.Type.ToString().ToLower() + " class " + op.Name;
if (op.Type != "") classdecl += " : " + op.Type;
cw.WriteStartBlock(classdecl);
if (this.Body.Source != "")
{
	cw.WriteCodes(cw.ReplaceKeywords(this.Body.Source));
}
foreach (Object obj in this.Members)
{
	(obj as HAMemberNode).Generate(cw);
}
this.Body.ResetPropertyPair();
this.Body.SearchPropertyPair(this.Body);
foreach (Object obj in this.Body.Nodes)
{
	(obj as HAFuncNode).GenerateClass(cw);
}
cw.WriteEndBlock();

if (ns != "") cw.WriteEndBlock();

// Footer
if (this.Footer.Comment != "")
{
	cw.WriteBlankLine();
	cw.WriteCodes("/// ", this.Footer.Comment);
}
if (this.Footer.Source != "")
{
	cw.WriteBlankLine();
	cw.WriteCodes(this.Footer.Source);
}

cw.Close();
fs.Close();
</Source>
            <HAFunc Type="Private" Text="WriteHeader" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:59">
              <Arguments>
                <HAObject Type="Private" Text="cw:CodeWriter" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="254" SelectionLength="0">if (this.Parent != null) (this.Parent as HAClassNode).WriteHeader(cw);
if (!this.IsFolder) return;

HAFuncNode n = this.Body.Search("Header", HAType.Comment);
if (n == null || n.Source == "") return;

cw.WriteBlankLine();
cw.WriteCodes("// ", n.Source);
</Source>
            </HAFunc>
            <HAFunc Type="Private" Text="WriteLocalHeader" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:59">
              <Arguments>
                <HAObject Type="Private" Text="cw:CodeWriter" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="278" SelectionLength="0">if (!this.IsFolder)
{
	if (this.Parent != null)
	{
		(this.Parent as HAClassNode).WriteLocalHeader(cw);
	}
	return;
}

HAFuncNode n = this.Body.Search("LocalHeader", HAType.Comment);
if (n == null || n.Source == "") return;

cw.WriteBlankLine();
cw.WriteCodes("// ", n.Source);
</Source>
            </HAFunc>
          </HAFunc>
          <HAFunc Type="Private" Text="GenerateText" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:59">
            <Arguments>
              <HAObject Type="Private" Text="target:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            </Arguments>
            <HAObject Type="Private" Text="fs:FileStream" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            <HAObject Type="Private" Text="haw:HierArchWriter" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            <HAObject Type="Private" Text="domain:AppDomain" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="935" SelectionLength="0">try
{
	fs = new FileStream(target, FileMode.Create);
}
catch
{
	return;
}

haw = null;
domain = null;
try
{
	string dll = string.Format(@"{0}\{1}.dll",
		HADoc.UserPluginDir, this.Type.ToString());
	if (File.Exists(dll))
	{
		AppDomainSetup setup = new AppDomainSetup();
		setup.ApplicationBase = HADoc.UserPluginDir;
		domain = AppDomain.CreateDomain(this.Type.ToString(), null, setup);
		haw = domain.CreateInstanceFromAndUnwrap(
			dll, "Plugin", false,
			BindingFlags.Default, null,
			new object[] {fs},
			null, null, null) as HierArchWriter;
	}
}
catch (Exception ex)
{
	MessageBox.Show(ex.ToString());
}
if (haw == null) haw = new HierArchWriter(fs, Encoding.Default);

haw.WriteTitle(this.Type, this.Text);

int i = 1;
foreach (Object obj in this.Body.Nodes)
{
	(obj as HAFuncNode).GenerateText(haw, i.ToString(), this.Type == HAType.TextBlue);
	i++;
}
haw.Close();
fs .Close();
if (domain != null) AppDomain.Unload(domain);
</Source>
          </HAFunc>
        </HAFunc>
      </HAFunc>
    </Body>
    <Footer>
      <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 13:14:59">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
    </Footer>
  </HAClass>
  <HAClass Type="Public" Text="HAFunc:HATree" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/02 22:54:00">
    <HAObject Type="Private" Text="contextMenu1:ContextMenu" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:23:00">
      <HAObject Type="Private" Text="mnuType:MenuItem" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:23:00" />
    </HAObject>
    <HAObject Type="Public" Text="ArgTreeView:HAObject" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:23:00" />
    <HAObject Type="Public" Text="ObjectTreeView:HAObject" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:23:00" />
    <HAObject Type="Public" Text="CommentTextBox:ExRichTextBox" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:23:00" />
    <HAObject Type="Public" Text="SourceTextBox:CodeEditor" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:23:00" />
    <HAObject Type="Public" Text="OwnerClass:HAClassNode" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:23:00">
      <HAObject Type="Public" Text="Header:HAFuncNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:23:00" />
      <HAObject Type="Public" Text="Body:HAFuncNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:23:00" />
      <HAObject Type="Public" Text="Footer:HAFuncNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:23:00" />
    </HAObject>
    <HAObject Type="Public" Text="TargetNode:HAFuncNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:23:00" />
    <HAObject Type="Private" Text="textFont:Font" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:23:00" />
    <HAObject Type="Private" Text="parser:ParserBase" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:23:00" />
    <HAObject Type="Public" Text="Property:PropertyGrid" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 13:23:00" />
    <Header>
      <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 13:23:00">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="171" SelectionLength="0">using System;
using System.Collections;
using System.Drawing;
using System.IO;
using System.Text;
using System.Windows.Forms;
using System.Xml;
using Girl.Coding;
using Girl.Windows.Forms;
</Source>
      </HAFunc>
    </Header>
    <Body>
      <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 13:23:00">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:23:00">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="241" SelectionLength="0">this.dataFormat = "HierArch Function Data";

this.ArgTreeView    = null;
this.ObjectTreeView = null;
this.CommentTextBox = null;
this.SourceTextBox  = null;
this.OwnerClass     = null;
this.TargetNode     = null;
this.Property       = null;

this.AllowDrop = true;
this.ContextMenu = this.contextMenu1 = new ContextMenu();
this.HideSelection = false;
this.LabelEdit = true;
this.ImageList = this.imageList1;

this.textFont = new Font("ＭＳ ゴシック", 9);
this.parser   = new CSharpParser();

this.mnuAccess    .Text = "関数(&amp;U)";
this.mnuFolderGray.Text = "仮想フォルダ(&amp;V)";

this.contextMenu1.MenuItems.AddRange(new MenuItem[]
	{
		mnuType = new MenuItem("種類変更(&amp;T)", new MenuItem[]
			{
				this.mnuAccess,
				this.mnuFolder,
				this.mnuText,
				this.mnuEtc
			}),
		new MenuItem("-"),
		this.mnuChild,
		this.mnuAppend,
		this.mnuInsert,
		new MenuItem("-"),
		this.mnuDelete,
		this.mnuRename
	});
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="OnChanged:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:23:00">
          <Arguments>
            <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:23:00" />
            <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 13:23:00" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0">if (this.IgnoreChanged) return;

base.OnChanged(sender, e);
if (this.TargetNode != null) this.TargetNode.LastModified = DateTime.Now;
if (this.Property   != null) this.Property.Refresh();
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="OnRefreshNode:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 20:19:34">
          <Arguments>
            <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 20:17:02" />
            <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 20:17:05" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="87" SelectionLength="0">base.OnRefreshNode(sender, e);
if (sender != this.TargetNode) return;

this.SetView();
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="MenuNodeChild_Click:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:23:00">
          <Arguments>
            <HAObject Type="Private" Text="sender:object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            <HAObject Type="Private" Text="e:EventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="358" SelectionLength="0">HATreeNode p = (HATreeNode)this.SelectedNode;
HATreeNode n = this.NewNode;
if (p == this.Header || p == this.Footer)
{
	n.Text = "新しい項目";
	n.Type = HAType.Text;
}
if (p != null)
{
	p.Nodes.Add(n);
	p.SetIcon();
}
else
{
	this.Nodes.Add(n);
}
n.EnsureVisible();
this.SelectedNode = n;
n.BeginEdit();
this.OnChanged(this, EventArgs.Empty);
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="StartDrag:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:23:00">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="53" SelectionLength="0">this.Focus();
this.StoreData();
base.StartDrag();
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="SetState:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:23:00">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="284" SelectionLength="0">if (this.Nodes.Count &lt; 1 &amp;&amp; this.TargetNode != null)
{
	this.TargetNode = null;
	this.SetView();
}

HAFuncNode n = this.SelectedNode as HAFuncNode;
mnuType.Enabled = mnuAppend.Enabled = mnuInsert.Enabled
	= mnuDelete.Enabled = mnuRename.Enabled = (n != null &amp;&amp; n.AllowDrag);
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="get_NewNode:override HATreeNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:23:00">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="33" SelectionLength="0">return new HAFuncNode("新しい関数");
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="StoreData" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/02 22:52:08">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="1067" SelectionLength="0">if (this.TargetNode == null) return;

this.StoreState();

this.ArgTreeView   .StoreState();
this.ObjectTreeView.StoreState();
this.TargetNode.Args   .Clear();
this.TargetNode.Objects.Clear();
foreach (TreeNode n in this.ArgTreeView.Nodes)
{
	if (n is HAObjectNode) this.TargetNode.Args.Add(n.Clone());
}

foreach (TreeNode n in this.ObjectTreeView.Nodes)
{
	if (n is HAObjectNode) this.TargetNode.Objects.Add(n.Clone());
}

if (this.CommentTextBox != null)
{
	this.TargetNode.Comment                = this.CommentTextBox.Text;
	this.TargetNode.CommentSelectionStart  = this.CommentTextBox.SelectionStart;
	this.TargetNode.CommentSelectionLength = this.CommentTextBox.SelectionLength;
}
if (this.SourceTextBox != null)
{
	this.TargetNode.Source                = this.SourceTextBox.Code;
	this.TargetNode.SourceSelectionStart  = this.SourceTextBox.SelectionStart;
	this.TargetNode.SourceSelectionLength = this.SourceTextBox.SelectionLength;
	if (this.TargetNode.EnableRtf)
	{
		this.TargetNode.Rtf = this.SourceTextBox.Rtf;
	}
	else
	{
		this.TargetNode.Rtf = "";
	}
}
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="SetView" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/02 22:54:00">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="1273" SelectionLength="0">bool flag = this.IgnoreChanged;
this.IgnoreChanged = true;

if (this.TargetNode != null)
{
	if (this.ArgTreeView    != null) this.ArgTreeView   .SetView(this.TargetNode.Args);
	if (this.ObjectTreeView != null) this.ObjectTreeView.SetView(this.TargetNode.Objects);
	if (this.CommentTextBox != null)
	{
		this.CommentTextBox.Enabled = true;
		this.CommentTextBox.Clear();
		this.CommentTextBox.Text = this.TargetNode.Comment;
		this.CommentTextBox.SelectionStart  = this.TargetNode.CommentSelectionStart;
		this.CommentTextBox.SelectionLength = this.TargetNode.CommentSelectionLength;
	}
	if (this.SourceTextBox != null)
	{
		this.SourceTextBox.Enabled = true;
		this.SourceTextBox.Clear();
		if (this.TargetNode.IsObject
			|| this.TargetNode.Type == HAType.Class
			|| this.TargetNode == this.Header
			|| this.TargetNode == this.Footer)
		{
			this.SourceTextBox.Parser = this.parser;
			this.SourceTextBox.DetectUrls = false;
			this.SourceTextBox.Code = this.TargetNode.Source;
		}
		else
		{
			this.SourceTextBox.Parser = null;
			this.SourceTextBox.DetectUrls = true;
			if (this.TargetNode.EnableRtf &amp;&amp; this.TargetNode.Rtf != "")
			{
				this.SourceTextBox.Rtf = this.TargetNode.Rtf;
			}
			else
			{
				this.SourceTextBox.Code = this.TargetNode.Source;
			}
		}
		this.SourceTextBox.SelectionStart  = this.TargetNode.SourceSelectionStart;
		this.SourceTextBox.SelectionLength = this.TargetNode.SourceSelectionLength;
	}
	if (this.Property != null)
	{
		this.Property.SelectedObject = this.TargetNode.Property;
	}
}
else
{
	if (this.ArgTreeView    != null) this.ArgTreeView   .SetView(null);
	if (this.ObjectTreeView != null) this.ObjectTreeView.SetView(null);
	if (this.CommentTextBox != null)
	{
		this.CommentTextBox.Enabled = false;
		this.CommentTextBox.Clear();
		this.CommentTextBox.SelectionStart  = 0;
		this.CommentTextBox.SelectionLength = 0;
	}
	if (this.SourceTextBox != null)
	{
		this.SourceTextBox.Enabled = false;
		this.SourceTextBox.Clear();
		this.SourceTextBox.SelectionStart  = 0;
		this.SourceTextBox.SelectionLength = 0;
	}
	if (this.Property != null)
	{
		this.Property.SelectedObject = null;
	}
}

this.IgnoreChanged = flag;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="SetView" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:23:00">
          <Arguments>
            <HAObject Type="Private" Text="cls:HAClassNode" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 13:22:00" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0">bool flag = this.IgnoreChanged;
this.IgnoreChanged = true;
this.SelectedNode = null;
this.TargetNode = null;
this.SetView();
this.Nodes.Clear();

if (cls != null)
{
	this.Enabled = true;
	this.BackColor = System.Drawing.SystemColors.Window;
	this.Header = cls.Header.Clone() as HAFuncNode;
	this.Body   = cls.Body  .Clone() as HAFuncNode;
	this.Footer = cls.Footer.Clone() as HAFuncNode;
	if (this.OwnerClass.IsObject)
	{
		this.BeginUpdate();
		this.Nodes.Add(this.Header);
		this.Nodes.Add(this.Body);
		this.Nodes.Add(this.Footer);
		this.ApplyState();
		this.EndUpdate();
	}
	else if (this.Body.Nodes.Count &gt; 0)
	{
		this.BeginUpdate();
		foreach (TreeNode n in this.Body.Nodes)
		{
			this.Nodes.Add(n.Clone() as HAFuncNode);
		}
		this.Body.Nodes.Clear();
		this.ApplyState();
		this.EndUpdate();
	}
	if (this.SelectedNode == null &amp;&amp; this.Nodes.Count &gt; 0)
	{
		this.SelectedNode = this.Nodes[0];
	}
	if (this.SelectedNode != null)
	{
		this.SelectedNode.EnsureVisible();
		this.TargetNode = this.SelectedNode as HAFuncNode;
		this.SetView();
	}
}
else
{
	this.Enabled = false;
	this.BackColor = System.Drawing.SystemColors.ControlLight;
	this.Header = this.Body = this.Footer = null;
}

this.SetState();
this.IgnoreChanged = flag;
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="OnAfterSelect:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:23:00">
          <Arguments>
            <HAObject Type="Private" Text="e:TreeViewEventArgs" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="233" SelectionLength="0">base.OnAfterSelect(e);
if (this.IgnoreChanged) return;

this.StoreData();
if (this.TargetNode == e.Node) return;

this.TargetNode = (HAFuncNode)e.Node;
this.IgnoreChanged = true;
this.SetView();
this.IgnoreChanged = false;
</Source>
        </HAFunc>
        <HAFunc Type="Folder" Text="XML" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:23:00">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="FromXml:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:23:00">
            <Arguments>
              <HAObject Type="Private" Text="xr:XmlTextReader" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
              <HAObject Type="Private" Text="nc:TreeNodeCollection" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
              <HAObject Type="Private" Text="index:int" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            </Arguments>
            <HAObject Type="Private" Text="dn:DnDTreeNode" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="0" SelectionLength="0">bool first = true;
while (xr.Read())
{
	if (xr.Name == "HAFunc" &amp;&amp; xr.NodeType == XmlNodeType.Element)
	{
		dn = new HAFuncNode();
		nc.Insert(index, dn);
		dn.FromXml(xr);
		index++;
		if (first)
		{
			dn.EnsureVisible();
			SelectedNode = dn;
			first = false;
			this.OnChanged(this, new EventArgs());
		}
	}
}
</Source>
          </HAFunc>
        </HAFunc>
      </HAFunc>
    </Body>
    <Footer>
      <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 13:23:00">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
    </Footer>
  </HAClass>
  <HAClass Type="Public" Text="HAFuncNode:HATreeNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/02 22:56:47">
    <HAObject Type="Public" Text="Args:ArrayList" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38" />
    <HAObject Type="Public" Text="Objects:ArrayList" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38" />
    <HAObject Type="Public" Text="Comment:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38" />
    <HAObject Type="Public" Text="Source:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38" />
    <HAObject Type="Public" Text="Rtf:string" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/03/02 22:54:20">
      <HAObject Type="Public" Text="EnableRtf:bool" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/02 22:54:22" />
    </HAObject>
    <HAObject Type="Public" Text="CommentSelectionStart:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38" />
    <HAObject Type="Public" Text="CommentSelectionLength:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38" />
    <HAObject Type="Public" Text="SourceSelectionStart:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38" />
    <HAObject Type="Public" Text="SourceSelectionLength:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38" />
    <HAObject Type="Public" Text="PropertyPair:HAFuncNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38" />
    <HAObject Type="Public" Text="Property:HAFuncProperty" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38" />
    <Header>
      <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 13:21:38">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0">ここにソースコードの注釈を書きます。
</Comment>
        <Source SelectionStart="103" SelectionLength="0">using System;
using System.Collections;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Text;
using System.Windows.Forms;
using System.Xml;
using Girl.Coding;
using Girl.Windows.Forms;
</Source>
      </HAFunc>
    </Header>
    <Body>
      <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 16:07:31">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="35" SelectionLength="0">public const string ext = "hafnc";
</Source>
        <HAFunc Type="Public" Text="Init:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/02 22:54:50">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="359" SelectionLength="0">base.Init();

this.Args    = new ArrayList();
this.Objects = new ArrayList();
this.Comment = "";
this.Source  = "";
this.Rtf     = "";
this.EnableRtf = false;
this.CommentSelectionStart  = 0;
this.CommentSelectionLength = 0;
this.SourceSelectionStart   = 0;
this.SourceSelectionLength  = 0;
this.PropertyPair = null;
this.Property = new HAFuncProperty(this);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="0" SelectionLength="0" />
        </HAFunc>
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38">
          <Arguments>
            <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="18" SelectionLength="0">this.Text = text;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_XmlName:override string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="18" SelectionLength="0">return "HAFunc";
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_NewNode:override HATreeNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="26" SelectionLength="0">return new HAFuncNode();
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_Color:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="537" SelectionLength="0">switch (this.Type)
{
	case HAType.FolderBlue:
	case HAType.FolderBule_Open:
	case HAType.TextBlue:
		return "blue";
	case HAType.FolderBrown:
	case HAType.FolderBrown_Open:
	case HAType.TextBrown:
		return "brown";
	case HAType.FolderGray:
	case HAType.FolderGray_Open:
	case HAType.TextGray:
		return "gray";
	case HAType.FolderGreen:
	case HAType.FolderGreen_Open:
	case HAType.TextGreen:
		return "green";
	case HAType.FolderRed:
	case HAType.FolderRed_Open:
	case HAType.TextRed:
		return "red";
}
return "";
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Clone:override object" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/02 22:55:09">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="491" SelectionLength="0">HAFuncNode ret = base.Clone() as HAFuncNode;
ret.Args    = this.Args.Clone() as ArrayList;
ret.Objects = this.Objects.Clone() as ArrayList;
ret.Comment = this.Comment;
ret.Source  = this.Source;
ret.Rtf     = this.Rtf;
ret.EnableRtf = this.EnableRtf;
ret.CommentSelectionStart  = this.CommentSelectionStart;
ret.CommentSelectionLength = this.CommentSelectionLength;
ret.SourceSelectionStart   = this.SourceSelectionStart;
ret.SourceSelectionLength  = this.SourceSelectionLength;
return ret;
</Source>
        </HAFunc>
        <HAFunc Type="Folder" Text="Search" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="Search:HAFuncNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38">
            <Arguments>
              <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="184" SelectionLength="0">if (this.Text == text) return this;

HAFuncNode ret = null;
foreach (TreeNode n in this.Nodes)
{
	ret = (n as HAFuncNode).Search(text);
	if (ret != null) break;
}
return ret;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="Search:HAFuncNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38">
            <Arguments>
              <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
              <HAObject Type="Private" Text="type:HAType" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="211" SelectionLength="0">if (this.Text == text &amp;&amp; this.Type == type) return this;

HAFuncNode ret = null;
foreach (TreeNode n in this.Nodes)
{
	ret = (n as HAFuncNode).Search(text, type);
	if (ret != null) break;
}
return ret;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="SearchProperty:HAFuncNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38">
            <Arguments>
              <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="342" SelectionLength="0">if (this.Type == HAType.Comment) return null;
if (this.IsObject &amp;&amp; this.PropertyPair == null)
{
	ObjectParser op = new ObjectParser(this.Text);
	if (op.Name == text) return this;
}

HAFuncNode ret = null;
foreach (TreeNode n in this.Nodes)
{
	ret = (n as HAFuncNode).SearchProperty(text);
	if (ret != null) break;
}
return ret;
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Folder" Text="Property Pair" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="ResetPropertyPair" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="105" SelectionLength="0">this.PropertyPair = null;
foreach (TreeNode n in this.Nodes)
{
	(n as HAFuncNode).ResetPropertyPair();
}
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="SearchPropertyPair" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38">
            <Arguments>
              <HAObject Type="Private" Text="body:HAFuncNode" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 13:06:30" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="336" SelectionLength="0">if (this.Type == HAType.Comment) return;

if (this.IsObject)
{
	ObjectParser op = new ObjectParser(this.Text);
	if (op.IsProperty)
	{
		HAFuncNode n = body.SearchProperty(op.PropertyPair);
		if (n != null) this.PropertyPair = n.PropertyPair = n;
	}
}

foreach (TreeNode n in this.Nodes)
{
	(n as HAFuncNode).SearchPropertyPair(body);
}
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Folder" Text="XML" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="WriteXml:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/02 22:55:26">
            <Arguments>
              <HAObject Type="Private" Text="xw:XmlTextWriter" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 12:48:53" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="933" SelectionLength="0">base.WriteXml(xw);

xw.WriteStartElement("Arguments");
foreach (Object obj in this.Args)
{
	if (obj is HAObjectNode) (obj as HAObjectNode).ToXml(xw);
}
xw.WriteEndElement();

foreach (Object obj in this.Objects)
{
	if (obj is HAObjectNode) (obj as HAObjectNode).ToXml(xw);
}

xw.WriteStartElement("Comment");
xw.WriteAttributeString("SelectionStart" , XmlConvert.ToString(this.CommentSelectionStart));
xw.WriteAttributeString("SelectionLength", XmlConvert.ToString(this.CommentSelectionLength));
xw.WriteString(this.Comment);
xw.WriteEndElement();

xw.WriteStartElement("Source");
xw.WriteAttributeString("SelectionStart" , XmlConvert.ToString(this.SourceSelectionStart));
xw.WriteAttributeString("SelectionLength", XmlConvert.ToString(this.SourceSelectionLength));
xw.WriteString(this.Source);
xw.WriteEndElement();

if (this.EnableRtf)
{
	xw.WriteStartElement("RichTextFormat");
	xw.WriteString(this.Rtf);
	xw.WriteEndElement();
}
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="ReadXmlNode:override" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/02 22:56:47">
            <Arguments>
              <HAObject Type="Private" Text="xr:XmlTextReader" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="1228" SelectionLength="0">if (xr.Name == "Arguments" &amp;&amp; xr.NodeType == XmlNodeType.Element &amp;&amp; !xr.IsEmptyElement)
{
	while (xr.Read())
	{
		if (xr.Name == "Arguments" &amp;&amp; xr.NodeType == XmlNodeType.EndElement)
		{
			break;
		}
		else if (xr.Name == "HAObject" &amp;&amp; xr.NodeType == XmlNodeType.Element)
		{
			HAObjectNode n = new HAObjectNode();
			this.Args.Add(n);
			n.FromXml(xr);
		}
	}
}
else if (xr.NodeType == XmlNodeType.Element)
{
	if (xr.Name == "HAObject")
	{
		HAObjectNode n = new HAObjectNode();
		this.Objects.Add(n);
		n.FromXml(xr);
	}
	else if (xr.Name == "Comment")
	{
		this.CommentSelectionStart  = XmlConvert.ToInt32(xr.GetAttribute("SelectionStart"));
		this.CommentSelectionLength = XmlConvert.ToInt32(xr.GetAttribute("SelectionLength"));
		if (!xr.IsEmptyElement &amp;&amp; xr.Read()) this.Comment = xr.ReadString();
	}
	else if (xr.Name == "Source")
	{
		this.SourceSelectionStart  = XmlConvert.ToInt32(xr.GetAttribute("SelectionStart"));
		this.SourceSelectionLength = XmlConvert.ToInt32(xr.GetAttribute("SelectionLength"));
		if (!xr.IsEmptyElement &amp;&amp; xr.Read()) this.Source = xr.ReadString();
	}
	else if (xr.Name == "RichTextFormat")
	{
		this.EnableRtf = true;
		if (!xr.IsEmptyElement &amp;&amp; xr.Read()) this.Rtf = xr.ReadString();
	}
}
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="ToHds" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38">
            <Arguments>
              <HAObject Type="Private" Text="xw:XmlTextWriter" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="429" SelectionLength="0">xw.WriteStartElement("node");
xw.WriteAttributeString("title", this.Text);
if (this.m_IsExpanded) xw.WriteAttributeString("open", "true");
string c = this.Color;
if (c != "") xw.WriteAttributeString("icon", c);
xw.WriteStartElement("para");
xw.WriteString("\n" + this.Source.Replace("\r\n", "\n"));
xw.WriteEndElement();

foreach (TreeNode n in this.Nodes)
{
	(n as HAFuncNode).ToHds(xw);
}

xw.WriteEndElement();
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="FromHds" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38">
            <Arguments>
              <HAObject Type="Private" Text="xr:XmlTextReader" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="1257" SelectionLength="0">this.Type = HAType.Text;
if (xr.Name != "node" || xr.NodeType != XmlNodeType.Element) return;

this.Text = xr.GetAttribute("title");
this.m_IsExpanded = (xr.GetAttribute("open") == "true");
string icon = xr.GetAttribute("icon");
if (xr.IsEmptyElement) return;

HAFuncNode n;
while (xr.Read())
{
	if (xr.Name == "node" &amp;&amp; xr.NodeType == XmlNodeType.Element)
	{
		n = new HAFuncNode();
		this.Nodes.Add(n);
		n.FromHds(xr);
	}
	else if (xr.Name == "node" &amp;&amp; xr.NodeType == XmlNodeType.EndElement)
	{
		break;
	}
	else if (xr.Name == "para" &amp;&amp; xr.NodeType == XmlNodeType.Element
		&amp;&amp; !xr.IsEmptyElement &amp;&amp; xr.Read())
	{
		string text = xr.ReadString();
		if (text.IndexOf("\r\n") &lt; 0)
		{
			if (text.IndexOf("\n") &gt;= 0)
			{
				text = text.Replace("\n", "\r\n");
			}
			else
			{
				text = text.Replace("\r", "\r\n");
			}
		}
		if (!text.StartsWith("\r\n"))
		{
			this.Source = text;
		}
		else
		{
			this.Source = text.Substring(2, text.Length - 2);
		}
	}
}

if (this.Nodes.Count &gt; 0)
{
	if (this.m_IsExpanded) Expand();
	this.m_Type = (HAType)Enum.Parse(typeof(HAType), "folder" + icon, true);
}
else
{
	this.m_Type = (HAType)Enum.Parse(typeof(HAType), "text" + icon, true);
}
this.SetIcon();
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Folder" Text="Generation" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="GenerateClass" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38">
            <Arguments>
              <HAObject Type="Private" Text="cw:CodeWriter" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 12:48:59" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="394" SelectionLength="0">HAType t = this.Type;
if (t == HAType.Comment)
{
	return;
}
else if (this.IsObject)
{
	this.GenerateFunc(cw);
}
else if (t.ToString().StartsWith("Folder"))
{
	cw.WriteBlankLine();
	cw.WriteCode("#region " + this.Text);
}

foreach (TreeNode n in this.Nodes)
{
	(n as HAFuncNode).GenerateClass(cw);
}

if (t.ToString().StartsWith("Folder"))
{
	cw.WriteBlankLine();
	cw.WriteCode("#endregion");
}
</Source>
            <HAFunc Type="Private" Text="GenerateFunc" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38">
              <Arguments>
                <HAObject Type="Private" Text="cw:CodeWriter" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 12:49:24" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="356" SelectionLength="0">ObjectParser op = new ObjectParser(this.Text, this.Type);
if (op.IsProperty &amp;&amp; this.PropertyPair == this) return;

cw.WriteBlankLine();
if (this.Comment != "") cw.WriteCodes("/// ", this.Comment);

if (op.IsProperty)
{
	cw.WriteStartBlock(op.PropertyDeclaration);
	this.GenerateProperty(cw);
	cw.WriteEndBlock();
}
else
{
	this.GenerateFunction(cw, op);
}
</Source>
            </HAFunc>
            <HAFunc Type="Private" Text="GenerateProperty" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38">
              <Arguments>
                <HAObject Type="Private" Text="cw:CodeWriter" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="231" SelectionLength="0">cw.WriteStartBlock(this.Text.Substring(0, 3));
this.GenerateFuncCode(cw);
cw.WriteEndBlock();
if (this.PropertyPair == null || this.PropertyPair == this) return;

cw.WriteBlankLine();
this.PropertyPair.GenerateProperty(cw);
</Source>
            </HAFunc>
            <HAFunc Type="Private" Text="GenerateFunction" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38">
              <Arguments>
                <HAObject Type="Private" Text="cw:CodeWriter" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 12:49:42" />
                <HAObject Type="Private" Text="op:ObjectParser" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 12:49:42" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="287" SelectionLength="0">string code = op.FunctionDeclaration + "(";
StringBuilder sb = new StringBuilder();
foreach (Object obj in this.Args)
{
	(obj as HAObjectNode).Generate(cw, sb);
}
code += sb.ToString() + ")";
cw.WriteStartBlock(cw.ReplaceKeywords(code));

this.GenerateFuncCode(cw);

cw.WriteEndBlock();
</Source>
            </HAFunc>
            <HAFunc Type="Private" Text="GenerateFuncCode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38">
              <Arguments>
                <HAObject Type="Private" Text="cw:CodeWriter" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 13:05:11" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="191" SelectionLength="0">cw.SetStart();
foreach (Object obj in this.Objects)
{
	(obj as HAObjectNode).Generate(cw);
}
if (this.Source != "")
{
	cw.WriteBlankLine();
	cw.WriteCodes(cw.ReplaceKeywords(this.Source));
}
</Source>
            </HAFunc>
          </HAFunc>
          <HAFunc Type="Public" Text="GenerateFolder" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38">
            <Arguments>
              <HAObject Type="Private" Text="path:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="310" SelectionLength="0">if (this.Type == HAType.Comment)
{
	return;
}
else if (this.IsText)
{
	string target = path;
	if (!target.EndsWith("\\")) target += "\\";
	target += new ObjectParser(this.Text).Name;
	this.GenerateFile(target);
}

foreach (TreeNode n in this.Nodes)
{
	(n as HAFuncNode).GenerateFolder(path);
}
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="GenerateFile" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38">
            <Arguments>
              <HAObject Type="Private" Text="target:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            </Arguments>
            <HAObject Type="Private" Text="fs:FileStream" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            <HAObject Type="Private" Text="sw:StreamWriter" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="167" SelectionLength="0">try
{
	fs = new FileStream(target, FileMode.Create);
}
catch
{
	return;
}

sw = new StreamWriter(fs, Encoding.Default);
sw.Write(this.Source);
sw.Close();
fs.Close();
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="GenerateText" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:21:38">
            <Arguments>
              <HAObject Type="Private" Text="haw:HierArchWriter" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
              <HAObject Type="Private" Text="chapter:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
              <HAObject Type="Private" Text="concat:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="206" SelectionLength="0">haw.WriteNode(this.Type, chapter, this.Text, this.Comment, this.Source);

int i = 1;
foreach (TreeNode n in this.Nodes)
{
	(n as HAFuncNode).GenerateText(haw, chapter + "." + i.ToString(), concat);
	i++;
}
</Source>
          </HAFunc>
        </HAFunc>
      </HAFunc>
    </Body>
    <Footer>
      <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 13:21:38">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
    </Footer>
  </HAClass>
  <HAClass Type="Public" Text="HAMember:HATree" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 12:34:29">
    <HAObject Type="Private" Text="contextMenu1:ContextMenu" IsExpanded="true" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 12:40:47">
      <HAObject Type="Private" Text="mnuType:MenuItem" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 12:40:47" />
    </HAObject>
    <Header>
      <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 12:40:47">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="160" SelectionLength="0">using System;
using System.Collections;
using System.Drawing;
using System.Windows.Forms;
using System.Xml;
using Girl.Coding;
using Girl.Windows.Forms;
</Source>
      </HAFunc>
    </Header>
    <Body>
      <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 12:40:47">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 12:40:47">
          <Arguments />
          <Comment SelectionStart="32" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="35" SelectionLength="0">this.dataFormat = "HierArch Object Data";

this.AllowDrop = true;
this.ContextMenu = this.contextMenu1 = new ContextMenu();
this.HideSelection = false;
this.LabelEdit = true;
this.ImageList = this.imageList1;

this.mnuAccess.Text = "変数(&amp;O)";

this.contextMenu1.MenuItems.AddRange(new MenuItem[]
	{
		mnuType = new MenuItem("種類変更(&amp;T)", new MenuItem[]
			{
				this.mnuAccess,
				this.mnuFolder,
				this.mnuEtc
			}),
		new MenuItem("-"),
		this.mnuChild,
		this.mnuAppend,
		this.mnuInsert,
		new MenuItem("-"),
		this.mnuDelete,
		this.mnuRename
	});
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="StartDrag:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 12:40:47">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="54" SelectionLength="0">this.Focus();
this.StoreState();
base.StartDrag();
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="SetState:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 12:40:47">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="125" SelectionLength="0">HAMemberNode n = this.SelectedNode as HAMemberNode;
mnuType.Enabled = mnuDelete.Enabled = mnuRename.Enabled = (n != null);
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="get_NewNode:override HATreeNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 12:40:47">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="36" SelectionLength="0">return new HAMemberNode("新しいメンバ");
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="SetView" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 12:40:47">
          <Arguments>
            <HAObject Type="Private" Text="list:ArrayList" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="627" SelectionLength="0">this.IgnoreChanged = true;
this.SelectedNode = null;
this.Nodes.Clear();
if (list != null)
{
	this.Enabled = true;
	this.BackColor = System.Drawing.SystemColors.Window;
	if (list.Count &gt; 0)
	{
		this.BeginUpdate();
		foreach (Object obj in list)
		{
			if (obj is HAMemberNode) Nodes.Add((HAMemberNode)((HAMemberNode)obj).Clone());
		}
		this.ApplyState();
		if (this.SelectedNode != null)
		{
			this.SelectedNode.EnsureVisible();
		}
		this.EndUpdate();
	}
}
else
{
	this.Enabled = false;
	this.BackColor = System.Drawing.SystemColors.ControlLight;
}
this.SetState();
this.IgnoreChanged = false;
</Source>
        </HAFunc>
        <HAFunc Type="Folder" Text="XML" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 12:40:47">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="FromXml:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 12:40:47">
            <Arguments>
              <HAObject Type="Private" Text="xr:XmlTextReader" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
              <HAObject Type="Private" Text="nc:TreeNodeCollection" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
              <HAObject Type="Private" Text="index:int" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            </Arguments>
            <HAObject Type="Private" Text="dn:DnDTreeNode" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="337" SelectionLength="0">bool first = true;
while (xr.Read())
{
	if (xr.Name == "HAObject" &amp;&amp; xr.NodeType == XmlNodeType.Element)
	{
		dn = new HAMemberNode();
		nc.Insert(index, dn);
		dn.FromXml(xr);
		index++;
		if (first)
		{
			dn.EnsureVisible();
			SelectedNode = dn;
			first = false;
			this.OnChanged(this, new EventArgs());
		}
	}
}
</Source>
          </HAFunc>
        </HAFunc>
      </HAFunc>
    </Body>
    <Footer>
      <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 12:40:47">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
    </Footer>
  </HAClass>
  <HAClass Type="Public" Text="HAMemberNode:HATreeNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 17:32:27">
    <Header>
      <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 4:18:45">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="153" SelectionLength="0">using System;
using System.Collections;
using System.Drawing;
using System.Windows.Forms;
using System.Xml;
using Girl.Coding;
using Girl.Windows.Forms;
</Source>
      </HAFunc>
    </Header>
    <Body>
      <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 16:09:40">
        <Arguments />
        <Comment SelectionStart="37" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 17:32:24">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="0" SelectionLength="0" />
        </HAFunc>
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 17:32:27">
          <Arguments>
            <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="18" SelectionLength="0">this.Text = text;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_XmlName:override string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="20" SelectionLength="0">return "HAObject";
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_NewNode:override HATreeNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="28" SelectionLength="0">return new HAMemberNode();
</Source>
        </HAFunc>
        <HAFunc Type="Folder" Text="Generation" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="Generate" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
            <Arguments>
              <HAObject Type="Private" Text="cw:CodeWriter" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="299" SelectionLength="0">HAType t = this.Type;
if (t == HAType.Comment)
{
	return;
}
else if (this.IsObject)
{
	cw.WriteCode(t.ToString().ToLower() + " "
		+ cw.ReplaceKeywords(new ObjectParser(this.Text).ObjectDeclaration) + ";");
}

foreach (TreeNode n in this.Nodes)
{
	(n as HAMemberNode).Generate(cw);
}
</Source>
          </HAFunc>
        </HAFunc>
      </HAFunc>
    </Body>
    <Footer>
      <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 4:18:45">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
    </Footer>
  </HAClass>
  <HAClass Type="Public" Text="HAObject:HATree" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 12:32:57">
    <HAObject Type="Private" Text="contextMenu1:ContextMenu" IsExpanded="true" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 12:33:02">
      <HAObject Type="Private" Text="mnuType:MenuItem" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 12:33:02" />
      <HAObject Type="Private" Text="mnuTypeObject:MenuItem" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 12:33:02" />
    </HAObject>
    <Header>
      <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 12:33:02">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="180" SelectionLength="0">using System;
using System.Collections;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Xml;
using Girl.Coding;
using Girl.Windows.Forms;
</Source>
      </HAFunc>
    </Header>
    <Body>
      <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 12:33:02">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 12:33:02">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="42" SelectionLength="0">this.dataFormat = "HierArch Object Data";

this.AllowDrop = true;
this.ContextMenu = this.contextMenu1 = new ContextMenu();
this.HideSelection = false;
this.LabelEdit = true;
this.ImageList = this.imageList1;

this.contextMenu1.MenuItems.AddRange(new MenuItem[]
	{
		mnuType = new MenuItem("種類変更(&amp;T)", new MenuItem[]
			{
				this.mnuTypeObject = new MenuItem("変数(&amp;O)", MenuNodeTypeHandler),
				this.mnuFolder,
				this.mnuEtc
			}),
		new MenuItem("-"),
		this.mnuChild,
		this.mnuAppend,
		this.mnuInsert,
		new MenuItem("-"),
		this.mnuDelete,
		this.mnuRename
	});
menuType.Add(this.mnuTypeObject, HAType.Private);
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="StartDrag:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 12:33:02">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="54" SelectionLength="0">this.Focus();
this.StoreState();
base.StartDrag();
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="SetState:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 12:33:02">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="125" SelectionLength="0">HAObjectNode n = this.SelectedNode as HAObjectNode;
mnuType.Enabled = mnuDelete.Enabled = mnuRename.Enabled = (n != null);
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="get_NewNode:override HATreeNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 12:33:02">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="92" SelectionLength="0">HAObjectNode ret = new HAObjectNode("新しいオブジェクト");
ret.Type = HAType.Private;
return ret;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="SetView" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 12:33:02">
          <Arguments>
            <HAObject Type="Private" Text="list:ArrayList" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="631" SelectionLength="0">this.IgnoreChanged = true;
this.SelectedNode = null;
this.Nodes.Clear();
if (list != null)
{
	this.Enabled = true;
	this.BackColor = System.Drawing.SystemColors.Window;
	if (list.Count &gt; 0)
	{
		this.BeginUpdate();
		foreach (Object obj in list)
		{
			if (obj is HAObjectNode) Nodes.Add((obj as HAObjectNode).Clone() as HAObjectNode);
		}
		this.ApplyState();
		if (this.SelectedNode != null)
		{
			this.SelectedNode.EnsureVisible();
		}
		this.EndUpdate();
	}
}
else
{
	this.Enabled = false;
	this.BackColor = System.Drawing.SystemColors.ControlLight;
}
this.SetState();
this.IgnoreChanged = false;
</Source>
        </HAFunc>
        <HAFunc Type="Folder" Text="XML" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 12:33:02">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="FromXml:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 12:33:02">
            <Arguments>
              <HAObject Type="Private" Text="xr:XmlTextReader" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
              <HAObject Type="Private" Text="nc:TreeNodeCollection" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
              <HAObject Type="Private" Text="index:int" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            </Arguments>
            <HAObject Type="Private" Text="dn:DnDTreeNode" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="337" SelectionLength="0">bool first = true;
while (xr.Read())
{
	if (xr.Name == "HAObject" &amp;&amp; xr.NodeType == XmlNodeType.Element)
	{
		dn = new HAObjectNode();
		nc.Insert(index, dn);
		dn.FromXml(xr);
		index++;
		if (first)
		{
			dn.EnsureVisible();
			SelectedNode = dn;
			first = false;
			this.OnChanged(this, new EventArgs());
		}
	}
}
</Source>
          </HAFunc>
        </HAFunc>
      </HAFunc>
    </Body>
    <Footer>
      <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 12:33:02">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
    </Footer>
  </HAClass>
  <HAClass Type="Public" Text="HAObjectNode:HATreeNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 17:32:34">
    <Header>
      <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 4:18:45">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="180" SelectionLength="0">using System;
using System.Collections;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Xml;
using Girl.Coding;
using Girl.Windows.Forms;
</Source>
      </HAFunc>
    </Header>
    <Body>
      <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 16:09:09">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 17:32:31">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="0" SelectionLength="0" />
        </HAFunc>
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 17:32:34">
          <Arguments>
            <HAObject Type="Private" Text="text:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="18" SelectionLength="0">this.Text = text;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_XmlName:override string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="20" SelectionLength="0">return "HAObject";
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_NewNode:override HATreeNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="28" SelectionLength="0">return new HAObjectNode();
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="SetIcon:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="150" SelectionLength="0">if (this.IsObject)
{
	this.SelectedImageIndex = (int)HAType.PointRed;
	this.ImageIndex         = (int)HAType.Point;
	return;
}
base.SetIcon();
</Source>
        </HAFunc>
        <HAFunc Type="Folder" Text="Generation" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Public" Text="Generate" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
            <Arguments>
              <HAObject Type="Private" Text="cw:CodeWriter" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
              <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="298" SelectionLength="0">HAType t = this.Type;
if (t == HAType.Comment)
{
	return;
}
else if (this.IsObject)
{
	if (sb.Length &gt; 0) sb.Append(", ");
	sb.Append(cw.ReplaceKeywords(new ObjectParser(this.Text).ObjectDeclaration));
}

foreach (TreeNode n in this.Nodes)
{
	(n as HAObjectNode).Generate(cw, sb);
}
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="Generate" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
            <Arguments>
              <HAObject Type="Private" Text="cw:CodeWriter" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="251" SelectionLength="0">HAType t = this.Type;
if (t == HAType.Comment)
{
	return;
}
else if (this.IsObject)
{
	cw.WriteCode(cw.ReplaceKeywords(new ObjectParser(this.Text).ObjectDeclaration) + ";");
}

foreach (TreeNode n in this.Nodes)
{
	(n as HAObjectNode).Generate(cw);
}
</Source>
          </HAFunc>
        </HAFunc>
      </HAFunc>
    </Body>
    <Footer>
      <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 4:18:45">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
    </Footer>
  </HAClass>
  <HAClass Type="Public" Text="HANodeProperty" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 12:43:56">
    <HAObject Type="Protected" Text="node:HATreeNode" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 13:14:40" />
    <Header>
      <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 13:14:40">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="135" SelectionLength="0">using System;
using System.ComponentModel;
using System.Drawing.Design;
using System.Windows.Forms;
using System.Windows.Forms.Design;
</Source>
      </HAFunc>
    </Header>
    <Body>
      <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 13:14:40">
        <Arguments />
        <Comment SelectionStart="37" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:40">
          <Arguments>
            <HAObject Type="Private" Text="node:HATreeNode" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 12:43:04" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="18" SelectionLength="0">this.node = node;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_Server:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:40">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="18" SelectionLength="0">return this.node.Server;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="set_Server:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:40">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="26" SelectionLength="0">this.node.Server = value;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_Id:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:40">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="91" SelectionLength="0">HAAccount haa = Form1.AccountManager.Get(this.Server);
return (haa != null) ? haa.Id : "";
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="set_Id:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:40">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="55" SelectionLength="0">Form1.AccountManager.Set(this.Server, value, this.Id);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_Password:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 13:14:40">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="97" SelectionLength="0">HAAccount haa = Form1.AccountManager.Get(this.Server);
return (haa != null) ? haa.Password : "";
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="set_Password:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:40">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="55" SelectionLength="0">Form1.AccountManager.Set(this.Server, this.Id, value);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_LastModified:DateTime" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:40">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="31" SelectionLength="0">return this.node.LastModified;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="set_LastModified:DateTime" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:40">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="32" SelectionLength="0">this.node.LastModified = value;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="get_TargetFileName:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 13:14:40">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="33" SelectionLength="0">return this.node.TargetFileName;
</Source>
        </HAFunc>
      </HAFunc>
    </Body>
    <Footer>
      <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 13:14:40">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
    </Footer>
    <HAClass Type="Public" Text="HAClassProperty:HANodeProperty" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 12:52:25">
      <Header>
        <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 13:01:18">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="135" SelectionLength="0">using System;
using System.ComponentModel;
using System.Drawing.Design;
using System.Windows.Forms;
using System.Windows.Forms.Design;
</Source>
        </HAFunc>
      </Header>
      <Body>
        <HAFunc Type="Class" Text="本体" IsExpanded="false" IsSelected="true" AllowDrag="false" LastModified="2003/02/16 13:01:18">
          <Arguments />
          <Comment SelectionStart="37" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="14" SelectionLength="0">public __CLASS(HAClassNode node) : base(node)
{
}

public class HAClassFileNameEditor : FileNameEditor
{
	protected override void InitializeDialog(OpenFileDialog openFileDialog)
	{
		base.InitializeDialog(openFileDialog);
		openFileDialog.Filter = "HierArch クラス (*.hacls)|*.hacls|すべてのファイル (*.*)|*.*";
		openFileDialog.CheckFileExists = false;
	}
}

[Editor(typeof(HAClassFileNameEditor), typeof(UITypeEditor))]
public string Link
{
	get
	{
		return this.node.Link;
	}
	
	set
	{
		this.node.Link = value;
	}
}
</Source>
        </HAFunc>
      </Body>
      <Footer>
        <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 13:01:18">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
        </HAFunc>
      </Footer>
    </HAClass>
    <HAClass Type="Public" Text="HAFuncProperty:HANodeProperty" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/02 22:57:37">
      <Header>
        <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 13:01:19">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="135" SelectionLength="0">using System;
using System.ComponentModel;
using System.Drawing.Design;
using System.Windows.Forms;
using System.Windows.Forms.Design;
</Source>
        </HAFunc>
      </Header>
      <Body>
        <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 13:01:19">
          <Arguments />
          <Comment SelectionStart="37" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="505" SelectionLength="0">public __CLASS(HAFuncNode node) : base(node)
{
}

public class HAFuncFileNameEditor : FileNameEditor
{
	protected override void InitializeDialog(OpenFileDialog openFileDialog)
	{
		base.InitializeDialog(openFileDialog);
		openFileDialog.Filter = "HierArch 関数 (*.hafnc)|*.hafnc|すべてのファイル (*.*)|*.*";
		openFileDialog.CheckFileExists = false;
	}
}

[Editor(typeof(HAFuncFileNameEditor), typeof(UITypeEditor))]
public string Link
{
	get
	{
		return this.node.Link;
	}
	
	set
	{
		this.node.Link = value;
	}
}
</Source>
          <HAFunc Type="Public" Text="get_EnableRtf:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/02 22:57:24">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="44" SelectionLength="0">return (this.node as HAFuncNode).EnableRtf;
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="set_EnableRtf:bool" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/02 22:57:37">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="45" SelectionLength="0">(this.node as HAFuncNode).EnableRtf = value;
</Source>
          </HAFunc>
        </HAFunc>
      </Body>
      <Footer>
        <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 13:01:19">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
        </HAFunc>
      </Footer>
    </HAClass>
  </HAClass>
</HAClass>