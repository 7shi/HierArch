<?xml version="1.0" encoding="utf-8"?>
<HAClass Type="Folder" Text="Base" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 21:45:34">
  <Header>
    <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="true" AllowDrag="false" LastModified="2003/02/16 21:45:06">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0">ここにソースコードの注釈を書きます。
</Comment>
      <Source SelectionStart="0" SelectionLength="0">using System;
</Source>
    </HAFunc>
  </Header>
  <Body>
    <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 21:45:06">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
      <Source SelectionStart="0" SelectionLength="0" />
      <HAFunc Type="Comment" Text="LocalHeader" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 21:45:34">
        <Arguments />
        <Comment SelectionStart="72" SelectionLength="0">フォルダの関数欄に作成した "LocalHeader" 名の注釈は特別です。
ソース欄がフォルダ内すべてのクラスにコメントとして挿入されます。
</Comment>
        <Source SelectionStart="75" SelectionLength="0">このファイルは ..\..\HierArch.haprj から自動生成されています。
編集は必ずそちらを通すようにして、直接書き換えないでください。
</Source>
      </HAFunc>
    </HAFunc>
  </Body>
  <Footer>
    <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 21:45:06">
      <Arguments />
      <Comment SelectionStart="0" SelectionLength="0" />
      <Source SelectionStart="0" SelectionLength="0" />
    </HAFunc>
  </Footer>
  <HAClass Type="Public" Text="HAMacroForm:Form1" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/21 23:31:22">
    <HAObject Type="Private" Text="macros:Hashtable" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/15 17:35:08" />
    <Header>
      <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/03/16 2:28:06">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0">ここにソースコードの注釈を書きます。
</Comment>
        <Source SelectionStart="161" SelectionLength="0">using System;
using System.Collections;
using System.Collections.Specialized;
using System.IO;
using System.Text;
using System.Windows.Forms;
using Girl.Coding;
</Source>
      </HAFunc>
    </Header>
    <Body>
      <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false" LastModified="2003/03/02 16:07:50">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/15 17:35:44">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="129" SelectionLength="0">this.mnuBuildGenerate.Enabled = false;
this. tbBuildGenerate.Enabled = false;
this.Open(HADoc.MacroProject);
this.macros = null;
</Source>
        </HAFunc>
        <HAFunc Type="Protected" Text="Dispose:override" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/02 16:15:13">
          <Arguments>
            <HAObject Type="Private" Text="disposing:bool" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/02 16:14:41" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="49" SelectionLength="0">Form1.MacroForm = null;
base.Dispose(disposing);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="SetMacros" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/03/15 20:33:21">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="119" SelectionLength="0">this.macros = new Hashtable();
foreach (TreeNode n in this.view1.tvClass.Nodes)
{
	this.ReadClass(n as HAClassNode);
}
</Source>
          <HAFunc Type="Private" Text="ReadClass" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/15 20:38:12">
            <Arguments>
              <HAObject Type="Private" Text="node:HAClassNode" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/15 20:33:25" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="152" SelectionLength="0">foreach (TreeNode n in node.Body.Nodes)
{
	this.ReadFunc(n as HAFuncNode);
}

foreach (TreeNode n in node.Nodes)
{
	this.ReadClass(n as HAClassNode);
}
</Source>
          </HAFunc>
          <HAFunc Type="Private" Text="ReadFunc" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/15 20:39:59">
            <Arguments>
              <HAObject Type="Private" Text="node:HAFuncNode" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/15 20:35:41" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="141" SelectionLength="0">if (node.Type == HAType.Public)
{
	this.macros[node.Text] = node;
}

foreach (TreeNode n in node.Nodes)
{
	this.ReadFunc(n as HAFuncNode);
}
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="GetMacro:HAFuncNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/15 18:19:09">
          <Arguments>
            <HAObject Type="Private" Text="name:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/15 17:36:47" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="95" SelectionLength="0">if (macros == null || !macros.Contains(name)) return null;

return macros[name] as HAFuncNode;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="WriteCode" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/03/21 22:56:11">
          <Arguments>
            <HAObject Type="Private" Text="cw:CodeWriter" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/15 22:59:36" />
            <HAObject Type="Private" Text="source:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/15 21:07:34" />
            <HAObject Type="Private" Text="block:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/21 22:51:40" />
            <HAObject Type="Private" Text="replace:Hashtable" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/16 4:05:39" />
            <HAObject Type="Private" Text="history:ArrayList" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/16 5:17:33" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="1921" SelectionLength="0">StringBuilder sb = new StringBuilder();
CSharpParser csp = new CSharpParser();
StringReader sr = new StringReader(source);
csp.Reader = sr;
int indent = cw.Indent;
int prth = 0;
bool no_space = false, is_key_word = false;
string text;
Hashtable objlst = this.MakeObjectList(history);
while (csp.Read())
{
	text = csp.Text;
	if (replace != null &amp;&amp; replace.Contains(text))
	{
		text = replace[text] as string;
	}
	else if (objlst != null &amp;&amp; objlst.Contains(text))
	{
		text = objlst[text] as string;
	}
	if (prth &lt; 1 &amp;&amp; (text == ";" || text == ":"))
	{
		sb.Append(text);
		this.WriteCode(cw, sb);
	}
	else if (prth &lt; 1 &amp;&amp; text == "{")
	{
		if (sb.Length &gt; 0)
		{
			cw.WriteStartBlock(sb.ToString());
			sb.Length = 0;
		}
		else
		{
			cw.WriteStartBlock();
		}
	}
	else if (prth &lt; 1 &amp;&amp; text == "}")
	{
		this.WriteCode(cw, sb);
		cw.WriteEndBlock();
	}
	else if (text.StartsWith("//"))
	{
		if (sb.Length &lt; 1)
		{
			cw.WriteCode(text);
		}
		else
		{
			sb.Append("  ");
			sb.Append(text);
			this.WriteCode(cw, sb);
		}
	}
	else
	{
		switch (text)
		{
			case "@":
				if (!this.WriteMacro(cw, csp, history))
				{
					cw.WriteCode("// Macro: Error");
				}
				break;
			case ".":
				sb.Append(text);
				no_space = true;
				break;
			case "(":
			case "[":
				if (is_key_word) sb.Append(' ');
				is_key_word = false;
				sb.Append(text);
				no_space = true;
				prth++;
				break;
			case ")":
			case "]":
				sb.Append(text);
				no_space = false;
				prth--;
				break;
			case "{":
				sb.Append(" {");
				no_space = false;
				prth++;
				break;
			case "}":
				sb.Append(" }");
				no_space = false;
				prth--;
				break;
			case ",":
			case ";":
				sb.Append(text);
				break;
			case "__YIELD":
				cw.WriteStartBlock("for (;;)  // __YIELD");
				if (block != null)
				{
					this.WriteCode(cw, block, null, replace, history);
				}
				cw.WriteCode("break;");
				cw.WriteEndBlock();
				break;
			default:
				if (sb.Length &gt; 0 &amp;&amp; !no_space) sb.Append(' ');
				sb.Append(text);
				no_space = false;
				is_key_word = csp.IsKeyWord;
				break;
		}
	}
}
sr.Close();
this.WriteCode(cw, sb);
while (cw.Indent &gt; indent) cw.WriteEndBlock();
</Source>
          <HAFunc Type="Private" Text="WriteCode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/15 23:13:07">
            <Arguments>
              <HAObject Type="Private" Text="cw:CodeWriter" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/15 23:12:47" />
              <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/15 23:12:42" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="72" SelectionLength="0">if (sb.Length &lt; 1) return;

cw.WriteCode(sb.ToString());
sb.Length = 0;
</Source>
          </HAFunc>
          <HAFunc Type="Private" Text="WriteMacro:bool" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/03/21 23:30:20">
            <Arguments>
              <HAObject Type="Private" Text="cw:CodeWriter" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/15 21:33:14" />
              <HAObject Type="Private" Text="csp:CSharpParser" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/15 21:33:17" />
              <HAObject Type="Private" Text="history:ArrayList" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/16 5:22:14" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="459" SelectionLength="0">if (!csp.Read() || csp.Text != "[") return false;

StringCollection args = new StringCollection();
StringBuilder name = new StringBuilder();
StringBuilder decl = new StringBuilder();
StringBuilder blck = null;
while (csp.Read())
{
	if (csp.Text == "]")
	{
		cw.WriteCode(string.Format("// Macro: {0}", decl.ToString()));
		string block = (blck == null) ? null : blck.ToString();
		this.WriteMacro(cw, name.ToString(), args, block, history);
		return true;
	}
	if (csp.Text == "{")
	{
		if (blck == null) blck = new StringBuilder();
		this.ReadBlock(blck, csp);
		continue;
	}
	decl.Append(csp.Text);
	if (csp.Text == "(")
	{
		for (;;)
		{
			string arg = this.ReadArg(csp);
			if (arg == null) break;
			
			args.Add(arg);
			decl.Append(arg);
			decl.Append(csp.Text);
			if (csp.Text == ")") break;
		}
	}
	else
	{
		name.Append(csp.Text);
	}
}

return false;
</Source>
            <HAFunc Type="Private" Text="ReadArg:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/21 23:14:23">
              <Arguments>
                <HAObject Type="Private" Text="csp:CSharpParser" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/16 2:09:28" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="402" SelectionLength="0">StringBuilder sb = null;
int prth = 0;
while (csp.Read())
{
	if (prth &lt; 1 &amp;&amp; csp.Text == ",") break;
	
	switch (csp.Text)
	{
		case "(":
		case "[":
		case "{":
			prth++;
			break;
		case ")":
		case "]":
		case "}":
			prth--;
			break;
	}
	if (prth &lt; 0) break;
	
	if (sb == null) sb = new StringBuilder();
	sb.Append(csp.Spacing);
	sb.Append(csp.Text);
}
return (sb != null) ? sb.ToString() : null;
</Source>
            </HAFunc>
            <HAFunc Type="Private" Text="WriteMacro" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/21 23:31:22">
              <Arguments>
                <HAObject Type="Private" Text="cw:CodeWriter" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/16 2:43:03" />
                <HAObject Type="Private" Text="name:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/16 2:43:08" />
                <HAObject Type="Private" Text="args:StringCollection" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/16 2:43:11" />
                <HAObject Type="Private" Text="block:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/21 22:51:24" />
                <HAObject Type="Private" Text="history:ArrayList" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/16 5:22:35" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="974" SelectionLength="0">if (!this.macros.Contains(name)) return;

HAFuncNode n = this.macros[name] as HAFuncNode;
if (history == null)
{
	history = new ArrayList();
}
else if (history.Contains(n))
{
	cw.WriteCode("// Macro: 循環を検出しました。");
	return;
}
history.Add(n);

Hashtable replace = new Hashtable();
int c1 = args.Count;
int c2 = n.Args.Count;

cw.WriteStartBlock();
for (int i = 0; i &lt; c1 &amp;&amp; i &lt; c2; i++)
{
	ObjectParser op = new ObjectParser((n.Args[i] as HAObjectNode).Text);
	if (i == c2 - 1 &amp;&amp; c1 &gt; c2)
	{
		StringBuilder sb = new StringBuilder();
		for (int j = i; j &lt; c1; j++)
		{
			if (sb.Length &gt; 0) sb.Append(", ");
			sb.Append(args[j]);
		}
		replace.Add(op.Name, sb.ToString());
	}
	else
	{
		replace.Add(op.Name, args[i]);
	}
}
int level = history.Count - 1;
int num = 0;
foreach (object obj in n.Objects)
{
	string type = new ObjectParser((obj as HAObjectNode).Text).Type;
	if (type != null &amp;&amp; type.Length &gt; 0)
	{
		cw.WriteCode(string.Format("{0} __{1}_{2};", type, level, num));
	}
	num++;
}
this.WriteCode(cw, n.Source, block, replace, history);
cw.WriteEndBlock();
</Source>
            </HAFunc>
            <HAFunc Type="Private" Text="ReadBlock" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/21 22:52:22">
              <Arguments>
                <HAObject Type="Private" Text="sb:StringBuilder" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/21 22:48:54" />
                <HAObject Type="Private" Text="csp:CSharpParser" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/21 22:48:59" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="193" SelectionLength="0">int level = 0;
while (csp.Read())
{
	if (csp.Text == "}")
	{
		if (level &lt; 1) return;
		level--;
	}
	else if (csp.Text == "{")
	{
		level++;
	}
	sb.Append(csp.Spacing);
	sb.Append(csp.Text);
}
</Source>
            </HAFunc>
          </HAFunc>
          <HAFunc Type="Private" Text="MakeObjectList:Hashtable" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/03/21 22:23:52">
            <Arguments>
              <HAObject Type="Private" Text="history:ArrayList" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/21 22:16:23" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="302" SelectionLength="0">if (history == null) return null;

Hashtable ret = new Hashtable();
int len = history.Count;
for (int i = len - 1; i &gt;= 0; i--)
{
	int num = 0;
	HAFuncNode n = history[i] as HAFuncNode;
	foreach (object obj in n.Objects)
	{
		this.MakeObjectList(ret, obj as HAObjectNode, i, ref num);
	}
}
return ret;
</Source>
            <HAFunc Type="Private" Text="MakeObjectList" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/21 22:35:23">
              <Arguments>
                <HAObject Type="Private" Text="list:Hashtable" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/03/21 22:20:54" />
                <HAObject Type="Private" Text="node:HAObjectNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/21 22:20:19" />
                <HAObject Type="Private" Text="level:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/21 22:19:36" />
                <HAObject Type="Private" Text="num:ref int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/21 22:20:10" />
              </Arguments>
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="243" SelectionLength="0">string name = new ObjectParser(node.Text).Name;
if (!list.Contains(name))
{
	list[name] = string.Format("__{0}_{1}", level, num);
	num++;
}

foreach (TreeNode n in node.Nodes)
{
	this.MakeObjectList(list, n as HAObjectNode, level, ref num);
}
</Source>
            </HAFunc>
          </HAFunc>
        </HAFunc>
      </HAFunc>
    </Body>
    <Footer>
      <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/03/02 16:07:36">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
    </Footer>
  </HAClass>
  <HAClass Type="Public" Text="HADoc:Document" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/16 5:53:41">
    <HAObject Type="Public" Text="ClassTreeView:HAClass" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
    <HAObject Type="Public" Text="ViewInfo:HAViewInfo" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
    <Header>
      <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 4:18:45">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="229" SelectionLength="0">using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Drawing;
using System.IO;
using System.Text;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Serialization;
using Girl.Windows.Forms;
</Source>
      </HAFunc>
    </Header>
    <Body>
      <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false" LastModified="2003/03/02 15:19:44">
        <Arguments />
        <Comment SelectionStart="37" SelectionLength="0">&lt;summary&gt;
ここにクラスの説明を書きます。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="true" IsSelected="true" AllowDrag="true" LastModified="2003/03/16 5:48:34">
          <Arguments />
          <Comment SelectionStart="32" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="103" SelectionLength="0">this.ClassTreeView = null;
this.ViewInfo = new HAViewInfo();

this.InitMacro();
this.InitUserPlugin();
</Source>
          <HAFunc Type="Private" Text="InitMacro" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/16 5:53:41">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="0" SelectionLength="0">string macro = __CLASS.UserDir + @"\Macro.hamcr";
if (File.Exists(macro)) return;

string dir = ApplicationDataManager.SearchFolder("Data");
if (dir == null) return;

string macro_orig = dir + @"\Macro.hamcr";
if (!File.Exists(macro_orig)) return;

File.Copy(macro_orig, macro);
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="get_ShortName:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="105" SelectionLength="0">string ret = this.Name;
int p = ret.LastIndexOf('.');
if (p &lt; 0) return ret;
return ret.Substring(0, p);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Open:override bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/02 15:19:01">
          <Arguments />
          <HAObject Type="Private" Text="xr:XmlTextReader" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
          <HAObject Type="Private" Text="n:HAClassNode" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="12" SelectionLength="0">try
{
	if (!File.Exists(this.FullName)) throw new Exception();
	xr = new XmlTextReader(this.FullName);
}
catch
{
	return false;
}
while (xr.Read())
{
	if (xr.Name == "HAViewInfo" &amp;&amp; xr.NodeType == XmlNodeType.Element)
	{
		this.ViewInfo = new XmlSerializer(
			typeof(HAViewInfo)).Deserialize(xr) as HAViewInfo;
	}
	else if (xr.Name == "HAClass" &amp;&amp; xr.NodeType == XmlNodeType.Element)
	{
		n = new HAClassNode();
		this.ClassTreeView.Nodes.Add(n);
		n.FromXml(xr);
	}
	else if (xr.Name == "HAProject" &amp;&amp; xr.NodeType == XmlNodeType.EndElement)
	{
		break;
	}
	else if (xr.Name == "hds" &amp;&amp; xr.NodeType == XmlNodeType.Element)
	{
		n = new HAClassNode();
		n.Text = this.ShortName;
		this.ClassTreeView.InitNode(n);
		n.Body.Nodes.Clear();
		this.ClassTreeView.Nodes.Add(n);
		n.FromHds(xr);
		this.ViewInfo.InitHds();
	}
	else if (xr.Name == "hds" &amp;&amp; xr.NodeType == XmlNodeType.EndElement)
	{
		break;
	}
}
xr.Close();

this.ClassTreeView.ApplyState();
if (this.ClassTreeView.SelectedNode == null &amp;&amp; this.ClassTreeView.Nodes.Count &gt; 0)
{
	this.ClassTreeView.SelectedNode = this.ClassTreeView.Nodes[0];
}
Changed = false;
return true;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Save:override bool" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/03/02 15:37:51">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="357" SelectionLength="0">this.ClassTreeView.StoreData();
bool ret = false;
string lfn = this.FullName.ToLower();
if (lfn.EndsWith(".haprj") || lfn.EndsWith(".hamcr"))
{
	ret = SaveHAPrj();
}
else if (lfn.EndsWith(".hds"))
{
	ret = SaveHds();
}
else
{
	MessageBox.Show("保存できないファイルの種類です。", "エラー", MessageBoxButtons.OK, MessageBoxIcon.Warning);
}
if (ret) Changed = false;
return ret;
</Source>
          <HAFunc Type="Private" Text="SaveHAPrj:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
            <Arguments />
            <HAObject Type="Private" Text="xw:XmlTextWriter" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="0" SelectionLength="0">try
{
	xw = new XmlTextWriter(this.FullName, Encoding.UTF8);
}
catch
{
	return false;
}
xw.Formatting = Formatting.Indented;
xw.WriteStartDocument();
xw.WriteStartElement("HAProject");
xw.WriteAttributeString("version" , Application.ProductVersion);

XmlSerializer xs = new XmlSerializer(typeof(HAViewInfo));
xs.Serialize(xw, this.ViewInfo);

foreach (TreeNode n in this.ClassTreeView.Nodes)
{
	(n as HAClassNode).ToXml(xw);
}

xw.WriteEndElement();
xw.WriteEndDocument();
xw.Flush();
xw.Close();

return true;
</Source>
          </HAFunc>
          <HAFunc Type="Private" Text="SaveHds:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
            <Arguments />
            <HAObject Type="Private" Text="sw:StreamWriter" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="835" SelectionLength="0">HAClassNode n = this.ClassTreeView.SelectedNode as HAClassNode;
if (n == null)
{
	MessageBox.Show("クラスが選択されていません。", "エラー", MessageBoxButtons.OK, MessageBoxIcon.Warning);
	return false;
}

string msg = "HDS 形式では現在開かれているクラスだけが保存されます。\r\n"
	+ "注釈, メンバ, 引数, 変数は保存されません。";

if (MessageBox.Show(msg, "確認", MessageBoxButtons.OKCancel,
	MessageBoxIcon.Information) == DialogResult.Cancel)
{
	return false;
}

try
{
	sw = new StreamWriter(this.FullName, false, Encoding.UTF8);
}
catch
{
	return false;
}
sw.NewLine = "\n";
XmlTextWriter xw = new XmlTextWriter(sw);
xw.Formatting = Formatting.Indented;
xw.WriteStartDocument();
xw.WriteStartElement("hds");
xw.WriteAttributeString("version" , "0.3.5");
foreach (TreeNode nn in n.Body.Nodes)
{
	(nn as HAFuncNode).ToHds(xw);
}
xw.WriteEndElement();
xw.WriteEndDocument();
xw.Flush();
xw.Close();
return true;
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="get_BuildDateTime:static string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="25" SelectionLength="0">return "__DATETIME_NOW";
</Source>
        </HAFunc>
        <HAFunc Type="Folder" Text="Plugin" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="0" SelectionLength="0" />
          <HAFunc Type="Private" Text="InitUserPlugin" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/16 5:48:21">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="653" SelectionLength="0">string dir1 = __CLASS.SysPluginDir;
if (dir1 == null) return;

string dir2 = __CLASS.UserPluginDir;

DirectoryInfo di = new DirectoryInfo(dir1);
foreach (FileInfo fi in di.GetFiles("*.cs"))
{
	string source = dir2 + @"\" + fi.Name;
	if (!File.Exists(source)) File.Copy(fi.FullName, source, true);
}
foreach (FileInfo fi in di.GetFiles("*.miopt"))
{
	string source = dir2 + @"\" + fi.Name;
	if (!File.Exists(source)) File.Copy(fi.FullName, source, true);
}

string dll = dir2 + @"\HierArchLib.dll";
if (File.Exists(dll)) return;

DirectoryInfo di2 = new FileInfo(Application.ExecutablePath).Directory;
File.Copy(di2.FullName + @"\HierArchLib.dll", dll);
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="get_UserDir:static string" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="165" SelectionLength="0">string ret = Environment.GetFolderPath(
	Environment.SpecialFolder.Personal) + @"\HierArch";
if (!Directory.Exists(ret)) Directory.CreateDirectory(ret);
return ret;
</Source>
            <HAFunc Type="Public" Text="get_UserPluginDir:static string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
              <Arguments />
              <Comment SelectionStart="0" SelectionLength="0" />
              <Source SelectionStart="115" SelectionLength="0">string ret = __CLASS.UserDir + @"\Plugin";
if (!Directory.Exists(ret)) Directory.CreateDirectory(ret);
return ret;
</Source>
            </HAFunc>
          </HAFunc>
          <HAFunc Type="Public" Text="get_SysPluginDir:static string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="7" SelectionLength="47">return ApplicationDataManager.SearchFolder("Plugin");
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="Make" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
            <Arguments />
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="391" SelectionLength="0">this.InitUserPlugin();

DirectoryInfo di = new DirectoryInfo(__CLASS.UserPluginDir);
foreach (FileInfo fi in di.GetFiles("*.cs"))
{
	string source = fi.FullName;
	string dll = source.Substring(0, source.Length - 2) + "dll";
	if (File.Exists(dll))
	{
		DateTime dt1 = fi.LastWriteTime;
		DateTime dt2 = File.GetLastWriteTime(dll);
		if (dt1 &lt;= dt2) continue;
	}
	this.Compile(source, dll);
}
</Source>
          </HAFunc>
          <HAFunc Type="Public" Text="Compile:CompilerResults" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
            <Arguments>
              <HAObject Type="Private" Text="source:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
              <HAObject Type="Private" Text="dll:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            </Arguments>
            <Comment SelectionStart="0" SelectionLength="0" />
            <Source SelectionStart="342" SelectionLength="0">Microsoft.CSharp.CSharpCodeProvider codeProvider =
	new Microsoft.CSharp.CSharpCodeProvider();
ICodeCompiler icc = codeProvider.CreateCompiler();
CompilerParameters parameters = new CompilerParameters();
parameters.GenerateExecutable = true;
parameters.ReferencedAssemblies.AddRange(new string[]
	{
		"System.dll", __CLASS.UserPluginDir + @"\HierArchLib.dll"
	});
parameters.OutputAssembly = dll;
parameters.CompilerOptions = "/target:library";

return icc.CompileAssemblyFromFile(parameters, source);
</Source>
          </HAFunc>
        </HAFunc>
        <HAFunc Type="Public" Text="get_MacroProject:static string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/03/02 15:36:22">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="42" SelectionLength="0">return __CLASS.UserDir + @"\Macro.hamcr";
</Source>
        </HAFunc>
      </HAFunc>
    </Body>
    <Footer>
      <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 4:18:45">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
    </Footer>
  </HAClass>
  <HAClass Type="Public" Text="HAViewInfo" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 21:45:16">
    <HAObject Type="Public" Text="X:int" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
    <HAObject Type="Public" Text="Y:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
    <HAObject Type="Public" Text="Width:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
    <HAObject Type="Public" Text="Height:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
    <HAObject Type="Public" Text="State:FormWindowState" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
    <HAObject Type="Folder" Text="Show" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
      <HAObject Type="Public" Text="ShowClass:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
      <HAObject Type="Public" Text="ShowFunc:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
      <HAObject Type="Public" Text="ShowComment:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
      <HAObject Type="Public" Text="ShowMember:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
      <HAObject Type="Public" Text="ShowArg:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
      <HAObject Type="Public" Text="ShowObject:bool" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
    </HAObject>
    <HAObject Type="Folder" Text="Size" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
      <HAObject Type="Public" Text="LeftPanelWidth:int" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
        <HAObject Type="Public" Text="ClassHeight:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
      </HAObject>
      <HAObject Type="Public" Text="CommentHeight:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
      <HAObject Type="Public" Text="RightPanelWidth:int" IsExpanded="true" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
        <HAObject Type="Public" Text="MemberHeight:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
        <HAObject Type="Public" Text="ObjectHeight:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
      </HAObject>
    </HAObject>
    <Header>
      <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="true" AllowDrag="false" LastModified="2003/02/16 4:18:45">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="64" SelectionLength="0">using System;
using System.Drawing;
using System.Windows.Forms;
</Source>
      </HAFunc>
    </Header>
    <Body>
      <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 4:18:45">
        <Arguments />
        <Comment SelectionStart="37" SelectionLength="0">&lt;summary&gt;
ウィンドウの状態を保持します。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="13" SelectionLength="0">this.Init();
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Init" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="329" SelectionLength="0">this.X = this.Y = this.Width = this.Height = 0;
this.State = FormWindowState.Normal;

this.ShowClass = this.ShowFunc = this.ShowComment
	= this.ShowMember = this.ShowArg = this.ShowObject
	= true;

this.LeftPanelWidth = this.ClassHeight
	= this.CommentHeight = this.RightPanelWidth
	= this.MemberHeight = this.ObjectHeight
	= 0;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="InitHds" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
          <Arguments />
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="110" SelectionLength="0">this.Init();

this.ShowClass = this.ShowComment
	= this.ShowMember = this.ShowArg = this.ShowObject
	= false;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Apply" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
          <Arguments>
            <HAObject Type="Private" Text="form1:Form1" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="357" SelectionLength="0">if (this.Width &gt; 0 &amp;&amp; this.Height &gt; 0)
{
	Rectangle r1 = new Rectangle(
		this.X, this.Y, this.Width, this.Height);
	Rectangle r2 = Screen.GetWorkingArea(r1);
	if (r1.IntersectsWith(r2))
	{
		form1.SetDesktopBounds(
			r1.X, r1.Y, r1.Width, r1.Height);
	}
	else
	{
		form1.Size = new Size(
			this.Width, this.Height);
	}
	form1.WindowState = this.State;
}

form1.SetClassVisible  (this.ShowClass  );
form1.SetFuncVisible   (this.ShowFunc   );
form1.SetCommentVisible(this.ShowComment);
form1.SetMemberVisible (this.ShowMember );
form1.SetArgVisible    (this.ShowArg    );
form1.SetObjectVisible (this.ShowObject );

if (this.LeftPanelWidth  &gt; 0) form1.view1.panel1    .Width  = this.LeftPanelWidth;
if (this.ClassHeight     &gt; 0) form1.view1.tabClass  .Height = this.ClassHeight;
if (this.CommentHeight   &gt; 0) form1.view1.txtComment.Height = this.CommentHeight;
if (this.RightPanelWidth &gt; 0) form1.view1.panel3    .Width  = this.RightPanelWidth;
if (this.MemberHeight    &gt; 0) form1.view1.tabMember .Height = this.MemberHeight;
if (this.ObjectHeight    &gt; 0) form1.view1.tabObject .Height = this.ObjectHeight;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Store" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
          <Arguments>
            <HAObject Type="Private" Text="form1:Form1" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="172" SelectionLength="0">Rectangle rect = form1.sizeMonitor.Rect;
this.X      = rect.X;
this.Y      = rect.Y;
this.Width  = rect.Width;
this.Height = rect.Height;

this.State = form1.WindowState;

this.ShowClass   = form1.view1.tabClass  .Visible;
this.ShowFunc    = form1.view1.tabFunc   .Visible;
this.ShowComment = form1.view1.txtComment.Visible;
this.ShowMember  = form1.view1.tabMember .Visible;
this.ShowArg     = form1.view1.tabArg    .Visible;
this.ShowObject  = form1.view1.tabObject .Visible;

this.LeftPanelWidth  = form1.view1.panel1    .Width ;
this.ClassHeight     = form1.view1.tabClass  .Height;
this.CommentHeight   = form1.view1.txtComment.Height;
this.RightPanelWidth = form1.view1.panel3    .Width ;
this.MemberHeight    = form1.view1.tabMember .Height;
this.ObjectHeight    = form1.view1.tabObject .Height;
</Source>
        </HAFunc>
      </HAFunc>
    </Body>
    <Footer>
      <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 4:18:45">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
    </Footer>
  </HAClass>
  <HAClass Type="Public" Text="HAAccountManager" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 21:45:17">
    <HAObject Type="Private" Text="accounts:HAAccount[]" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
    <Header>
      <HAFunc Type="Text" Text="ヘッダ" IsExpanded="false" IsSelected="true" AllowDrag="false" LastModified="2003/02/16 4:18:45">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="152" SelectionLength="0">using System;
using Girl.Windows.Forms;

namespace Girl.HierArch
{
	public class HAAccount
	{
		public string Server = "", Id = "", Password = "";
	}
}
</Source>
      </HAFunc>
    </Header>
    <Body>
      <HAFunc Type="Class" Text="本体" IsExpanded="true" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 4:18:45">
        <Arguments />
        <Comment SelectionStart="38" SelectionLength="0">&lt;summary&gt;
サーバのアカウントを管理します。
&lt;/summary&gt;
</Comment>
        <Source SelectionStart="0" SelectionLength="0" />
        <HAFunc Type="Public" Text="__CLASS" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
          <Arguments />
          <Comment SelectionStart="32" SelectionLength="0">&lt;summary&gt;
コンストラクタです。
&lt;/summary&gt;
</Comment>
          <Source SelectionStart="34" SelectionLength="0">this.accounts = new HAAccount[0];
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Get:HAAccount" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
          <Arguments>
            <HAObject Type="Private" Text="server:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="114" SelectionLength="0">server = __CLASS.RemoveQuery(server);
int num = this.Find(server);
return (num &gt;= 0) ? this.accounts[num] : null;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Set" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
          <Arguments>
            <HAObject Type="Private" Text="server:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            <HAObject Type="Private" Text="id:string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
            <HAObject Type="Private" Text="password:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="401" SelectionLength="0">server = __CLASS.RemoveQuery(server);
int num = this.Find(server);
if (num &lt; 0)
{
	int len = this.accounts.Length;
	HAAccount[] acs = new HAAccount[len + 1];
	for (int i = 0; i &lt; len; i++)
	{
		acs[i] = this.accounts[i];
	}
	acs[len] = new HAAccount();
	this.accounts = acs;
	num = len;
}
this.accounts[num].Server   = server;
this.accounts[num].Id       = id;
this.accounts[num].Password = password;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Find:int" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
          <Arguments>
            <HAObject Type="Private" Text="server:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="146" SelectionLength="0">server = __CLASS.RemoveQuery(server);
int i = 0;
foreach (HAAccount ac in this.accounts)
{
	if (ac.Server == server) return i;
	i++;
}
return -1;
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Load" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
          <Arguments>
            <HAObject Type="Private" Text="adm:ApplicationDataManager" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="5" SelectionLength="0">HAAccount[] acs = adm.Load("Accounts.xml", typeof(HAAccount[])) as HAAccount[];
this.accounts = (acs != null) ? acs : new HAAccount[0];
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="Save" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
          <Arguments>
            <HAObject Type="Private" Text="adm:ApplicationDataManager" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="41" SelectionLength="0">adm.Save("Accounts.xml", this.accounts);
</Source>
        </HAFunc>
        <HAFunc Type="Public" Text="RemoveQuery:static string" IsExpanded="false" IsSelected="false" AllowDrag="true" LastModified="2003/02/16 4:18:45">
          <Arguments>
            <HAObject Type="Private" Text="server:string" IsExpanded="false" IsSelected="true" AllowDrag="true" LastModified="2003/02/16 4:18:45" />
          </Arguments>
          <Comment SelectionStart="0" SelectionLength="0" />
          <Source SelectionStart="80" SelectionLength="0">int p = server.IndexOf('?');
return (p &gt;= 0) ? server.Substring(0, p) : server;
</Source>
        </HAFunc>
      </HAFunc>
    </Body>
    <Footer>
      <HAFunc Type="Text" Text="フッタ" IsExpanded="false" IsSelected="false" AllowDrag="false" LastModified="2003/02/16 4:18:45">
        <Arguments />
        <Comment SelectionStart="0" SelectionLength="0" />
        <Source SelectionStart="0" SelectionLength="0" />
      </HAFunc>
    </Footer>
  </HAClass>
</HAClass>